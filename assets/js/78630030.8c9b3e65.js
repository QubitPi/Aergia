"use strict";(self.webpackChunkaergia=self.webpackChunkaergia||[]).push([[5577],{4772:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"iac-intro","metadata":{"permalink":"/aergia/blog/iac-intro","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-11-07-iac-intro/index.md","source":"@site/blog/2022-11-07-iac-intro/index.md","title":"Introduction to Infrastructure as Code (IaC)","description":"Infrastructure as code (IaC) is the process of managing and provisioning computer data centers through","date":"2022-11-07T00:00:00.000Z","formattedDate":"November 7, 2022","tags":[{"label":"Infrastructure as Code","permalink":"/aergia/blog/tags/infrastructure-as-code"},{"label":"IaC","permalink":"/aergia/blog/tags/ia-c"}],"readingTime":2.445,"hasTruncateMarker":true,"authors":[{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"iac-intro","title":"Introduction to Infrastructure as Code (IaC)","authors":["jiaqi"],"tags":["Infrastructure as Code","IaC"]},"nextItem":{"title":"Chef Intro","permalink":"/aergia/blog/chef-intro"}},"content":":::tip [Wikipedia](https://en.wikipedia.org/wiki/Infrastructure_as_code):\\n\\n**Infrastructure as code** (**IaC**) is the process of managing and provisioning computer data centers through\\nmachine-readable definition files, rather than physical hardware configuration or interactive configuration tools. The\\nIT infrastructure managed by this process comprises both physical equipment, such as bare-metal servers, as well as\\nvirtual machines, and configuration resources. The definitions may be in a version control system. The code in the\\ndefinition files may use either scripts or declarative definitions, rather than maintaining the code through manual\\nprocesses, but IaC more often employs declarative approaches.\\n\\n:::\\n\\n\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\nThe Need for Automation\\n-----------------------\\n\\nAutomation is the act of building a process that will operate without human intervention. It means automating the\\nconfiguration and management of cloud-based or on-premises computing infrastructure.\\n\\n### What is Infrastructure\\n\\nWhen we speak of infrastructure, we are referring to the **physical and/or virtual machines that run businesses**. For\\nexample, a major retailer may require a large number of web servers, load balancers, and database servers to run their\\nretail websites.\\n\\nThese machines may be located in an on-premises data center, or very often, as virtual machines in \\"the cloud\\" such as\\nAmazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP).\\n\\n:::note\\n\\nVirtual machines run on actual physical hardware and typically a number of virtual machines can run on a single physical\\nmachine.\\n\\n:::\\n\\n![Error loading chef-infrstrucure2.png](./chef-infrstrucure2.png)\\n\\n**One thing all these virtual or real machines require is server management. Management such as installing and updating\\nsoftware, initial configuration, applying security measures, and periodic server content changes. Such management can be\\nlabor-intensive and tedious without automation.**\\n\\n### What is Automation\\n\\nAs mentioned above, automation is the act of building a process that will operate without human intervention. But what\\ndoes this mean in reality?\\n\\nIt\'s about creating a system that will take care of repetitive tasks, with consistency and reliability.  It is NOT about\\nreplacing human operators, but instead freeing their time to work on more complex problems that require intelligent\\ninsight, rather than simple rules.\\n\\nIn addition, the use of automation, and the promise of consistency and reliability helps provide trust in systems, which\\nin turn allows for greater innovation across the company.\\n\\n### Infrastructure Automation\\n\\nInfrastructure Automation refers to ensuring every system is configured correctly and consistently in any cloud, VM,\\nand/or physical infrastructure, in an automated fashion."},{"id":"chef-intro","metadata":{"permalink":"/aergia/blog/chef-intro","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-11-06-chef-intro/index.md","source":"@site/blog/2022-11-06-chef-intro/index.md","title":"Chef Intro","description":"Chef was founded in 2008. Its first product was called Chef (now called Chef Infra) which is a set of tools that","date":"2022-11-06T00:00:00.000Z","formattedDate":"November 6, 2022","tags":[{"label":"Chef","permalink":"/aergia/blog/tags/chef"}],"readingTime":10.68,"hasTruncateMarker":true,"authors":[{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"chef-intro","title":"Chef Intro","authors":["jiaqi"],"tags":["Chef"]},"prevItem":{"title":"Introduction to Infrastructure as Code (IaC)","permalink":"/aergia/blog/iac-intro"},"nextItem":{"title":"Ruby Essentials","permalink":"/aergia/blog/ruby"}},"content":"Chef was founded in 2008. Its first product was called _Chef_ (now called _Chef Infra_) which is a set of tools that\\nautomate the configuration of our cloud-based or on-prem server infrastructure.\\n\\n\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\n:::info\\n\\nFrom this point on, we will use \\"Chef\\" and \\"Chef Infra\\" interchangeably, unless clarified otherwise.\\n\\n:::\\n\\nChef can automate how we build, deploy, and manage our infrastructure. For example, say a large retailer needs to deploy\\nand configure 50 servers for an upcoming sale. They could use Chef to automate that infrastructure deployment.\\n\\n:::info\\n\\nIn October 2020, Chef Software was acquired by Progress Software and Chef Software operates as a business unit of\\nProgress Software. Chef Software has been and still is a leader in DevOps and DevSecOps.\\n\\n:::\\n\\nChef Software users consist of hundreds of small businesses to large enterprises:\\n\\n![Error loading chef-customers2.png](./chef-customers2.png)\\n\\n\x3c!-- markdown-link-check-disable --\x3e\\nWith Chef, [infrastructure automation](iac-intro#infrastructure-automation) typically begins with using the Chef and its\\ntools.\\n\x3c!-- markdown-link-check-enable --\x3e\\n\\nIn the example below, the user is uploading a set of Chef cookbooks to the Chef server. We can think of Chef cookbooks\\nas a set of configuration files, called **recipes**, that will instantiate, configure, and maintain our infrastructure\\nnodes in an automated fashion. (A node is a physical or virtual machine.)\\n\\n![Error loading chefinfra.png](./chefinfra.png)\\n\\nThe Chef server in turn loads those cookbooks to the correct nodes. Chef can do this on a massive scale thus eliminating\\nthe tedious task of manually configuring your infrastructure nodes individually.\\n\\nThe [Chef](https://github.com/chef/chef) is an open source technology that uses Ruby to develop basic building blocks\\nlike Chef recipes and cookbooks that configure and maintain our infrastructure. Chef helps in **reducing manual and\\nrepetitive tasks for infrastructure management**.\\n\\nHere is an example of a Chef recipe. This little bit of code, when applied to a node in our infrastructure, will:\\n\\n- install an Apache web server package (httpd)\\n- create a file on that node called \\"/var/www/html/index.html\\"\\n- enable and start the Apache web server\\n\\n```ruby\\npackage \'httpd\'\\n\\ntemplate \'/var/www/html/index.html\' do\\n  source \'index.html.erb\'\\nend\\n\\nservice \'httpd\' do\\n  action [:enable, :start]\\nend\\n```\\n\\nChef also works as a tool for implementing better DevOps. DevOps is a set of practices that combines software\\ndevelopment (Dev) and IT operations (Ops). DevOps is a fundamental aspect of collaboration between engineering and IT\\noperations to deploy better code, faster, in an **automated** manner. DevOps helps to improve an organization\'s velocity\\nto deliver apps and services. It\'s all about alignment -- alignment of engineering and IT ops via improved collaboration\\nand communication.\\n\\n![Error loading devops-lifecycle.png](./devops-lifecycle.png)\\n\\nOpen Source Software at Chef are\\n\\n- [Chef](#chef)\\n- [Chef InSpec](#chef-inspec)\\n- [Chef Habitat](#chef-habitat)\\n- [Chef Workstation](#chef-workstation)\\n- [Chef Automate](#chef-automate)\\n\\nChef\\n----\\n\\n[**Chef**](https://community.chef.io/tools/chef-infra/), a powerful automation platform that transforms infrastructure\\nconfiguration into code. Whether we\'re operating in the cloud, on-premises, or in a hybrid environment, Chef _automates\\nhow infrastructure is configured, deployed, and managed across our network_.\\n\\nAt the heart of this tool is the Chef Client, which typically runs as an agent on the systems managed by Chef. The\\nclient runs Chef libraries called [Cookbooks](#cookbooks), which declare the desired state of our system using\\ninfrastructure-as-code. The client then ensures our system is inline with the declared policy.\\n\\nThe diagram below demonstrates Chef Components:\\n\\n:::info\\n\\nNote that \\"Chef Client\\" is the same thing as \\"Chef Infra Client\\"\\n\\n:::\\n\\n![Error loading chef-overview-2020.svg](./chef-overview-2020.svg)\\n\\n### Cookbooks\\n\\nA cookbook is the fundamental unit of configuration and policy distribution in Chef. A cookbook defines a scenario and\\ncontains everything that is required to support that scenario:\\n\\n- Recipes that specify which Chef built-in resources to use, as well as the order in which they are to be applied. A\\n  recipe is the most fundamental configuration element within the organization. A recipe:\\n\\n  * Is authored using Ruby, which is a programming language designed to read and behave in a predictable manner\\n  * Is mostly a collection of [resources](#resources), defined using patterns (resource names, attribute-value pairs,\\n    and actions); helper code is added around this using Ruby, when needed\\n  * Must define everything that is required to configure **part of** a system\\n  * Must be stored in a cookbook\\n  * May be included in another recipe\\n  * May have a dependency on one (or more) recipes\\n  * May use the results of a search query and read the contents of a data bag (including an encrypted data bag)\\n  * Must be added to a run-list before it can be used by Chef Client\\n  * Is always executed in the same order as listed in a run-list\\n\\n  The Chef Client will run a recipe only when asked. When the Chef Client runs the same recipe more than once, the\\n  results will be the same system state each time. When a recipe is run against a system, but nothing has changed on\\n  either the system or in the recipe, the Chef Client will not change anything.\\n\\n  The Chef Language is a comprehensive systems configuration language with resources and helpers for configuring\\n  operating systems. The language is primarily used in Chef recipes and custom resources to tell the Chef Client what\\n  action(s) to take to configure a system. The Chef Language provides resources for system-level components such as\\n  packages, users, or firewalls, and it also includes helpers to allow us to make configuration decisions based on\\n  operating systems, clouds, virtualization hypervisors, and more.\\n\\n- Attribute values, which allow _environment-based_ configurations such as **dev** or **production**.\\n\\n  An attribute can be defined in a cookbook (or a recipe) and then used to override the default settings on a node. When\\n  a cookbook is loaded during a Chef Client run, these attributes are compared to the attributes that are already\\n  present on the node. Attributes that are defined in attribute files are first loaded according to cookbook order. For\\n  each cookbook, attributes in the _default.rb_ file are loaded first, and then additional attribute files (if present)\\n  are loaded in **lexical** sort order. When the cookbook attributes take precedence over the default attributes, Chef\\n  Client applies those new settings and values during a Chef Client run on the node.\\n\\n- [Custom Resources](#custom-resources) for extending Chef beyond the [built-in resources](#resources). A resource is a\\n  statement of configuration policy that:\\n\\n  * Describes the desired state for a configuration item\\n  * Declares the steps needed to bring that item to the desired state\\n  * Specifies a resource type - such as package, template, or service\\n  * Lists additional details (also known as resource properties), as necessary\\n  * Are grouped into recipes, which describe working configurations\\n\\n- Files and Templates for distributing information to systems.\\n- Custom Ohai Plugins for extending system configuration collection beyond the Ohai defaults.\\n- The \\"metadata.rb\\" file, which describes the cookbook itself and any dependencies it may have. Every cookbook requires\\n  a small amount of metadata. The contents of the \\"metadata.rb\\" file provides information that helps Chef Client and\\n  Server correctly deploy cookbooks to each node. A \\"metadata.rb\\" file is located at the top level of a cookbook\'s\\n  directory structure.\\n\\n### Policy\\n\\nPolicy maps business and operational requirements, process, and workflow to settings and objects stored on the Chef\\nServer:\\n\\n- Roles define server types, such as \\"web server\\" or \\"database server\\".\\n- Environments define process, such as \\"dev\\", \u201cstaging\u201d, or \\"production\\"\\n- Certain types of data - passwords, user account data, and other sensitive items - can be placed in data bags, which\\n  are located in a secure sub-area on the Chef Server that can only be accessed by nodes that authenticate to the Chef\\n  Server with the correct SSL certificates\\n\\nChef InSpec\\n-----------\\n\\n[**Chef InSpec**](https://community.chef.io/tools/chef-inspec), which provides a language for describing security and\\ncompliance rules that can be shared between software engineers, operators, and security engineers.\\n\\n:::info Compliance Automation\\n\\nCompliance automation refers to automatically ensuring our infrastructure complies with security standards set by\\nauthorities such as the [Center for Internet Security](https://www.cisecurity.org/) (CIS). Compliance automation helps\\nensure our infrastructure is protected from malicious intrusions and other security issues.\\n\\n![Error loading chef-automateui.png](./chef-automateui.png)\\n\\nThe Chef Compliance solution can automatically scan our infrastructure to identify and report security compliance\\nissues. Then we can use the Chef to remediate such security issues.\\n\\nChef Compliance uses the Chef InSpec language to create and run compliance profiles, which contain the logic to scan for\\nsecurity issues.\\n\\nHere is an example of the Chef InSpec language that tests a node for security compliance. In this example, InSpec is\\ntesting the node to ensure the ssh_config protocol should be 2. If the actual value from the node is not protocol 2, a\\ncritical issue is reported and can be displayed in the Chef Automate UI shown above\\n\\n![Error loading chef-inspec.png](./chef-inspec.png)\\n\\n:::\\n\\nInSpec is a language used to declare security requirements, or tests, called \\"controls\\" that are packaged into groups\\ncalled **profiles**. These profiles can be used to describe the requirements for all the environments that need to be\\naudited on a regular basis, such as production systems running business-critical applications.\\n\\nChef Habitat\\n------------\\n\\n**Chef Habitat**, an open source automation solution for defining, packaging, and delivering applications to almost any\\nenvironment regardless of operating system or platform.\\n\\n:::info Application Automation\\n\\nApplication Automation refers to defining, packaging and delivering applications to almost any environment regardless of\\noperating system or deployment platform. At Chef, the Chef Habitat solution enables DevOps and application teams to:\\n\\n- Build continuous delivery pipelines across all applications and all change events\\n- Create artifacts that can be deployed on-demand to bare-metal, VMs, or containers without any rewriting or refactoring\\n- Scale the adoption of agile delivery practices across development and operations\\n\\n:::\\n\\nWith Chef Habitat, an application that is built and run in development will be exactly the same as what\'s deployed in\\nproduction environments. This is accomplished by declaring the build and runtime instructions for the application in a\\nHabitat Plan file. The application is then built in a cleanroom environment that bundles the application alongside its\\ndeployment instructions into a single deployable Habitat artifact file (.HART). This artifact is then deployed by the\\nHabitat Supervisor, which monitors the application lifecycle, including deploying runtime configuration updates\\nwithout having the rebuild the application.\\n\\nHabitat allows for application automation to live alongside the app\'s source code. This reduces misunderstandings\\nbetween developers and operators about how an app is built or deployed, since these groups are using the same\\nsource-of-truth to define how an app works.\\n\\nChef Workstation\\n----------------\\n\\n**Chef Workstation** bundles together all the common software needed when building automation instructions for tools\\nlike Chef and Chef InSpec. It also includes common debugging and testing tools for all our automation code. Chef\\nWorkstation includes:\\n\\n- _The Chef Workstation App_\\n- _Chef Client_\\n- _Chef InSpec_\\n- _Chef Command Line Tool_, which allows you to apply dynamic, repeatable configurations to your servers directly over\\n  SSH or WinRM via chef-run. This provides a quick way to apply config changes to the systems we manage whether or not\\n  they\'re being actively managed by Chef, without requiring any pre-installed software.\\n- _Test Kitchen_, which can test cookbooks across any combination of platforms and test suites before we deploy those\\n  cookbooks to actual infrastructure nodes\\n- _Cookstyle_, which is a code linting tool that helps us write better Chef cookbooks by detecting and automatically\\n  correcting style, syntax, and logic mistakes in our code\\n- Plus various Test Kitchen and Knife plugins\\n\\nChef Automate\\n-------------\\n\\n**Chef Automate**, an enterprise visibility and metrics tool that provides actionable insights for any systems that we\\nmanage using Chef tools and products. The dashboard and analytics tool enables cross-team collaboration with actionable\\ninsights for configuration and compliance, such as a history of changes to environments to make audits simple and\\nreliable. Chef Automate can be used with a number of Chef Software products and solutions, and segregates information\\ninto separate dashboards for quick access and filtering.\\n\\nThe goal of Chef Automate is to make infrastructure management, application delivery and continuous compliance realities\\nby enabling cross-team collaboration using a single source-of-truth. All Chef OSS tools like Infra, InSpec and Habitat\\ncan be configured to report into Chef Automate to provide a window into the status and health of every application and\\nsystem in your organization.\\n\\n![Error loading chef-automatenodes.png](./chef-automatenodes.png)\\n\\nThis diagram shows how we develop, test, and deploy our Chef code.\\n\\n![Error loading start-chef.svg](./start-chef.svg)"},{"id":"ruby","metadata":{"permalink":"/aergia/blog/ruby","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-11-05-ruby/index.md","source":"@site/blog/2022-11-05-ruby/index.md","title":"Ruby Essentials","description":"Ruby is a simple programming language. Chef uses Ruby as its reference language to define the patterns that are found in","date":"2022-11-05T00:00:00.000Z","formattedDate":"November 5, 2022","tags":[{"label":"Chef","permalink":"/aergia/blog/tags/chef"},{"label":"Ruby","permalink":"/aergia/blog/tags/ruby"}],"readingTime":16.84,"hasTruncateMarker":true,"authors":[{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"ruby","title":"Ruby Essentials","authors":["jiaqi"],"tags":["Chef","Ruby"]},"prevItem":{"title":"Chef Intro","permalink":"/aergia/blog/chef-intro"},"nextItem":{"title":"Deploying Jenkins to AWS","permalink":"/aergia/blog/jenkins-on-aws"}},"content":"Ruby is a simple programming language. Chef uses Ruby as its reference language to define the patterns that are found in\\nresources, recipes, and cookbooks. Chef also uses these patterns to configure, deploy, and manage nodes across the\\nnetwork.\\n\\n\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\nInstally Ruby\\n-------------\\n\\n### Mac OS\\n\\nRuby comes pre-installed on macOS. However, pre-installed Ruby might be a few versions behind. The latest version can be\\ninstalled using a package manager like Homebrew, making it easy to install Ruby. Just run the following command.\\n\\n```bash\\nbrew install ruby\\n```\\n\\n### Linux\\n\\nLinux and Ubuntu use the apt package manager for installation. Run the following command in the terminal to install\\nRuby.\\n\\n```bash\\nsudo apt-get install ruby-full\\n```\\n\\nRuby Syntax\\n-----------\\n\\n### Control Flow\\n\\nRuby\'s `if` statement takes an expression and executes the code based on the evaluation of that expression. If the\\nexpression evaluates to `true`, Ruby executes the block of code following the `if` statement. If the expression\\nevaluates to `false`, then it doesn\'t execute the code. For example,\\n\\n```ruby\\nx = 10\\nif x > 7\\n puts \\"x is greater than 7\\"\\nend\\n```\\n\\nThe `else` statement is the partner of the `if` statement. If the expression evaluates to `true`, then the statement\\nfollowing the condition is executed. If the expression evaluates to `false`, then the statement following the else\\nstatement is executed.\\n\\n```ruby\\nx = 10\\n\\nif x < 7\\n puts \\"x is less than 7\\"\\nelse\\n puts \\"x is greater than 7\\"\\nend\\n```\\n\\nThe `if\u2026else` structure keeps us restricted to two options. What if we want to have more options in our program? Here,\\n`elsif` comes to the rescue and allows us to add alternatives to the traditional `if\u2026else`.\\n\\n```ruby\\nx = 10\\n\\nif x < 7\\n puts \\"x is less than 7\\"\\nelsif x > 7\\n puts \\"x is greater than 7\\"\\nelse\\n puts \\"x is equal to 7\\"\\nend\\n```\\n\\nSometimes, instead of checking whether an expression is true, we are more interested in knowing if a condition is false\\nand executing a block of code. Ruby allows us such program control using **unless**. For example\\n\\n```ruby\\nplaying = false\\n\\nunless playing\\n puts \\"We\'re busy learning Ruby\\"\\nelse\\n puts \\"It\'s time to play games\\"\\nend\\n```\\n\\nThe switch statement is a selective control flow statement. It allows us to easily control the flow of the code when an\\nexpression will result in one of a few anticipated values. Observe the following example.\\n\\n```ruby\\nnum = 0\\n\\ncase num\\nwhen 0\\n puts \\"Zero\\"\\nwhen 1\\n puts \\"One\\"\\nwhen 2\\n puts \\"Two\\"\\nelse\\n puts \\"The entered number is greater than 2\\"\\nend\\n```\\n\\n### Logical Operators\\n\\n|            |                                                                                            |\\n|:----------:|:------------------------------------------------------------------------------------------:|\\n| `&&` (and) | A condition using the `&&` operator evaluates to `true` if both operands are `true`.       |\\n| `||` (or)  | A condition using the `||` operator evaluates to `true` if any of the operands are `true`. |\\n| `!` (not)  | The `!` operator reverses the state of a single operand.                                   |\\n\\n### Loops\\n\\nA `while` loop checks to see if the specified condition is `true`, and while it is, the loop keeps running. As soon as\\nthe condition resolves to `false`, the loop stops.\\n\\n```ruby\\ncount = 1\\n\\nwhile count < 10\\n puts count\\n count = count + 1\\nend\\n```\\n\\nThe **until** loop works similarly to the `while` loop, except it will run while the condition is `false` and stop if\\nthe condition evaluates to `true`. For example:\\n\\n```ruby\\ncount = 6\\n\\nuntil count > 10\\n puts count\\n count = count + 1\\nend\\n```\\n\\nWhen we already know the number of times we want the loop to execute, we use a `for` loop:\\n\\n```ruby\\nfor count in 1...10\\n puts count\\nend\\n```\\n\\n> \u26a0\ufe0f The example above uses **three-dot form** which creates a range that excludes the specified high value. For\\n> example,\\n>\\n> ```ruby\\n> for count in 1...10\\n>  puts count\\n> end\\n> ```\\n>\\n> The snippet above produces the sequence 1 to 9.\\n>\\n> The **double-dot form** includes the specified high value. The following example prints 1 to 10 on the screen:\\n>\\n> ```ruby\\n> for count in 1..10\\n>  puts count\\n> end\\n> ```\\n\\nLike loops, iterators are methods that loop over a given set of data and perform a specified operation on each item. For\\nexample, let\'s say we want to print the string \u201cI am Learning Ruby\u201d on the screen five times. Sure, we can use a for\\nloop, but we can also achieve the same functionality using the **times iterator**:\\n\\n```ruby\\n5.times { puts \\"I am Learning Ruby!\\" }\\n```\\n\\nAlong with the times iterator, we also have the **each iterator**. Let\'s say that we have an array containing the days\\nof the week and we want to print them to the screen. In order to do that, we can use an each iterator.\\n\\n```ruby\\nTerminal: ~ - irb\\ndays = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\']\\n\\ndays.each { |day| puts day }\\n```\\n\\n### Arrays\\n\\nWe can declare items of the array by enclosing them in square brackets while separating the items using commas. For\\nexample:\\n\\n```ruby\\nmonths = [\\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\"]\\n```\\n\\nWe can refer to each item by referring to its zero-based index.\\n\\n```ruby\\nputs months[6]\\n```\\n\\nTo **add** more items to the array, we can use the `<<` operator or `push`.\\n\\n```ruby\\nmonths << \\"August\\"\\nmonths.push(\\"September\\")\\n```\\n\\nTo inset an element at a desired position, we can use the `insert` method:\\n\\n```ruby\\nmonths.insert(2, \\"October\\")\\n```\\n\\nThe **pop** method will remove the last item from the array.\\n\\n```ruby\\nmonths.pop\\n```\\n\\nThe `delete_at` method will remove the item at the specified index position.\\n\\n```ruby\\nmonths.delete_at(2)\\n```\\n\\nTo create nested arrays:\\n\\nThe **include?** method checks to see if the given argument is an element of the array. For example:\\n\\n```ruby\\nmy_array = [5, 9, 8, 2, 6]\\nputs my_array.include?(0) # returns false\\nputs my_array.include?(2) # returns true\\n```\\n\\nWhen called on an array, the **sort** method will return a sorted array. For example:\\n\\n```ruby\\nmy_array = [5, 9, 8, 2, 6]\\nprint my_array.sort\\n# results in my_array = [2, 5, 6, 8, 9]\\n```\\n\\nThe flatten method takes nested arrays and returns a single dimensional array.\\n\\n```ruby\\nmy_array = [5, 9, [8, 2, 6], [1, 0]]\\nprint my_array.flatten\\n# results in my_array = [5, 9, 8, 2, 6, 1, 0]\\n```\\n\\nThe `map` method invokes the code inside the block once for each element in the array and will create and return a new\\narray that contains the values returned by the block. For example:\\n\\n```ruby\\nmy_array = [5, 9, 8, 2, 6]\\nprint my_array.map { |item| item*2}\\n# results in my_array = [10, 18, 16, 4, 12]\\n```\\n\\n### Hash\\n\\nIn a hash, each item is stored with an associated key, which can be any object, and we can refer to the item as a\\nkey-value pair.\\n\\n```ruby\\nperson_hash = {\\n  \\"name\\" => \\"Jonathan\\",\\n  \\"age\\" => 25\\n }\\nputs person_hash\\n```\\n\\nAnother way of creating a hash is using the keyword `new`.\\n\\n```ruby\\nPerson_hash = Hash.new\\n```\\n\\nThis will create an empty hash to which we can add values later on.\\n\\nWe can easily access hash values. For example:\\n\\n```ruby\\nputs person_hash[\\"name\\"]\\nputs person_hash[\\"age\\"]\\n```\\n\\nWe can easily add to an existing hash by specifying a key-value pair.\\n\\n```ruby\\nperson_hash[\\"gender\\"] = \'male\'\\n```\\n\\nWe can use the **delete** function to remove items from hash.\\n\\n```ruby\\nperson_hash.delete(\\"gender\\")\\nputs person_hash\\n```\\n\\nTo iterate over hashes\\n\\n```ruby\\nperson_hash.each do |key, value|\\n puts \\"#{key} is #{value}\\"\\nend\\n```\\n\\nThe **has_key?** method is used to check if a hash contains a specific key and returns true if found. For example:\\n\\n```ruby\\nputs person_hash.has_key?(\\"name\\")\\nputs person_hash.has_key?(\\"height\\")\\n```\\n\\nThe **select** method is usually used with a block and returns any key-value pairs that satisfy the condition in the\\nblock\\n\\n```ruby\\nputs person_hash.select{ |key, value| key == \\"name\\"}\\n```\\n\\n### Sets\\n\\nIn Ruby, sets are collections of unique elements. The order of the elements doesn\'t matter, so they can\'t be reliably\\nreferenced by an index. Sets are useful when we want to ensure there are no duplicate items.\\n\\nUnlike any other collection, we need to add a `require` statement before making use of the Set class. The `require`\\nmethod is used to import all class and method definitions of the class. After that, we can create a set instance simply\\nusing the `new` keyword. For example:\\n\\n```ruby\\nrequire \'set\'\\nmy_set = Set.new\\n```\\n\\nYou can also pass an array to the new method to create a set.\\n\\n```ruby\\nmy_set = Set.new([5, 2, 9, 3, 1])\\n```\\n\\nWe can use the `<<` operator to add values to the set. Unlike arrays, we use the `add` method instead of `push`.\\n\\n```ruby\\nmy_set = Set.new\\nmy_set << 5\\nmy_set.add 1\\n```\\n\\n### Function\\n\\nA function is a set of statements that achieves a specific goal or performs a specific task. Ruby allows us to define\\nour own functions using the keyword `def`. For example:\\n\\n```ruby\\ndef greetings_with_name(name=\\"Emily\\")\\n puts \\"Hello #{name}!\\"\\nend\\n```\\n\\nYou can define methods that take any number of arguments.\\n\\n```ruby\\ndef optional_arguments(*a)\\n puts a\\nend\\n\\noptional_arguments(\\"Hello\\", \\"World\\", 2021)\\n```\\n\\nTo define a function that will return the product of two variables:\\n\\n```ruby\\ndef prod(x, y)\\n return x * y\\nend\\n```\\n\\nRuby also allows **implicit returns**. If a function lacks an explicit return statement, then Ruby will return the value\\nof the **last** executed instruction. For example\\n\\n```ruby\\ndef prod(x, y)\\n x*y\\nend\\n\\nputs prod(2, 5)\\n```\\n\\n#### Yield\\n\\nUsing **yield** inside a method will allow us to call the method with a block of code that will be inserted in place of\\nthe `yield` keyword. In other words, when the method gets to the `yield` keyword, it executes the block passed to the\\nmethod, then continues with any code after the yield keyword. Once the block is finished executing, it will return to\\nthe code in the method. The following example will make the idea clear.\\n\\n```ruby\\n# defining a method using yield\\ndef yielding_test\\n puts \\"We\'re now in the method!\\"\\n yield\\n puts \\"We\'re back in the method!\\"\\nend\\n\\n# calling the method with the block\\nyielding_test { puts \\"The method has yielded to the block and We\'re in the block now!\\" }\\n```\\n\\nWhen the above code executes, you will see the following on the screen.\\n\\n```bash\\nWe\'re now in the method!\\nThe method has yielded to the block and We\'re in the block now!\\nWe\'re back in the method!\\n```\\n\\nWe can also pass parameters to yield. Let\'s see another example.\\n\\n```ruby\\ndef yield_greetings(name)\\n puts \\"We\'re now in the method!\\"\\n yield(\\"Emily\\")\\n puts \\"In between the yields!\\"\\n yield(name)\\n puts \\"We\'re back in method.\\"\\nend\\n\\nyield_greetings(\\"Erick\\") { |n| puts \\"Hello #{n}.\\" }\\n```\\n\\n### Classes\\n\\nJust like objects in the real world, objects in programming are independent units with their own identity. For example,\\nan apple is an object that has its own unique identity. There could be multiple objects belonging to the same category.\\nFor example, apples could be green or red, but they still belong to the same apple category. This category could be\\nreferred to as a class.\\n\\nA class contains the data and actions associated with the object. In simple words, a class is like a blueprint for an\\nobject. Just like we can use blueprints to construct multiple buildings in the real world, we can use classes as a\\nblueprint to create multiple objects in programming.\\n\\nWe can define classes in Ruby by using the keyword **class** followed by the name of the class. Convention is that the\\nname of the class should start with a capital letter. For example:\\n\\n```ruby\\nclass Car\\n def initialize\\n  puts \\"The object is now created\\"\\n end\\nend\\n```\\n\\nYou can now create objects from class `Car` using the keyword `new` as follows:\\n\\n```ruby\\ncar = Car.new\\n```\\n\\nWe can also initialize the objects with some attributes. These attributes can also be called instance variables. Each\\nobject of the class will have a separate copy of the instance variable.\\n\\nInstance variables are preceded by **@**. For example, we can pass a parameter to the previously created initialize\\nmethod and assign its value to an instance variable as follows:\\n\\n```ruby\\nclass Car\\n def initialize(brand)\\n  @brand = brand\\n end\\nend\\n```\\n\\nWe can now create objects of the `Car` class by using the same `new` method, with the small difference of passing an\\nargument to it.\\n\\n```ruby\\ncar = Car.new(\\"Audi\\")\\n```\\n\\n#### Instance Methods and Class Methods\\n\\nRuby has two types of methods\\n\\n1. instance methods, and\\n2. class methods\\n\\nA class method is supposed to provide functionality to the class itself and cannot be called directly on an instance,\\nwhereas an instance method provides functionality to the instance of the class and cannot be called on the class itself.\\n\\nFor example\\n\\n```ruby\\nclass Greetings\\n def self.class_greetings\\n  puts \\"Hello, I\'m a class method\\"\\n end\\n\\n def instance_greetings\\n  puts \\"Hello, I\'m an instance method\\"\\n end\\nend\\n```\\n\\nThe Greetings class defines a class method, `self.class_greetings`, and an instance method, `instance_greetings`.\\n\\n#### Instance Variables and Class Variables\\n\\nInstance variables belong to the objects of the class and each object will have a separate copy of the instance\\nvariables. On the other hand, class variables are accessible to all the objects of the class since it belongs to the\\nclass and not a particular object.\\n\\nWe can declare a class variable with the prefix **@@**. For example:\\n\\n```ruby\\nclass Car\\n @@count = 0\\n def initialize\\n  @@count += 1\\n end\\n def self.get_instance_count\\n  @@count\\n end\\nend\\n```\\n\\n#### Mixins\\n\\nIt would be advantageous if we could inherit functionality from multiple places. Ruby provides this functionality using\\n**mixins**. A mixin is simply a set of code wrapped in a module that can be added to one or more classes to add to its\\nfunctionality. Once we \'mixin\' a module into a class, the class can access all the methods of the module. For example\\n\\n```ruby\\nmodule Greetings\\n def say_hello\\n  puts \\"Hello!\\"\\n end\\nend\\n```\\n\\nHere we defined a simple module called `Greetings`. The module contains a single method which outputs \\"Hello!\\" to the\\nscreen. Let\'s include this module in a class.\\n\\n```ruby\\nclass Person\\n include Greetings\\nend\\n```\\n\\nThe `Person` class will now access the module\'s method as if it were its own instance method, as made clear from the\\nfollowing.\\n\\n```ruby\\np1 = Person.new\\np1.say_hello\\n# outputs Hello!\\n```\\n\\n:::caution\\n\\nIn the example above, we can only access the module method as an _instance method_. If we try to call the method as a\\nclass method then we will get an error.\\n:::\\n\\nIn order to access module methods as _class methods_, we would use **extend** keyword:\\n\\n```ruby\\nclass Person\\n extend Greetings\\nend\\n```\\n\\nNow we can call the module method as a class method. For example:\\n\\n```ruby\\nPerson.say_hello\\n# outputs Hello!\\n```\\n\\n### Reading from the Console\\n\\nReading from the console is a way to get user input. Ruby has a **gets** method as a companion of puts and is used to\\nread data from the console. For example:\\n\\n```ruby\\nputs \\"what is your name?\\"\\n# getting user input and storing it into a variable i.e. name\\nname = gets\\nputs \\"Hello #{name}\\"\\n```\\n\\nThe code above will first prompt the user for their name. It then stores the entered string into a variable called\\n`name`, which can be used later to print a simple message to the console.\\n\\n### Creating a File\\n\\nRuby allows us to create and work with files using its built-in **File** class. Here\'s an example:\\n\\n```ruby\\ntest_file = File.new(\\"test.txt\\", \\"w+\\")\\n```\\n\\nThe code above will create a text file named \\"test.txt\\". Specifying `w+` mode will give us read and write access. Before\\nmoving forward, let\'s take a look at different file modes.\\n\\n- r: This is the default mode for files in Ruby. It provides read-only access and starts reading the file at the\\n  beginning\\n- r+: Specifying this mode provides read and write access and it also starts at the beginning of the file\\n- w: This mode provides write-only access and specifying this mode will truncate the existing file and create a new file\\n  for writing\\n- w+: This mode provides both read and write access but it truncates the existing file and overwrites the existing file\\n  for reading and writing\\n- a: This mode is write only and specifying this mode will append to the end of the file for writing\\n- a+: This mode also provides both read and write access but it appends or reads from the end of the file\\n\\nTo open an existing file, use the **open** method of `File` class:\\n\\n```ruby\\ntest_file = File.open(\\"test.txt\\", \\"w+\\")\\n```\\n\\nReading from the file is also as simple as a method call.\\n\\n```ruby\\nFile.read(\\"test.txt\\")\\n```\\n\\nRuby allows us to write to files using either **puts** or **write**. The only difference between them is that _puts_\\nadds a line break to the end of the string to be added while `write` does not.\\n\\n```ruby\\ntest_file = File.open(\\"test.txt\\", \\"w+\\")\\ntest_file.puts(\\"We\'re writing some text to file\\")\\ntest_file.close\\n```\\n\\nor\\n\\n```ruby\\nFile.open(\\"test.txt\\", \\"w+\\") {\\n |file| file.puts(\\"This text was added using code block\\")\\n}\\n```\\n\\n> \ud83d\udca1 We don\'t need to worry about closing the file here since Ruby will automatically close the file for us.\\n\\n### Sending HTTP Requests\\n\\nRuby comes with a built-in HTTP client **net/http** that can be used to send any kind of HTTP request we may need. We\\nneed to require the net/http client to work with it. For example:\\n\\n```ruby\\nrequire \'net/http\'\\nhttp_response = Net::HTTP.get_response(\'www.example.com\' , \'/\')\\n````\\n\\nThe code above will return a string with the HTML content of the specified URL. Most of the time we aren\'t interested in\\nHTML content, but rather something simpler, such as whether the connection was successful. This can be done by checking\\nthe HTTP response status. For example:\\n\\n```ruby\\nrequire \'net/http\'\\nhttp_response = Net::HTTP.get_response(\'www.google.com\', \'/\')\\nputs http_response.code\\n# 200\\n```\\n\\nWe can also get the body of the response using the **body** method.\\n\\n```ruby\\nputs http_response.body\\n```\\n\\n### Parsing HTTP Response\\n\\nTo parse received data to JSON or XML format:\\n\\n```ruby\\nrequire \'net/http\'\\n\\nrequire \'uri\'\\nrequire \'json\'\\n\\nuri = URI(\'http://www.example.com/sample.json\')\\nresponse = Net::HTTP.get(uri)\\njson_response = JSON(response)\\n```\\n\\nHere, we are requiring two other modules, **uri** and **json**. The uri module provides classes to handle Uniform\\nResource Identifiers (a string of characters that unambiguously identifies a particular resource, like a URL). The json\\nmodule is used to parse a JSON string received by another application or generated within your existing application.\\n\\nThere are no less than 25 HTTP clients that [Ruby Toolbox](https://www.ruby-toolbox.com/) offers. We just barely\\nscratched the surface. We would encourage you to experiment with other HTTP clients as well and pick the one that suits\\nyou best.\\n\\n### Receiving HTTP Requests\\n\\nTo receive HTTP requests, we need a way to listen to HTTP requests on a network port. For this purpose, we can write our\\nown HTTP server or choose one from Ruby Toolbox. To keep it simple, let\'s use **WEBrick**, which is included in the\\nstandard Ruby library and doesn\'t require any extra installation.\\n\\n```ruby\\nrequire \'webrick\'\\n\\n# specifying port to listen to HTTP requests\\nhttp_server = WEBrick::HTTPServer.new(:Port => 3000)\\n\\n# inheriting the functionality of WEBrick HTTPServlet\\nclass MyHTTPServlet < WEBrick::HTTPServlet::AbstractServlet\\n  # outputs the requested path\\n def do_GET(http_request, http_response)\\n  http_response.body = \\"You requested \'#{http_request.path}\'\\"\\n end\\nend\\n\\nhttp_server.mount(\'\', MyHTTPServlet)\\n# stop the server using Ctrl-C\\ntrap(\'INT\') {http_server.shutdown}\\nhttp_server.start\\n```\\n\\nOnce the server starts running, we can make requests to the server. For instance,\\n\\n```bash\\ncurl localhost:3000\\n# You requested \'/\'\\n```"},{"id":"jenkins-on-aws","metadata":{"permalink":"/aergia/blog/jenkins-on-aws","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-10-31-jenkins-on-aws/index.md","source":"@site/blog/2022-10-31-jenkins-on-aws/index.md","title":"Deploying Jenkins to AWS","description":"[//]: # (Copyright Jiaqi Liu)","date":"2022-10-31T00:00:00.000Z","formattedDate":"October 31, 2022","tags":[{"label":"Jenkins","permalink":"/aergia/blog/tags/jenkins"}],"readingTime":45.17,"hasTruncateMarker":true,"authors":[{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"jenkins-on-aws","title":"Deploying Jenkins to AWS","authors":["jiaqi"],"tags":["Jenkins"]},"prevItem":{"title":"Ruby Essentials","permalink":"/aergia/blog/ruby"},"nextItem":{"title":"Jenkins Troubleshooting","permalink":"/aergia/blog/jenkins-troubleshooting"}},"content":"\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\nJenkins is an open-source automation server that integrates with a number of AWS Services, including: AWS CodeCommit,\\nAWS CodeDeploy, Amazon EC2 Spot, and Amazon EC2 Fleet. We can use Amazon Elastic Compute Cloud (Amazon EC2) to deploy a\\nJenkins application on AWS.\\n\\nThis section documents the process of deploying a Jenkins application. We will launch an EC2 instance, install Jenkins\\non that instance, and configure Jenkins to automatically spin up Jenkins agents if build abilities need to be augmented\\non the instance.\\n\\n:::note Prerequisites\\n\\n1. [Register an AWS account](https://portal.aws.amazon.com/billing/signup#/start), if not having one yet.\\n2. [An Amazon EC2 key pair](#creating-a-key-pair), if we don\'t have one yet\\n\\n:::\\n\\nCreating a Key Pair\\n-------------------\\n\\nCreating a key pair helps ensure that the correct form of authentication is used when we install Jenkins.\\n\\nTo create our key pair:\\n\\n1. Open the [Amazon EC2 console](https://console.aws.amazon.com/ec2/) and sign in.\\n2. In the navigation pane, under **NETWORK & SECURITY**, select **Key Pairs**.\\n3. Select **Create key pair**.\\n4. For **Name**, enter a descriptive name for the key pair. Amazon EC2 associates the public key with the name that we\\n   specify as the **key name**. A key name can include up to 255 ASCII characters. It cannot include leading or trailing\\n   spaces.\\n5. For **File format**, select the format in which to save the private key.\\n    - For OpenSSH compatibility (Linux or Mac OS X), select pem.\\n    - For PuTTY compatibility (Windows), select ppk.\\n6. Select **Create key pair**.\\n7. The private key file downloads automatically. The base file name is the name we specified as the name of our key\\n   pair, and the file name extension is determined by the file format we chose. Save the private key file in a safe\\n   place.\\n\\n   :::caution\\n\\n   This is the only chance for us to save the private key file.\\n\\n   :::\\n\\n8. If we use an SSH client on a macOS or Linux computer to connect to our Linux instance, we would also run the\\n   following command to set the permissions of our private key file so that only we can read it, otherwise we won\'t be\\n   able to connect to our instance using this key pair. For more information, please refer to\\n   [Error: Unprotected private key file](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#troubleshoot-unprotected-key).\\n\\n   ```bash\\n   chmod 400 <key_pair_name>.pem\\n   ```\\n\\nCreating a Security Group\\n-------------------------\\n\\nA security group acts as a firewall that controls the traffic allowed to reach one or more EC2 instances. When we launch\\nan instance, we can assign it one or more security groups. We add rules that control the traffic allowed to reach the\\ninstances in each security group. We can modify a security group\'s rules any time, and the new rules take effect\\n_immediately_.\\n\\nTo create and configure our security group:\\n\\n1. Decide who may access our instance. For example, a single computer or all trusted computers on a network. For a\\n   single computer/user, we can use the public IP address of the computer/user. To find the IP address, use the\\n   [check IP service tool](http://checkip.amazonaws.com/) from AWS3 (this tool works for VPN as well) or search for the\\n   phrase \\"what is my IP address\\" in any search engine.\\n2. Sign in to the [AWS Management Console](https://console.aws.amazon.com/ec2/).\\n3. Open the Amazon EC2 console by selecting **EC2** under **Compute**.\\n\\n   ![Error loading ec2-service.png](./ec2-service.png)\\n\\n4. In the left-hand navigation bar, select **Security Groups**, and then select **Create Security Group**.\\n\\n   ![Error loading create-security-group.png](./create-security-group.png)\\n\\n5. In **Security group name**, enter **WebServerSG** or any preferred name of our choice, and provide a description.\\n6. Select our VPC from the list. We can use the default VPC.\\n7. On the **Inbound tab**, add the rules as follows:\\n    - Select **Add Rule**, and then select **SSH** from the Type list.\\n    - Under Source, select **Custom**, and in the text box, enter the IP address from step 1.\\n    - Select **Add Rule**, and then select **HTTP** from the Type list.\\n    - Select **Add Rule**, and then select **Custom TCP Rule** from the Type list.\\n    - Under **Port Range**, enter **8080** (Jenkins UI port).\\n8. Select Create.\\n\\nFor more information, refer to\\n[Security Groups](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html) in the Amazon EC2 User\\nGuide for Linux Instances.\\n\\nLaunching an Amazon EC2 Instance\\n--------------------------------\\n\\nTo launch an EC2 instance:\\n\\n1. Sign in to the [AWS Management Console](https://console.aws.amazon.com/ec2/).\\n2. Open the Amazon EC2 console by selecting EC2 under **Compute**.\\n3. From the Amazon EC2 dashboard, select **Launch Instance**.\\n\\n   ![Error loading ec2-launch-instance.png](./ec2-launch-instance.png)\\n\\n4. We will run Ubuntu OS in our instance, so let\'s pick up \\"Ubuntu\\" and give it a name such as \\"Jenkins Server\\"\\n\\n   ![Error loading ec2-instance-setup.png](./ec2-instance-setup.png)\\n\\n5. On the Choose an Instance Type page, the **t2.micro** instance is selected by default. Verify this instance type is\\n   selected to stay within the free tier.\\n6. Pick up the Key Pair (under \\"Key pair\\" section) and the security group (under \\"Network settings\\") we defined\\n   previously\\n7. Hit \\"Launch Instance\\"\\n8. In the left-hand navigation bar, choose Instances to view the status of our instance. Initially, the status of our\\n   instance is pending. After the status changes to running, our instance is ready for use.\\n\\n   ![Error loading ec2-view-created-instance.png](./ec2-view-created-instance.png)\\n\\nInstalling Jenkins on EC2\\n-------------------------\\n\\nNow that the Amazon EC2 instance has been launched, Jenkins can be installed properly.\\n\\nIn this step we will deploy Jenkins on our EC2 instance by completing the following tasks:\\n\\n1. [Connecting to Our Linux Instance](#connecting-to-our-linux-instance)\\n2. [Downloading and Installing Jenkins](#downloading-and-installing-jenkins)\\n3. [Configuring Jenkins](#configuring-jenkins)\\n\\n### Connecting to Our Linux Instance\\n\\nAfter we launch our instance, we can connect to it and use it the same way as our local machine.\\n\\nBefore we connect to our instance, get the public DNS name of the instance using the Amazon EC2 console.\\n\\n![Error loading ec2-public-dns.png](./ec2-public-dns.png)\\n\\nUse the `ssh` command to connect to the instance. We will specify the private key (.pem) file and\\n`ec2-user@public_dns_name`.\\n\\n```bash\\nssh -i \\"/path/my-key-pair.pem\\" ubuntu@ec2-198-51-100-1.compute-1.amazonaws.com\\n```\\n\\nWe will receive a response like the following:\\n\\n```bash\\nThe authenticity of host \'ec2-198-51-100-1.compute1.amazonaws.com (10.254.142.33)\' cant be\\nestablished.\\n\\nRSA key fingerprint is 1f:51:ae:28:bf:89:e9:d8:1f:25:5d:37:2d:7d:b8:ca:9f:f5:f1:6f.\\n\\nAre you sure you want to continue connecting\\n(yes/no)?\\n```\\n\\nEnter \\"yes\\". We will receive a response like the following:\\n\\n```bash\\nWarning: Permanently added \'ec2-198-51-100-1.compute1.amazonaws.com\' (RSA) to the list of known hosts.\\n```\\n\\n### Downloading and Installing Jenkins\\n\\n#### Installing Java\\n\\nJenkins requires Java in order to run, yet certain distributions don\'t include this by default and some Java versions\\nare incompatible with Jenkins, because **Jenkins requires Java 11 or 17 since Jenkins 2.357 and LTS 2.361.1**.\\n\\nThere are multiple Java implementations which we can use. [OpenJDK](https://openjdk.java.net/) is the most popular one\\nat the moment, we will use it in this guide.\\n\\nUpdate the Debian apt repositories, install OpenJDK 11, and check the installation with the commands:\\n\\n```bash\\n$ sudo apt update\\n$ sudo apt install openjdk-11-jre\\n$ java -version\\nopenjdk version \\"11.0.12\\" 2021-07-20\\nOpenJDK Runtime Environment (build 11.0.12+7-post-Debian-2)\\nOpenJDK 64-Bit Server VM (build 11.0.12+7-post-Debian-2, mixed mode, sharing)\\n```\\n\\n#### Installing Jenkins\\n\\nOn Debian and Debian-based distributions like Ubuntu, i.e. our EC2 base image, we can install Jenkins through `apt`.\\n\\n##### Long Term Support Release\\n\\nA Jenkins [LTS (Long-Term Support) release](https://www.jenkins.io/download/lts/) is chosen every 12 weeks from the\\nstream of regular releases as the stable release for that time period. It can be installed from the\\n[debian-stable apt repository](https://pkg.jenkins.io/debian-stable/).\\n\\n```bash\\ncurl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \\\\\\n/usr/share/keyrings/jenkins-keyring.asc > /dev/null\\n\\necho deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \\\\\\nhttps://pkg.jenkins.io/debian-stable binary/ | sudo tee \\\\\\n/etc/apt/sources.list.d/jenkins.list > /dev/null\\n\\nsudo apt-get update\\nsudo apt-get install jenkins\\n```\\n\\nBeginning with Jenkins 2.335 and Jenkins 2.332.1, the package is configured with **systemd** rather than the older\\nSystem V init, so we would use systemd extensively to configure Jenkins next.\\n\\nThe package installation will:\\n\\n- Setup Jenkins as a daemon launched on start. Run **`systemctl cat jenkins`** for more details.\\n- Create a \\"**jenkins**\\" user to run this service. This username is very important because it would be used latter\\n  during [HTTPS/SSL configuration](#enable-ssl-on-jenkins-server-ubuntu)\\n\\n  :::tip\\n\\n  To verify user \\"jenkins\\" has been created, run `cat /etc/passwd`. Every user on a Linux system, whether created as an\\n  account for a real human being or associated with a particular service or system function, is stored in a file called\\n  \\"**/etc/passwd**\\", which contains information about the users on the system. Each line describes a distinct user.\\n\\n  :::\\n\\n- Direct console log output to `systemd-journald`. Run **`journalctl -u jenkins.service -r`** if we are troubleshooting\\n  Jenkins.\\n- Populate `/lib/systemd/system/jenkins.service` with configuration parameters for the launch, e.g `JENKINS_HOME`\\n- Set Jenkins to listen on port 8080. Access this port with our browser to start configuration. Note that this is not\\n  a secure port because it is a HTTP port. We would change this port in a moment for better security.\\n\\n##### Weekly Release\\n\\nAlternatively, a new release is produced weekly to deliver bug fixes and features to users and plugin developers. It can\\nbe installed from the [debian apt repository](https://pkg.jenkins.io/debian/).\\n\\n```bash\\ncurl -fsSL https://pkg.jenkins.io/debian/jenkins.io.key | sudo tee \\\\\\n  /usr/share/keyrings/jenkins-keyring.asc > /dev/null\\n\\necho deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \\\\\\n  https://pkg.jenkins.io/debian binary/ | sudo tee \\\\\\n  /etc/apt/sources.list.d/jenkins.list > /dev/null\\n\\nsudo apt-get update\\nsudo apt-get install jenkins\\n```\\n\\nEnable SSL on Jenkins Server (Ubuntu)\\n-------------------------------------\\n\\nIt is very important to secure Jenkins by enabling SSL which runs in a project environment. This section is designed to\\nintroduce the Secure Sockets Layer (SSL) application-level protocol, and particularly the OpenSSL implementation of\\nSSL, in the context of using in Jenkins. After a brief description of exactly what OpenSSL is, and what it is useful\\nfor, the section will further illustrate the practical usage of OpenSSL in Jenkins service for the purpose of serving\\nsecured Jenkins resources from our EC2 instance.\\n\\nWhile previous familiarity with Server Sockets Layer (SSL), or the OpenSSL implementation in particular, is not required\\nfor this section, if desired, the reader is advised to pursue further learning from the [resources](#resources) listed\\nbelow in order to broaden his/her understanding of this powerful security layer.\\n\\n### Resources\\n\\n#### Local System Resources\\n\\n| command           | description                                                             |\\n|-------------------|-------------------------------------------------------------------------|\\n| **`man config`**  | System manual page for the OpenSSL library configuration files          |\\n| **`man gendsa`**  | System manual page for the gendsa DSA private key generator             |\\n| **`man genrsa`**  | System manual page for the genrsa RSA private key generator             |\\n| **`man openssl`** | System manual page for the openssl command-line tool                    |\\n| **`man rand`**    | System manual page for the rand pseudo-random byte generator utility    |\\n| **`man x509`**    | System manual page for the x509 certificate display and signing utility |\\n\\n#### WWW Resources\\n\\n- [CACert, a FREE X.509 Certificate Authority](http://www.cacert.org/)\\n- [OpenSSL Website](http://www.openssl.org/)\\n- [Public Key Infrastructure (X.509) (pkix)](http://www.ietf.org/html.charters/pkix-charter.html)\\n\\n### About OpenSSL\\n\\n**Secure Sockets Layer** is an application-level protocol which was developed by the Netscape Corporation for the\\npurpose of transmitting sensitive information, such as Credit Card details, via the Internet. SSL works by using a\\nprivate key to encrypt data transferred over the SSL-enabled connection, thus thwarting eavesdropping of the\\ninformation. The most popular use of SSL is in conjunction with web browsing (using the HTTP protocol), but many network\\napplications can benefit from using SSL. By convention, URLs that require an SSL connection start with \\"https:\\" instead\\nof \\"http:\\"\\n\\n**OpenSSL** is a robust, commercial-grade implementation of SSL tools, and related general purpose library based upon\\nSSLeay, developed by Eric A. Young and Tim J. Hudson. OpenSSL is available as an Open Source equivalent to commercial\\nimplementations of SSL via an [Apache-style license](http://www.openssl.org/source/license.html).\\n\\n#### About X.509\\n\\nX.509 is a specification for digital certificates published by the International Telecommunications Union -\\nTelecommunication (ITU-T). It specifies information and attributes required for the identification of a person or a\\ncomputer system, and is used for secure management and distribution of digitally signed certificates across secure\\nInternet networks. OpenSSL most commonly uses X.509 certificates.\\n\\n### Installing OpenSSL Toolkit\\n\\nAWS EC2 instance usually have OpenSSL installed and configured properly.\\n\\n### Generating SSL Certificates\\n\\nOnce we have properly generated an X.509-compliant SSL certificate, we may either elect to\\n\\n- sign the certificate by ourselves by [generating a Certificate Authority (CA)](#self-signing-a-certificate), or\\n- have a globally recognized Certificate Authority [sign the certificate](#applying-for-a-certificate-using-certbot). We\\n  can use services such as [Letsencrypt](https://letsencrypt.org/) for valid SSL certificates. But these certificates\\n  have to be renewed every three months.\\n\\nWhen the certificate is signed, it is then ready to be used with the OpenSSL toolkit, or the library to enable encrypted\\nSSL connections to a Lightweight Directory Access Protocol, (LDAP) or Hyper Text Transport Protocol (HTTP) server, for\\nexample. The following sections describe the certificate generation, and signing process for both self-signed, and\\nrecognized CA-signed certificates.\\n\\n> Note that this section has no Jenkins involved and sets up SSL in a more general context\\n\\n#### Self-signing a Certificate\\n\\n##### Establishing a Certificate Authority\\n\\n:::info What is a Self-Signed Certificate?\\n\\nA **self-signed certificate** is an SSL/TSL certificate not signed by a public or private certificate authority.\\nInstead, it is signed by the creator\u2019s own personal or root CA certificate.\\n\\nHere is what we do to request paid SSL/TLS certificate from a **well-known Certificate Authority** like Verisign or\\ncomodo.\\n\\n![Error loading well-known-certificate-authority.png](./well-known-certificate-authority.png)\\n\\n1. Create a **certificate signing request (CSR)** with a private key. A CSR contains details about location,\\n   organization, and FQDN (Fully Qualified Domain Name).\\n2. Send the CSR to the trusted CA authority.\\n3. The CA authority will send us the SSL certificate signed by their root certificate authority and private key.\\n4. We can then validate and use the SSL certificate with our applications.\\n\\nBut for a **self-signed certificate**, here is what we do.\\n\\n![Error loading self-signed-cert.png](./self-signed-cert.png)\\n\\n1. Create our own root CA certificate & CA private key (We act as a CA on our own)\\n2. Create a server private key to generate CSR\\n3. Create an SSL certificate with CSR using our root CA and CA private key.\\n4. Install the CA certificate in the browser or Operating system to avoid security warnings.\\n\\nMost browsers & operating systems hold a copy of root CA certificates of all the trusted certified Certificated\\nAuthorities. That\'s the reason the browsers won\'t show any security messages when we visit standard websites that use\\nSSL from a trusted and well-known commercial Certificate authority. For example, the following image shows the root CA\\npresent in the Firefox browser by default.\\n\\n![Error loading trusted-ca.png](./trusted-ca.png)\\n\\nAt the same time, if we use a self-signed certificate, our browser will throw a security warning. The reason is browsers\\nonly trust SSL from a trusted Certificate authority. For example,\\n\\n```bash\\nYour connection is not private\\nAttackers might be trying to steal your information from demo.apps.mlopshub.com (for example, passwords, messages or\\ncredit cards)\\n```\\n\\nBut we can force browsers & operating systems to accept our own certificate authority. So we won\'t see the security\\nwarning once we install the CA certificate and add it to the trusted list. We can also share the CA certificate with our\\ndevelopment team to install in their browsers as well.\\n\\nAlso, we can use this CA to create **more than one SSL certificate**.\\n\\n:::\\n\\nSelf-signed certificates have a major advantage in that they are completely free to use, and they may be generated,\\nsigned, and used on an as-needed basis. Self-signed certificates are great for use in closed-lab environments or for\\ntesting purposes. One of the drawbacks of using self-signed certificates, however, is that warnings will typically be\\nissued by a user\'s Web browser, and other applications, upon accessing an SSL-secured server that uses a self-signed\\ncertificate. By default, client applications (e.g., Firefox) will suppress such warnings for certificates that are\\nsigned using only a globally-recognized and trusted Certificate Authority, but warnings may also be squelched by\\nimporting a server\'s root certificate into client applications; a relevant demonstration is shown later in this guide.\\nUsing self-signed certificates in a publicly-accessible, production environment is not recommended due to the implicit\\ntrust issues arising from these warnings, in addition to the potential confusion caused to users.\\n\\n:::caution\\n\\nWe must obtain a certificate signed by a recognized Certificate Authority in order to establish a commercial site, e.g.,\\nfor conducting \\"e-commerce\\", which is however not the case in the context of Jenkins we deiscuss here\\n\\n:::\\n\\nProvided we\'ve have the OpenSSL toolkit properly installed on our EC2 instance, the generation of X.509 SSL certificates\\nis quite simple. For self-signed certificates, we must **first establish a Certificate Authority (CA)** by following the\\nsteps below:\\n\\nFirst, create an initial working environment, for example within our home directory by issuing the following command\\nfrom a terminal prompt:\\n\\n```bash\\ncd && mkdir -p myCA/signedcerts && mkdir myCA/private && cd myCA\\n```\\n\\nThe above command will place us in a newly-created subdirectory of our home directory named \\"myCA\\", and within this\\nsubdirectory, we should have two additional subdirectories named \\"signedcerts\\" and \\"private\\".\\n\\nWithin this initial working environment, the significance of the subdirectories, and their contents is as follows:\\n\\n1. `~/myCA`: contains CA certificate, certificates database, generated certificates, keys, and requests\\n2. `~/myCA/signedcerts`: contains copies of each signed certificate\\n3. `~/myCA/private`: contains the private key\\n\\nNext, create an initial certificate database in the `~/myCA` subdirectory with the following command at a terminal\\nprompt:\\n\\n```bash\\necho \'01\' > serial  && touch index.txt\\n```\\n\\nNow create an initial **caconfig.cnf** file suitable for the creation of CA certificates. Using our favorite editor,\\nedit the file `~/myCA/caconfig.cnf`, and insert the following content into the file:\\n\\n```bash\\nsudo nano ~/myCA/caconfig.cnf\\n```\\n\\n```conf\\n# My sample caconfig.cnf file.\\n#\\n# Default configuration to use when one is not provided on the command line.\\n#\\n[ ca ]\\ndefault_ca      = local_ca\\n#\\n#\\n# Default location of directories and files needed to generate certificates.\\n#\\n[ local_ca ]\\ndir             = /home/<username>/myCA\\ncertificate     = $dir/cacert.pem\\ndatabase        = $dir/index.txt\\nnew_certs_dir   = $dir/signedcerts\\nprivate_key     = $dir/private/cakey.pem\\nserial          = $dir/serial\\n#\\n#\\n# Default expiration and encryption policies for certificates.\\n#\\ndefault_crl_days        = 365\\ndefault_days            = 1825\\ndefault_md              = sha1\\n#\\npolicy          = local_ca_policy\\nx509_extensions = local_ca_extensions\\n#\\n#\\n# Copy extensions specified in the certificate request\\n#\\ncopy_extensions = copy\\n#\\n#\\n# Default policy to use when generating server certificates.  The following\\n# fields must be defined in the server certificate.\\n#\\n[ local_ca_policy ]\\ncommonName              = supplied\\nstateOrProvinceName     = supplied\\ncountryName             = supplied\\nemailAddress            = supplied\\norganizationName        = supplied\\norganizationalUnitName  = supplied\\n#\\n#\\n# x509 extensions to use when generating server certificates.\\n#\\n[ local_ca_extensions ]\\nbasicConstraints        = CA:false\\n#\\n#\\n# The default root certificate generation policy.\\n#\\n[ req ]\\ndefault_bits    = 2048\\ndefault_keyfile = /home/<username>/myCA/private/cakey.pem\\ndefault_md      = sha1\\n#\\nprompt                  = no\\ndistinguished_name      = root_ca_distinguished_name\\nx509_extensions         = root_ca_extensions\\n#\\n#\\n# Root Certificate Authority distinguished name.  Change these fields to match\\n# your local environment!\\n#\\n[ root_ca_distinguished_name ]\\ncommonName              = MyOwn Root Certificate Authority\\nstateOrProvinceName     = NC\\ncountryName             = US\\nemailAddress            = root@tradeshowhell.com\\norganizationName        = Trade Show Hell\\norganizationalUnitName  = IT Department\\n#\\n[ root_ca_extensions ]\\nbasicConstraints        = CA:true\\n```\\n\\n:::caution\\n\\nMake sure to adjust the site-specific details in the file, such as the two instances of `/home/<username>/` under\\n`[ local_ca ]` and `[ req ]`. Also change `commonName`, `stateOrProvinceName` `countryName` etc under\\n`[ root_ca_distinguished_name ]` accordingly. For more information on the directives contained within this configuration\\nfile, use the `man config` command.\\n\\n:::\\n\\nWhen we\'ve edited the file to match our environment, save the file as `~/myCA/caconfig.cnf`.\\n\\nNext, we need to generate the **Certificate Authority Root Certificate** and **Key**, by issuing a few commands. First,\\ndo this:\\n\\n```bash\\nexport OPENSSL_CONF=~/myCA/caconfig.cnf\\n```\\n\\nThe previous command sets an environment variable, `OPENSSL_CONF`, which forces the openssl tool to look for a\\nconfiguration file in an alternative location (in this case, `~/myCA/caconfig.cnf`).\\n\\nNow, generate the CA certificate and key with the following command:\\n\\n```bash\\nopenssl req -x509 -newkey rsa:2048 -out cacert.pem -outform PEM -days 1825\\n```\\n\\nWe should be prompted for a passphrase, and see output similar to this:\\n\\n```bash\\nGenerating a 2048 bit RSA private key\\n.................................+++\\n.................................................................................................+++\\nwriting new private key to \'/home/bshumate/myCA/private/cakey.pem\'\\nEnter PEM pass phrase:\\nVerifying - Enter PEM pass phrase:\\n-----\\n```\\n\\n**Do not forget the passphrase used with the command above!** We\'ll need it every time we want to generate and sign a\\nnew server or client certificate!\\n\\nThe process above will create a self-signed certificate using PEM format and RSA public/private key encryption. The\\ncertificate will be valid for _1825_ days. The location, and purpose of the resultant files is as follows:\\n\\n- `~/myCA/cacert.pem`: CA public **certificate**\\n- `~/myCA/private/cakey.pem`: CA private key\\n\\n##### Creating a Self-Signed Server Certificate\\n\\nNow that we have a Certificate Authority configured, we may use it to sign self-signed certificates. Prior to beginning\\nthe steps below, we may wish to encrypt the certificate\'s private key with a passphrase. The advantages of encrypting\\nthe key with a passphrase include protection of the certificate in the event it is stolen.\\n\\nThe certificate cannot be used with SSL-enabled applications without entering the passphrase every time the SSL-enabled\\napplication is started. This condition, while being most secure, can present a problem: If the server must be started in\\nan unattended manner as in the case of a computer restart, then no one will be available to enter the passphrase, and\\nsubsequently the server will not start. One way to eliminate this condition involves a trade-off in security: The key\\nmay be decrypted, to remove the passphrase necessity; thus SSL-enabled applications will start automatically, without a\\nneed for us to enter a passphrase.\\n\\nTo actually generate a self-signed certificate for use with an SSL application, follow this process:\\n\\nCreate the server configuration file, by editing `~/myCA/exampleserver.cnf` with your favorite text editor. Add this\\nexample content:\\n\\n```conf\\n#\\n# exampleserver.cnf\\n#\\n\\n[ req ]\\nprompt                  = no\\ndistinguished_name      = server_distinguished_name\\nreq_extensions          = v3_req\\n\\n[ server_distinguished_name ]\\ncommonName              = tradeshowhell.com\\nstateOrProvinceName     = NC\\ncountryName             = US\\nemailAddress            = root@tradeshowhell.com\\norganizationName        = My Organization Name\\norganizationalUnitName  = Subunit of My Large Organization\\n\\n[ v3_req ]\\nbasicConstraints        = CA:FALSE\\nkeyUsage                = nonRepudiation, digitalSignature, keyEncipherment\\nsubjectAltName          = @alt_names\\n\\n[ alt_names ]\\nDNS.0                   = tradeshowhell.com\\nDNS.1                   = alt.tradeshowhell.com\\n```\\n\\nBe sure to change the values under `server_distinguished_name` especially the **commonName** value. The commonName value\\nmust match the host name (i.e. AWS EC2 **Public IPv4 DNS**), or CNAME for the host we wish to use the key for. If the\\ncommonName does not match the intended hostname, then host/certificate mismatch errors will appear in the client\\napplications of clients attempting to access the server.\\n\\nOnce we\'ve edited the file appropriately, save it as `~/myCA/exampleserver.cnf`. Generate the server certificate, and\\nkey with the following commands:\\n\\n```bash\\nexport OPENSSL_CONF=~/myCA/exampleserver.cnf\\n```\\n\\nThe previous command sets an environment variable `OPENSSL_CONF` which forces the `openssl` tool to look for a\\nconfiguration file in an alternative location (in this case, `~/myCA/exampleserver.cnf`).\\n\\nNow generate the certificate, and key:\\n\\n```bash\\nopenssl req -newkey rsa:1024 -keyout tempkey.pem -keyform PEM -out tempreq.pem -outform PEM\\n```\\n\\nWe should be prompted for a passphrase, and see output similar to this:\\n\\n```bash\\nGenerating a 1024 bit RSA private key\\n...++++++\\n...............++++++\\nwriting new private key to \'tempkey.pem\'\\nEnter PEM pass phrase:\\nVerifying - Enter PEM pass phrase:\\n-----\\n```\\n\\n**Don\'t forget the passphrase!**\\n\\nNext, we may translate the temporary private key into an unencrypted key by using the following command:\\n\\n```bash\\nopenssl rsa < tempkey.pem > server_key.pem\\n```\\n\\nWe should be prompted for the passphrase used above, and see the following output:\\n\\n```bash\\nEnter pass phrase:\\nwriting RSA key\\n```\\n\\nIf we wish to leave the key encrypted with a passphrase, we will simply rename the temporary key using the following\\ncommand, instead of following the step above:\\n\\n:::info\\n\\nIf we use a server key encrypted with a passphrase, the passphrase will have to be entered each time the server\\napplication using the encrypted key is started. This means the server application will not start unless someone, or\\nsomething enters the key.\\n\\n:::\\n\\n```bash\\nmv tempkey.pem server_key.pem\\n```\\n\\n##### Signing the Self-Signed Server Certificate\\n\\nNow we need to sign the server certificate with the Certificate Authority (CA) key using these commands:\\n\\n```bash\\nexport OPENSSL_CONF=~/myCA/caconfig.cnf\\n```\\n\\nThe previous command modifies the environment variable `OPENSSL_CONF` which forces the `openssl` tool to look for a\\nconfiguration file in an alternative location (in this case, `~/myCA/caconfig.cnf` to switch back to the CA\\nconfiguration).\\n\\nThen sign the certificate as follows:\\n\\n```bash\\nopenssl ca -in tempreq.pem -out server_crt.pem\\n```\\n\\nWe will be prompted for the passphrase of the CA key as created in the\\n[Certificate Authority setup](#establishing-a-certificate-authority) section above. Enter this passphrase at the prompt,\\nand we will then be prompted to confirm the information in the `exampleserver.cnf`, and finally asked to confirm signing\\nthe certificate. Output should be similar to this:\\n\\n```bash\\nUsing configuration from /home/bshumate/myCA/caconfig.cnf\\nEnter pass phrase for /home/bshumate/myCA/private/cakey.pem:\\nCheck that the request matches the signature\\nSignature ok\\nThe Subject\'s Distinguished Name is as follows\\ncommonName            :PRINTABLE:\'tradeshowhell.com\'\\nstateOrProvinceName   :PRINTABLE:\'NC\'\\ncountryName           :PRINTABLE:\'US\'\\nemailAddress          :IA5STRING:\'root@tradeshowhell.com\'\\norganizationName      :PRINTABLE:\'Trade Show Hell\'\\norganizationalUnitName:PRINTABLE:\'Black Ops\'\\nCertificate is to be certified until Jan  4 21:50:08 2011 GMT (1825 days)\\nSign the certificate? [y/n]:y\\n\\n1 out of 1 certificate requests certified, commit? [y/n]y\\nWrite out database with 1 new entries\\nData Base Updated\\n```\\n\\nRemove the temporary certificate, and key files with the following command:\\n\\n```bash\\nrm -f tempkey.pem && rm -f tempreq.pem\\n```\\n\\nHooray! We now have a self-signed server application certificate, and key pair:\\n\\n1. **server_crt.pem**: Server application certificate file\\n2. **server_key.pem**: Server application key file\\n\\nNext, we shall use the certificate for our Jenkins instance.\\n\\n##### Chrome: Bypass \\"Your connection is not private\\" Message\\n\\n- Option 1 - **Simply Proceed**: If Chrome says the security certificate is from the same domain we are attempting to\\n  login to, it is likely there is nothing to worry about when this warning appears. To proceed, simply choose the\\n  \\"**Advanced**\\" link, then choose \\"`Proceed to <link> (unsafe)`\\".\\n\\n  ![Error loading Chrome-Advanced.png](./Chrome-Advanced.png)\\n  ![Error loading Chrome-proceed-unsafe.png](./Chrome-proceed-unsafe.png)\\n\\n- Option 2 - **Prevent Warning**: Click a blank section of the denial page and use our keyboard, type `thisisunsafe`.\\n  This will add the website to a safe list, where we should not be prompted again. _Strange steps, but it surely\\n  works!_\\n\\n#### Applying for a Certificate using Certbot\\n\\n:::note Requirements\\n\\n![Error loading certbot-requirements.png](./certbot-requirements.png)\\n\\n:::\\n\\n##### Install and Setup Certbot\\n\\n1. **SSH into the server** SSH into the server (i.e. EC2 instance) running our Jenkins instance as a user with sudo\\n   privileges.\\n\\n2. **Install snapd** from command line\\n\\n    ```bash\\n    $ sudo apt update\\n    $ sudo apt install snapd\\n    ```\\n\\n   Either log out and back in again, or restart the EC2 instance, to ensure snap\'s paths are updated correctly. To test\\n   our system, install the [hello-world](https://snapcraft.io/hello-world) snap and make sure it runs correctly:\\n\\n    ```bash\\n    $ sudo snap install hello-world\\n    hello-world 6.4 from Canonical\u2713 installed\\n    $ hello-world\\n    Hello World!\\n    ```\\n\\n3. **Ensure that our version of snapd is up to date** Execute the following instructions on the command line on the\\n   machine to ensure that we have the latest version of `snapd`.\\n\\n    ```bash\\n    $ sudo snap install core; sudo snap refresh core\\n    ```\\n\\n4. **Install Certbot** Run this command on the command line on the machine to install Certbot.\\n\\n    ```bash\\n    $ sudo snap install --classic certbot\\n    ```\\n\\n5. **Prepare the Certbot command** Execute the following instruction on the command line on the machine to ensure that\\n   the `certbot` command can be run.\\n\\n    ```bash\\n    $ sudo ln -s /snap/bin/certbot /usr/bin/certbot\\n    ```\\n\\n6. **Install Nginx**\\n\\n    We would choose Nginx instead of Apache server in this case by installing Nginx using\\n\\n    ```bash\\n    $ sudo apt install python3-certbot-nginx\\n    ```\\n\\n   Note that Certbot does not install nginx for us automatically and will through us an error, in the next step, of\\n\\n    ```\\n    Could not find a usable \'nginx\' binary. Ensure nginx exists, the binary is executable, and your PATH is set\\n    correctly\\n    ```\\n\\n7. **Get and Install Certificates** Run this command to get a certificate and have Certbot edit our nginx configuration\\n   automatically to serve it, turning on HTTPS access in a single step.\\n\\n   :::note Prerequisite\\n\\n   1. A DNS domain record, e.g. \\"jenkins.my-domain.com\\", has been setup to use\\n   2. The server running Jenkins can be reached at port 80 publicly\\n\\n   :::\\n\\n   ```bash\\n   sudo certbot --nginx\\n   ```\\n\\n   Enter an email address of ours\\n\\n   ```bash\\n   $ sudo certbot --nginx\\n   Saving debug log to ...\\n   Enter email address (used for urgent renewal and security notices)\\n    (Enter \'c\' to cancel):\\n   ```\\n\\n   Next give content to the Terms of Service and decide whether or not to receive promotion emails from Let\'s Encrypt\\n   and Certbot\\n\\n   ```bash\\n   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\\n   Please read the Terms of Service at\\n   https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf. You must\\n   agree in order to register with the ACME server. Do you agree?\\n   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\\n   (Y)es/(N)o: Y\\n   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\\n   Would you be willing, once your first certificate is successfully issued, to\\n   share your email address with the Electronic Frontier Foundation, a founding\\n   partner of the Let\'s Encrypt project and the non-profit organization that\\n   develops Certbot? We\'d like to send you email about our work encrypting the web,\\n   EFF news, campaigns, and ways to support digital freedom.\\n   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\\n   (Y)es/(N)o: Y\\n    ```\\n\\n   As the last step, provide the domain name sitting in front of our Jenkins instance. Let\'s give it as\\n   \\"jenkins.my-domain.com\\"\\n\\n   ```bash\\n   Account registered.\\n   Please enter the domain name(s) you would like on your certificate (comma and/or\\n   space separated) (Enter \'c\' to cancel): jenkins.my-domain.com\\n   Requesting a certificate for jenkins.my-domain.com\\n   ```\\n\\n   If everything works successfully, we shall see the output similar to the one below\\n\\n   ```bash\\n   Successfully received certificate.\\n   Certificate is saved at: /path/to/server_crt.pem\\n   Key is saved at:         /path/to/server_key.pem\\n   This certificate expires on ****-**-**.\\n   These files will be updated when the certificate renews.\\n   Certbot has set up a scheduled task to automatically renew this certificate in the background.\\n\\n   Deploying certificate\\n   Successfully deployed certificate for jenkins.my-domain.com to /some/path/...\\n   Congratulations! You have successfully enabled HTTPS on <https://jenkins.my-domain.com>\\n\\n   ...\\n   ```\\n\\n   :::tip Troubleshooting\\n\\n   ```bash\\n   Please enter the domain name(s) you would like on your certificate (comma and/or\\n   space separated) (Enter \'c\' to cancel): jenkins.my-domain.com\\n   Requesting a certificate for jenkins.my-domain.com\\n\\n   Certbot failed to authenticate some domains (authenticator: nginx). The Certificate Authority reported these\\n   problems:\\n   Domain: jenkins.my-domain.com\\n   Type:   connection\\n   Detail: ...: Timeout during connect (likely firewall problem)\\n\\n   Hint: The Certificate Authority failed to verify the temporary nginx configuration changes made by Certbot. Ensure\\n   the listed domains point to this nginx server and that it is accessible from the internet.\\n\\n   Some challenges have failed.\\n   Ask for help or search for solutions at https://community.letsencrypt.org. See the logfile\\n   /var/log/letsencrypt/letsencrypt.log or re-run Certbot with -v for more details.\\n   ```\\n\\n   This problem usually happens when we are re-deploying certificate. There are cases when we would like to deploy\\n   Jenkins to a new server or VM and we are setting everything up anew. We then would want to request the same\\n   certificate. _But before we do this our DNS record (i.e. \\"jenkins.my-domain.com\\") is still pointing to the old\\n   Jenkins instance which in most cases has already been unreachable_. The solution then is to delete that DNS record\\n   from our domain config\\n\\n   ```bash\\n   Please enter the domain name(s) you would like on your certificate (comma and/or\\n   space separated) (Enter \'c\' to cancel): jenkins.my-domain.com\\n   Requesting a certificate for jenkins.my-domain.com\\n\\n   Certbot failed to authenticate some domains (authenticator: nginx). The Certificate Authority reported these\\n   problems:\\n   Domain: jenkins.my-domain.com\\n   Type:   dns\\n   Detail: DNS problem: NXDOMAIN looking up A for jenkins.my-domain.com - check that a DNS record exists for this\\n   domain; DNS problem: NXDOMAIN looking up AAAA for jenkins.my-domain.com - check that a DNS record exists for this\\n   domain\\n\\n   Hint: The Certificate Authority failed to verify the temporary nginx configuration changes made by Certbot. Ensure\\n   the listed domains point to this nginx server and that it is accessible from the internet.\\n\\n   Some challenges have failed.\\n   Ask for help or search for solutions at https://community.letsencrypt.org. See the logfile\\n   /var/log/letsencrypt/letsencrypt.log or re-run Certbot with -v for more details.\\n   ```\\n\\n   This error is rather straightforward. After we delete the DNS record, we simply forgot to link the DNS record to\\n   a new server/VM IP\\n   :::\\n\\n   Remember the two paths from the command above: \\"**/path/to/server_crt.pem**\\" and \\"**/path/to/server_key.pem**\\". We\\n   will need them in order to [load certificate onto Jenkins instance](#convert-ssl-keys-to-pkcs12-format) later. In\\n   addition, under \\"/path/to/\\" there is also the CA certificate \\"**/path/to/cert.pem**\\", which we will be using\\n\\n   :::tip **Or**, just get a certificate\\n\\n   If you\'re feeling more conservative and would like to make the changes to the nginx configuration by hand, run this\\n   command instead of the one above:\\n\\n   ```bash\\n   sudo certbot certonly --nginx\\n   ```\\n\\n   :::\\n\\n8. **Test automatic renewal** The Certbot packages on our system come with a cron job or systemd timer that will renew\\n   our certificates automatically before they expire. We will not need to run Certbot again, unless we change our\\n   configuration. We can test automatic renewal for our certificates by running this command:\\n\\n   ```bash\\n   sudo certbot renew --dry-run\\n   ```\\n\\n   :::info\\n\\n   The command to renew certbot is installed in one of the following locations:\\n\\n   - `/etc/crontab/`\\n   - `/etc/cron.*/*`\\n   - `systemctl list-timers`\\n\\n   :::\\n\\n#### Convert SSL keys to PKCS12 format\\n\\nWhen [SSL is ready](#generating-ssl-certificates), let\'s enable secure connection to our Jenkins instance. We would need\\nthe following files:\\n\\n1. `server_crt.pem` - The signed certificate\\n2. `server_key.pem` - The certificate key\\n3. `cacert.pem` - The CA certificate\\n\\n**_In the case of [self-signed certificate](#self-signing-a-certificate)_**, under `~/myCA` directory, execute\\n\\n```bash\\nopenssl pkcs12 -export -out jenkins.p12 \\\\\\n-passout \'pass:your-strong-password\' -inkey server_key.pem \\\\\\n-in server_crt.pem -certfile cacert.pem -name jenkins.some-domain.com\\n```\\n\\n_**In the case of [publicly authorized certificate](#applying-for-a-certificate-using-certbot)**_, run\\n\\n```bash\\nsudo openssl pkcs12 -export \\\\\\n    -out jenkins.p12 \\\\\\n    -passout \'pass:your-strong-password\' \\\\\\n    -inkey /path/to/server_key.pem \\\\\\n    -in /path/to/server_crt.pem \\\\\\n    -certfile /path/to/cert.pem \\\\\\n    -name jenkins.some-domain.com\\n```\\n\\nwhere `your-strong-password` would be a password of our choice; for example, if you choose \\"sdfef3qxA\\" as the password,\\nput `-passout \'pass:sdfef3qxA\'` there. Replace all the occurrences of \\"your-secrete-password\\" seen below with\\n\\"sdfef3qxA\\". In adiition, _Replace \\"jenkins.some-domain.com\\" with our own CNAME_\\n\\nThe command given above converts SSL certs to intermediate PKCS12 format named **jenkins.p12**.\\n\\n#### Convert PKCS12 to JKS format\\n\\nUse the following keytool command to convert the `jenkins.p12` file to JKS format.\\n\\n```bash\\nkeytool -importkeystore -srckeystore jenkins.p12 \\\\\\n-srcstorepass \'your-secret-password\' -srcstoretype PKCS12 \\\\\\n-srcalias jenkins.some-domain.com -deststoretype JKS \\\\\\n-destkeystore jenkins.jks -deststorepass \'your-secret-password\' \\\\\\n-destalias jenkins.some-domain.com\\n```\\n\\nReplace the following with our own values:\\n\\n- `-srcstorepass` - [The password we created above](#convert-ssl-keys-to-pkcs12-format)\\n- `-deststorepass` - A new password we created in this step\\n- `-srcalias` - The \\"jenkins.some-domain.com\\" or our own CNAME we used\\n  [from the previous step](#convert-ssl-keys-to-pkcs12-format)\\n- `-destalias` - A destination CNAME, usually the same as `srcalias`\\n\\nWe should, after the command is executed, see a file named **jenkins.jks** in the current location.\\n\\n#### Add JKS to Jenkins Path\\n\\nThe jenkins.jks file should be saved in a specific location where Jenkins can access it. Let\'s create a folder for it\\nand move the jenkins.jks key to that location.\\n\\n```bash\\nsudo mkdir -p /etc/jenkins\\nsudo cp jenkins.jks /etc/jenkins/\\n```\\n\\nChange the permissions of the keys and folder.\\n\\n```bash\\nsudo chown -R jenkins: /etc/jenkins\\nsudo chmod 700 /etc/jenkins\\nsudo chmod 600 /etc/jenkins/jenkins.jks\\n```\\n\\n> The `jenkins:` used in the first command is a standard Jenkins user that get\'s created when we install\\n> [Jenkins package](#long-term-support-release). We are essentially granting permission for that user here so do not\\n> throw some other \\"smart\\" names there or change, please.\\n\\n#### Modify Jenkins Configuration for SSL\\n\\n```bash\\nsudo systemctl edit jenkins\\n```\\n\\n```conf\\n### Anything between here and the comment below will become the new contents of the file\\n\\n[Service]\\nEnvironment=\\"JENKINS_PORT=-1\\"\\nEnvironment=\\"JENKINS_HTTPS_PORT=443\\"\\nEnvironment=\\"JENKINS_HTTPS_KEYSTORE=/etc/jenkins/jenkins.jks\\"\\nEnvironment=\\"JENKINS_HTTPS_KEYSTORE_PASSWORD=<some strong password>\\"\\nEnvironment=\\"JENKINS_HTTPS_LISTEN_ADDRESS=0.0.0.0\\"\\n\\n### Lines below this comment will be discarded\\n```\\n\\n:::note\\n\\nThe config content above actually gets appended to the end of `systemctl cat jenkins` output, which we can verify to\\nmake sure that the changes here actually propagates to Jenkins runtime.\\n\\nIgnore the comments lines which starts with `### ...`\\n\\n:::\\n\\n#### Restart Jenkins\\n\\nThe restart command on Ubuntu C2 instance is\\n\\n```bash\\nsudo systemctl restart jenkins.service\\n```\\n\\nwhich would probably fail, however, with the error\\n\\n```bash\\n$ sudo systemctl restart jenkins.service\\nJob for jenkins.service failed because the control process exited with error code.\\nSee \\"systemctl status jenkins.service\\" and \\"journalctl -xeu jenkins.service\\" for details.\\n```\\n\\nWhenever Jenkins control failes with `systemctl`, we can use its diagnosing command `journalctl` to further investigate:\\n\\n```bash\\njournalctl -u jenkins.service -r\\n```\\n\\nwhich probably would show us the follwoing error\\n\\n```bash\\nCaused: java.io.IOException: Failed to bind to /0.0.0.0:443\\n        at org.eclipse.jetty.server.ServerConnector.openAcceptChannel(ServerConnector.java:339)\\n        at java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:227)\\n        at java.base/sun.nio.ch.Net.bind(Net.java:448)\\n        at java.base/sun.nio.ch.Net.bind(Net.java:459)\\n        at java.base/sun.nio.ch.Net.bind0(Native Method)\\njava.net.SocketException: Permission denied\\n```\\n\\nThis is because Jetty, which is the Jenkins server, does not have sudo permission to listen on SSL port 443 on startup.\\nWe could verify this by having Jenkins SSL port listen on a non-sudo port such as 8443. To do so, we will run\\n\\n```bash\\nsudo systemctl edit jenkins\\n```\\n\\nagain and change the line from\\n\\n```conf\\nEnvironment=\\"JENKINS_HTTPS_PORT=443\\"\\n```\\n\\nto\\n\\n```conf\\nEnvironment=\\"JENKINS_HTTPS_PORT=8443\\"\\n```\\n\\nWe will see that Jenkins process started:\\n\\n```bash\\n$ ps -aux | grep jenkins\\njenkins    46742 45.1 99.1 3245534 89876543 ?      Ssl  06:12   0:29 /usr/bin/java -Djava.awt.headless=true -jar\\n/usr/share/java/jenkins.war --webroot=/var/cache/jenkins/war --httpPort=-1 --httpsPort=8443 --httpsListenAddress=0.0.0.0\\n--httpsKeyStore=/etc/jenkins/jenkins.jks --httpsKeyStorePassword=**************\\n```\\n\\nWe have 2 options.\\n\\n1. Instruct `sudo systemctl restart jenkins.service` to execute the command above with `sudo`\\n2. Simply add an inbound rule to AWS EC2 security group to have Jenkins HTTPS listen on a port greater than 1024\\n\\nWe would go with the 2nd option in this post. If we want to open the port for HTTPS and it\'s not 443, then in addition\\nto adding HTTPS rule, we could also just add a \\"Custom TCP\\" rule for the desired port (i.e. 8443) and it will work.\\n\\nNow we should be able to access Jenkins over HTTPS with port 8443 at `https://jenkins.some-domain.com:8443`\\n\\n#### HTTPS via Nginx Reverse Proxy\\n\\nProxying is typically used to distribute the load among several servers, seamlessly show content from different\\nwebsites, or pass requests for processing to application servers over protocols other than HTTP.\\n\\n:::info What Is a Reverse Proxy Server?\\n\\nA proxy server is a go\u2011between or intermediary server that forwards requests for content from multiple clients to\\ndifferent servers across the Internet. A **reverse proxy server** is a type of proxy server that typically sits behind\\nthe firewall in a private network and directs client requests to the appropriate backend server. A reverse proxy\\nprovides an additional level of abstraction and control to ensure the smooth flow of network traffic between clients and\\nservers.\\n\\nCommon uses for a reverse proxy server include:\\n\\n- **Load balancing** A reverse proxy server can act as a \\"traffic cop\\" sitting in front of backend servers and\\n  distributing client requests across a group of servers in a manner that maximizes speed and capacity utilization\\n  while ensuring no one server is overloaded, which can degrade performance. If a server goes down, the load balancer\\n  redirects traffic to the remaining online servers.\\n- **Web acceleration** Reverse proxies can compress inbound and outbound data, as well as cache commonly requested\\n  content, both of which speed up the flow of traffic between clients and servers. They can also perform additional\\n  tasks such as SSL encryption to take load off of your web servers, thereby boosting their performance.\\n- **Security & Anonymity** By intercepting requests headed for your backend servers, a reverse proxy server protects\\n  their identities and acts as an additional defense against security attacks. It also ensures that multiple servers can\\n  be accessed from a single record locator or URL regardless of the structure of your local area network.\\n\\n:::\\n\\n![Error loading nginx-directives.png](./nginx-directives.png)\\n\\n##### Understanding the Nginx Configuration File Structure and Configuration Contexts\\n\\nWhile we know Certbot utilizes Nginx\'s capabilities, people are often confused by some of the conventions they find in\\nNginx configuration files. In this section, we will focus first on the basic structure of an Nginx configuration file.\\n\\nThe main Nginx configuration file is located at \\"**/etc/nginx/nginx.conf**\\" in our EC2 Ubuntu instance.\\n\\nOne of the first things that we should notice when looking at the main configuration file is that it appears to be\\norganized in a tree-like structure, defined by sets of brackets (that look like `{` and `}`). In Nginx parlance, the\\nareas that these brackets define are called \u201ccontexts\u201d because they contain configuration details that are separated\\naccording to their area of concern. Basically, these divisions provide an organizational structure along with some\\nconditional logic to decide whether to apply the configurations within.\\n\\nBecause contexts can be layered within one another, Nginx provides a level of directive inheritance. As a general rule,\\nif a directive is valid in multiple nested scopes, a declaration in a broader context will be passed on to any child\\ncontexts as default values. The children contexts can override these values at will. It is worth noting that an override\\nto any array-type directives will replace the previous value, not append to it.\\n\\nDirectives can only be used in the contexts that they were designed for. Nginx will error out on reading a configuration\\nfile with directives that are declared in the wrong context. The\\n[Nginx documentation](http://nginx.org/en/docs/dirindex.html) contains information about which contexts each directive\\nis valid in, so it is a great reference if you are unsure.\\n\\nNext, we\'ll discuss the most common contexts in Nginx.\\n\\n###### The Main Context\\n\\nThe most general context is the \\"main\\" or \\"global\\" context. It is the only context that is not contained within the\\ntypical context blocks that look like this:\\n\\n```config\\n# The main context is here, outside any other contexts\\n\\n. . .\\n\\ncontext {\\n\\n    . . .\\n\\n}\\n```\\n\\nAny directive that exist entirely outside of these blocks is said to inhabit the \\"main\\" context. Keep in mind that if\\nour Nginx configuration is set up in a modular fashion, some files will contain instructions that appear to exist\\noutside of a bracketed context, but which will be included within such a context when the configuration is stitched\\ntogether.\\n\\nThe main context represents the broadest environment for Nginx configuration. It is used to configure details that\\naffect the entire application on a basic level. While the directives in this section affect the lower contexts, many of\\nthese aren\'t inherited because they cannot be overridden in lower levels.\\n\\nSome common details that are configured in the main context are the user and group to run the worker processes as, the\\nnumber of workers, and the file to save the main process\'s PID. We can even define things like worker CPU affinity and\\nthe \\"niceness\\" of worker processes. The default error file for the entire application can be set at this level (this can\\nbe overridden in more specific contexts).\\n\\n###### The Events Context\\n\\nThe \\"events\\" context is contained within the \\"main\\" context. It is used to set global options that affect how Nginx\\n**handles connections** at a general level. There can only be a single events context defined within the Nginx\\nconfiguration.\\n\\nThis context will look like this in the configuration file, outside of any other bracketed contexts:\\n\\n```conf\\n# main context\\n\\nevents {\\n\\n    # events context\\n    . . .\\n\\n}\\n```\\n\\nNginx uses an event-based connection processing model, so the directives defined within this context determine how\\nworker processes should handle connections. Mainly, directives found here are used to either select the connection\\nprocessing technique to use, or to modify the way these methods are implemented.\\n\\nUsually, the connection processing method is automatically selected based on the most efficient choice that the platform\\nhas available. For Linux systems, the _epoll_ method is usually the best choice.\\n\\nOther items that can be configured are the number of connections each worker can handle, whether a worker will only take\\na single connection at a time or take all pending connections after being notified about a pending connection, and\\nwhether workers will take turns responding to events.\\n\\n###### The HTTP Context\\n\\nWhen configuring Nginx as a web server or **reverse proxy**, the \\"http\\" context will hold the majority of the\\nconfiguration. This context will contain all of the directives and other contexts necessary to define how the program\\nwill handle HTTP or **HTTPS** connections.\\n\\nThe http context is a sibling of the events context, so they should be listed side-by-side, rather than nested. They\\nboth are children of the main context:\\n\\n```conf\\n# main context\\n\\nevents {\\n    # events context\\n\\n    . . .\\n\\n}\\n\\nhttp {\\n    # http context\\n\\n    . . .\\n\\n}\\n```\\n\\nWhile lower contexts get more specific about how to handle requests, directives at this level control the defaults for\\nevery virtual server defined within. A large number of directives are configurable at this context and below, depending\\non how we would like the inheritance to function.\\n\\nSome of the directives that we are likely to encounter control the default locations for access and error logs\\n(**access_log** and **error_log**), configure asynchronous I/O for file operations (aio, sendfile, and directio), and\\nconfigure the server\'s statuses when errors occur (error_page). Other directives configure compression (gzip and\\ngzip_disable), fine-tune the TCP keep alive settings (**keepalive_disable**, **keepalive_requests**, and\\n**keepalive_timeout**), and the rules that Nginx will follow to try to optimize packets and system calls (sendfile,\\ntcp_nodelay, and tcp_nopush). Additional directives configure an application-level document root and index files (root\\nand index) and set up the various hash tables that are used to store different types of data (*_hash_bucket_size and\\n*_hash_max_size for server_names, types, and variables).\\n\\n###### The Server Context\\n\\nThe \\"server\\" context is declared within the \\"http\\" context. This is our first example of nested, bracketed contexts. It\\nis also the first context that allows for multiple declarations.\\n\\nThe general format for server context may look something like this. Remember that these reside within the http context:\\n\\n```conf\\n# main context\\n\\nhttp {\\n\\n    # http context\\n\\n    server {\\n\\n        # first server context\\n\\n    }\\n\\n    server {\\n\\n        # second server context\\n\\n    }\\n\\n}\\n```\\n\\nThe reason for allowing multiple declarations of the server context is that **each instance defines a specific virtual\\nserver to handle client requests**. You can have as many server blocks as you need, each of which can handle a specific\\nsubset of connections.\\n\\nDue to the possibility and likelihood of multiple server blocks, this context type is also the first that Nginx must use\\na selection algorithm to make decisions. Each client request will be handled according to the configuration defined in a\\nsingle server context, so Nginx must decide which server context is most appropriate based on details of the request.\\nThe directives which decide if a server block will be used to answer a request are:\\n\\n- **listen**: The _IP:port_ combination that this server block is designed to respond to. If a request is made by a\\n  client that matches these values, this block will potentially be selected to handle the connection.\\n- **server_name**: This directive is the other component used to select a server block for processing. If there are\\n  multiple server blocks with listen directives of the same specificity that can handle the request, Nginx will parse\\n  the \\"Host\\" header of the request and match it against this directive.\\n\\nThe directives in this context can override many of the directives that may be defined in the http context, including\\nlogging, the document root, compression, etc. In addition to the directives that are taken from the http context, we\\nalso can configure files to try to respond to requests (try_files), issue redirects and rewrites (return and rewrite),\\nand set arbitrary variables (set).\\n\\n###### The Location Context\\n\\nThe next context that we will deal with regularly is the location context. Location contexts share many relational\\nqualities with server contexts. For example, multiple location contexts can be defined, each location is used to handle\\na certain type of client request, and each location is selected by virtue of matching the location definition against\\nthe client request through a selection algorithm.\\n\\nWhile the directives that determine whether to select a server block are defined within the server context, the\\ncomponent that decides on a location\'s ability to handle a request is located in the location definition (the line that\\nopens the location block).\\n\\nThe general syntax looks like this:\\n\\n```config\\nlocation match_modifier location_match {\\n\\n    . . .\\n\\n}\\n```\\n\\nLocation blocks live within server contexts and, unlike server blocks, can be nested inside one another. This can be\\nuseful for creating a more general location context to catch a certain subset of traffic, and then further processing it\\nbased on more specific criteria with additional contexts inside:\\n\\n```conf\\n# main context\\n\\nserver {\\n\\n    # server context\\n\\n    location /match/criteria {\\n\\n        # first location context\\n\\n    }\\n\\n    location /other/criteria {\\n\\n        # second location context\\n\\n        location nested_match {\\n\\n            # first nested location\\n\\n        }\\n\\n        location other_nested {\\n\\n            # second nested location\\n\\n        }\\n\\n    }\\n\\n}\\n```\\n\\nWhile server contexts are selected based on the requested IP address/port combination and the host name in the \\"Host\\"\\nheader, location blocks further divide up the request handling within a server block by looking at the request URI. The\\nrequest URI is the portion of the request that comes after the domain name or IP address/port combination.\\n\\nFor example, if a client requests `http://www.example.com/blog` on port 80, the `http`, `www.example.com`, and port 80\\nwould all be used to determine which server block to select. After a server is selected, the \\"/blog\\" portion (the\\nrequest URI), would be evaluated against the defined locations to determine which further context should be used to\\nrespond to the request.\\n\\nMany of the directives you are likely to see in a location context are also available at the parent levels. New\\ndirectives at this level allow you to reach locations outside of the document root (alias), mark the location as only\\ninternally accessible (internal), and proxy to other servers or locations (using http, fastcgi, scgi, and uwsgi\\nproxying).\\n\\n##### How Certbot + Nginx Enable SSL\\n\\nRecall that we have made our Jenkins instance available at `https://jenkins.some-domain.com:8443` with a port number of\\n\\"8443\\". If we would like to get rid of it and simply visit Jenkins at `https://jenkins.some-domain.com`, we will add an\\nredirect to Certbot-managed Nginx config at **/etc/nginx/sites-enabled/default**:\\n\\n```config\\nserver {\\n\\n    location / {\\n        proxy_pass https://localhost:8443;\\n    }\\n\\n    listen [::]:443 ssl ipv6only=on;\\n    listen 443 ssl;\\n    ssl_certificate ...;\\n    ssl_certificate_key ...;\\n}\\n```\\n\\nNote the proxying rule of `proxy_pass https://localhost:8443;`. If, instead, we have some other app that runs on top of\\nHTTP only (with port 8080 for example) while our EC2 host has SSL certificate, we would simply have our EC2 instance\\ntaking care of all the SSL stuff and proxy all HTTPS request to the HTTP app via `proxy_pass http://localhost:8080;`\\n\\n:::note\\n\\nWe may need to restart EC2 instance for the change above to take effect\\n\\n:::\\n\\n### Post-Installation Setup Wizard\\n\\nAfter downloading, installing and running Jenkins on SSL, the post-installation setup wizard begins.\\n\\nThe setup wizard takes us through a few quick \\"one-off\\" steps to unlock Jenkins, customize it with plugins and create\\nthe first administrator user through which we can continue accessing Jenkins.\\n\\n#### Unlocking Jenkins\\n\\nWhen we first access a new Jenkins instance, we are asked to unlock it using an automatically-generated password. Browse\\nto `https://jenkins.my-domain.com:8443` and wait until the Unlock Jenkins page appears.\\n\\n![Error loading unlock-jenkins.png](./unlock-jenkins.png)\\n\\nAs prompted, enter the password found in **/var/lib/jenkins/secrets/initialAdminPassword** on our EC2 instance path. Use\\nthe following command to display this password:\\n\\n```bash\\n[ec2-user ~]$ sudo cat /var/lib/jenkins/secrets/initialAdminPassword\\n```\\n\\nOn the Unlock Jenkins page, paste this password into the **Administrator password** field and click **Continue**.\\n\\n:::note\\n\\nThis password also serves as the default administrator account\'s password (with username \\"admin\\") if we happen to skip\\nthe subsequent user-creation step in the setup wizard (So, DO NOT skip this subsequent step).\\n\\n:::\\n\\n#### Customizing Jenkins with Plugins\\n\\nAfter [unlocking Jenkins](#unlocking-jenkins), the Customize Jenkins page appears. Here we can install any number of\\nuseful plugins as part of our initial setup.\\n\\nClick one of the two options shown:\\n\\n- **Install suggested plugins** - to install the recommended set of plugins, which are based on most common use cases.\\n- **Select plugins to install** - to choose which set of plugins to initially install. When we first access the plugin\\n  selection page, the suggested plugins are selected by default.\\n\\n:::tip\\n\\nIf we are not sure what plugins we need, choose **Install suggested plugins**. We can install (or remove) additional\\nJenkins plugins at a later point in time via the\\n[**Manage Jenkins**](https://www.jenkins.io/doc/book/managing/) >\\n[**Manage Plugins page in Jenkins**](https://www.jenkins.io/doc/book/managing/plugins/).\\n\\n:::\\n\\nThe setup wizard shows the progression of Jenkins being configured and our chosen set of Jenkins plugins being\\ninstalled. This process may take a few minutes.\\n\\n#### Creating the First Administrator User\\n\\n![Error loading create-admin-user.png](./create-admin-user.png)\\n\\nFinally, after [customizing Jenkins with plugins](#customizing-jenkins-with-plugins), Jenkins asks us to create our\\nfirst administrator user.\\n\\n1. When the **Create First Admin User** page appears, specify the details for our administrator user in the respective\\n   fields and click **Save and Finish**.\\n2. When the **Jenkins is ready** page appears, click **Start using Jenkins**.\\n\\n   - This page may indicate **Jenkins is almost ready!** instead and if so, click **Restart**.\\n   - If the page does not automatically refresh after a minute, use our web browser to refresh the page manually.\\n\\n3. If required, log in to Jenkins with the credentials of the user we just created and we are ready to start using\\n   Jenkins!"},{"id":"jenkins-troubleshooting","metadata":{"permalink":"/aergia/blog/jenkins-troubleshooting","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-10-30-jenkins-touble-shooting/index.md","source":"@site/blog/2022-10-30-jenkins-touble-shooting/index.md","title":"Jenkins Troubleshooting","description":"[//]: # (Copyright Jiaqi Liu)","date":"2022-10-30T00:00:00.000Z","formattedDate":"October 30, 2022","tags":[{"label":"Jenkins","permalink":"/aergia/blog/tags/jenkins"}],"readingTime":1.285,"hasTruncateMarker":true,"authors":[{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"jenkins-troubleshooting","title":"Jenkins Troubleshooting","authors":["jiaqi"],"tags":["Jenkins"]},"prevItem":{"title":"Deploying Jenkins to AWS","permalink":"/aergia/blog/jenkins-on-aws"},"nextItem":{"title":"Nexus 3 Repository Manager OSS","permalink":"/aergia/blog/nexus"}},"content":"\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\n### Docker Permission Error When Trigger by Jenkins\\n\\nWhen a job **Build Steps** contains Shell Execution which includes some Docker command, it might fail with\\n\\n```bash\\n+ docker build ...\\nGot permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post \\"...\\":\\ndial unix /var/run/docker.sock: connect: permission denied\\n```\\n\\nThe user \\"jenkins\\" needs to be added to the group docker:\\n\\n```bash\\nsudo usermod -a -G docker jenkins\\n```\\n\\nThen restart Jenkins. (and reboot server if not working)\\n\\n### Echo Off in Jenkins Console Output\\n\\nBy default, Jenkins launches Execute Shell script with `set -x`. This causes all commands to be echoed. We can type\\n`set +x` before any command to temporary override that behavior. Of course you will need `set -x` to start showing them\\nagain.\\n\\nYou can override this behaviour for the whole script by putting the following at the top of the build step:\\n\\n```bash\\n#!/bin/bash +x\\n```"},{"id":"nexus","metadata":{"permalink":"/aergia/blog/nexus","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-09-30-nexus/index.md","source":"@site/blog/2022-09-30-nexus/index.md","title":"Nexus 3 Repository Manager OSS","description":"The proliferation of different repository formats and tools accessing them as well as the emergence of more publicly","date":"2022-09-30T00:00:00.000Z","formattedDate":"September 30, 2022","tags":[{"label":"Nexus","permalink":"/aergia/blog/tags/nexus"}],"readingTime":44.865,"hasTruncateMarker":true,"authors":[{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"nexus","title":"Nexus 3 Repository Manager OSS","authors":["jiaqi"],"tags":["Nexus"]},"prevItem":{"title":"Jenkins Troubleshooting","permalink":"/aergia/blog/jenkins-troubleshooting"},"nextItem":{"title":"Nexus 3 - Setting Up Docker Registry","permalink":"/aergia/blog/nexus"}},"content":"The proliferation of different repository formats and tools accessing them as well as the emergence of more publicly\\navailable repositories has triggered the need to manage access and usage of these repositories and the components they\\ncontain\\n\\nHosting our private repositories for internal components has proven to be a very efficient methodology to exchange\\ncomponents during all phases of the software development lifecycle. It is considered a best practice at this stage.\\n\\nThe task of managing all the repositories a development teams interact with can be supported by the use of a dedicated\\nserver application - a **repository manager**. To put it simply, a repository manager provides two core features:\\n\\n1. **the ability of proxying a remote repository and cache components saving both bandwidth and time required to\\n   retrieve a software component from a remote repository repeatedly**\\n2. **the ability of hosting a repository providing an organization with a deployment target for internal software\\n   components**\\n\\nJust as Source Code Management (SCM) tools are designed to manage source code, repository managers have been designed to\\nmanage and trace external dependencies and components generated by internal build.\\n\\nRepository managers are an essential part of any enterprise or open-source software development effort and they enable\\ngreater collaboration between developers and wider distribution of software by facilitating the exchange and usage of\\nbinary components.\\n\\nWhen we install a repository manager, we are bringing the power of a repository like the Central Repository into our\\norganization. We can use it to proxy the Central Repositories and other repositories, and host our own repositories for\\ninternal and external use.\\n\\nIn addition to the two aforementioned core features, a repository manager can support the following use cases\\n\\n- allows us to manage binary software components through the software development lifecycle\\n- search and catalogue software components\\n- control component releases with rules and add automated notifications\\n- integrate with external security systems, such as LDAP\\n- manage component metadata\\n- control access to components and repositories\\n- display component dependencies\\n- brose component archive contents\\n\\nUsing a repository manager provides a number of benefits, including\\n\\n- improved software build performance due to faster component download off the local repository manager\\n- reduced bandwidth usage due to component caching\\n- higher predictability and scalability due to limited dependency on external repositories\\n- increased understanding of component usage due to centralized storage of all used components\\n- simplified developer configuration due to central access configuration to remote repositories and components on the\\n  repository manager\\n- unified method to provide components to consumer reducing complexity overheads\\n- improved collaboration due to the simplified exchange of binary components\\n\\n\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\nSystem Requirements\\n-------------------\\n\\n### Memory Requirements\\n\\nThe requirements assume there are no other significant memory hungry processes running on the same host.\\n\\n| ****                     | **JVM Heap** | **JVM Direct**                           | **Host Physical/RAM** |\\n|:------------------------:|:------------:|:----------------------------------------:|:---------------------:|\\n| **Minimum ( default ) ** | 2703MB       | 2703MB                                   | 8GB                   |\\n| **Maximum**              | 4GB          | (host physical/RAM * 2/3) - JVM max heap | no limit              |\\n\\n### Disk Space\\n\\n**Application Directory** - The size of this directory varies slightly each release. It currently around 330 MB. It is\\nnormal to have multiple application directories installed on the same host over time as repository manager is upgraded.\\n\\n**Data Directory** - On first start, repository manager creates the base files needed to operate. The bulk of disk space\\nwill be held by our deployed and proxied artifacts, as well as any search indexes. This is highly installation\\nspecific, and will be dependent on the repository formats used, the number of artifacts stored, the size of our teams\\nand projects, etc.  It\'s best to plan for a lot though, formats like Docker and Maven can use very large amounts of\\nstorage (500Gb easily).  **When available disk space drops below 4GB the database will switch to read-only mode**.\\n\\nConcepts\\n--------\\n\\nThe Nexus Repository Manager OSS is all about working with **components** and **repositories**.\\n\\n### Components\\n\\nA component is a resource like a library or a framework that is used as part of a software application at run-time,\\nintegration or unit test execution time or required as part of build process. It could be an entire application or a\\nstatic resource like an image.\\n\\nTypically these components are archives of a large variety of files, such as Java bytecode in class files, text files,\\nor binary files such as images, PDFs, and music files. The archives have numerous formats such as JAR, WAR, ZIP, NPM\\npackages, or .sh\\n\\nComponents can be composed of multiple, nested components themselves. For example, consider a Java web application\\npackaged as a WAR component. It contains a number of JAR components and a number of JavaScript libraries. All of these\\nare standalone components in other contexts and happend to be included as part of the WAR component.\\n\\nComponents provide all the building blocks and features that allow a development team to create powerful applications\\nby assembling them and adding their own business related components to create a full-fledged, powerful application.\\n\\nComponents, in other tool-chains, are called artifacts, packages, bundles, archives, and other terms. The concept and\\nidea, however, remain the same and component is used as the independent, generic term.\\n\\n### Repository\\n\\nA wide variety of components exists and more are continuously created by the open source community as well as\\nproprietary vendors. These are libraries and frameworks written in various languages on different platforms that are\\nused for application development every day. It has become a default pattern to build applications by combining the\\nfeatures of multiple components with our own custom components containing our application code to create an application\\nfor a specific domain\\n\\nIn order to ease the consumption and usage of components, they are aggregated into collection of components. These are\\ncalled **repositories** and are typically available on the internet as a service. On different platforms terms such as\\nregistry and others are used for the same concept.\\n\\nExamples for such repositories are\\n\\n- the Central Repository, also known as Maven Central\\n- the NuGet Gallery\\n- RubyGems.org\\n- npmjs.org\\n\\nComponents in these repositories are accessed by numerous tools including\\n\\n- package managers like npm, nuget or gem\\n- build tools such as Maven, Gradle, rake or grunt\\n- IDE\'s such as Eclipse and IntelliJ\\n\\n### Repository Format\\n\\nThe different repositories use different technologies to store and expose the components in them to client tools. This\\ndefines a repository format and as such is closely related to the tools interacting with the repository.\\n\\nFor example, the Maven repository format relies on a specific directory structure defined by the identifiers of the\\ncomponents and a number of XML formatted files for metadata. Component interaction is performed via plain HTTP commands\\nand some additional custom interaction with the XML files.\\n\\nOther repositories formats use database for storage and REST API interactions, or different directory structures wit\\nformat specific files for the metadata\\n\\nRepository Management\\n---------------------\\n\\nWe\'ve seen that repositories are the containers for the components provided to our users. Creating and managing\\nrepositories is an essential part of our Nexus Repository configuration, since it allows us to expose more components to\\nour users. It supports proxy repositories, hosted repositories and repository groups in a number of different repository\\nformats.\\n\\n:::info\\n\\nTo manage repositories select the **Repositories** item in the Repository sub menu of the **Administration** menu.\\n\\n:::\\n\\nThe binary parts of a repository are stored in **blob stores**, which can be configured by selecting Blob Stores from\\nthe Repository sub menu of the Administration menu.\\n\\n### Repository Types\\n\\n#### Proxy Repository\\n\\n**A repository with the type proxy, also known as a proxy repository, is a repository that is linked to a remote\\nrepository**. Any request for a component is verified against the local content of the proxy repository. If no local\\ncomponent is found, the request is forwarded to the remote repository. The component is then retrieved and stored\\nlocally in the repository manager, which acts as a cache. Subsequent requests for the same component are then fulfilled\\nfrom the local storage, therefore eliminating the network bandwidth and time overhead of retrieving the component from\\nthe remote repository again.\\n\\nBy default, the repository manager ships with the following configured proxy repositories:\\n\\n- **maven-central** This proxy repository accesses the Central Repository, formerly known as Maven Central. It is the\\n  default component repository built into Apache Maven\\n- **nuget.org-proxy** This proxy repository accesses the [NuGet Gallery](https://www.nuget.org/). It is the default\\n  component repository used by the `nuget` package management tool used for .Net development.\\n\\n#### Hosted Repository\\n\\nA repository with the type hosted, also known as a **hosted repository**, is a repository that stores components in the\\nrepository manager as the authoritative location for these components.\\n\\nBy default, the repository manager ships with the following configured hosted repositories:\\n\\n- **maven-releases** This hosted repository uses the maven2 repository format with a release version policy. It is\\n  intended to be the repository where an organization publishes internal releases. We can also use this repository for\\n  third-party components that are not available in external repositories and can therefore not be retrieved via a\\n  configured proxy repository. Examples of these components could be commercial, proprietary libraries such as an Oracle\\n  JDBC driver that may be referenced by the organization.\\n- **maven-snapshots** This hosted repository uses the maven2 repository format with a snapshot version policy. It is\\n  intended to be the repository where the organization publishes internal development versions, also known as snapshots.\\n- **nuget-hosted**  This hosted repository is where the organization can publish internal releases in repository using\\n  the nuget repository format. We can also use this repository for third-party components that are not available in\\n  external repositories, that could potentially be proxied to gain access to the components.\\n\\n#### Repository Group\\n\\nA repository with the type group, also known as **repository group**, represents a powerful feature of Nexus Repository\\nManager. They allow us to combine multiple repositories and other repository groups in a single repository. This in turn\\nmeans that our users can rely on a single URL for their configuration needs, while the administrators can add more\\nrepositories and therefore components to the repository group.\\n\\n:::caution\\n\\nWhen a user is given a privilege to a group repository, then that user will also have that privilege to all transitive\\nmembers of that group repository **only when their request is directed to the group repository**. Direct requests to\\nindividual member repositories will only work if the user is given explicit permission to the individual repository.\\n\\n:::\\n\\nThe repository manager ships with the following groups:\\n\\n- **maven-public** The maven-public group is a repository group of maven2 formatted repositories and combines the\\n  important **external proxy repository for the Central Repository** with the hosted repositories **maven-releases** and\\n  maven-snapshots. This allows us to _expose the components of the Central Repository as well as our internal\\n  components in one single, simple-to-use repository_ and therefore URL.\\n- **nuget-group** This group combines the nuget formatted repositories nuget-hosted and nuget.org-proxy into a single\\n  repository for .Net development with NuGet.\\n\\n### Managing Repositories and Repository Groups\\n\\nTBA\\n\\n#### Setting Up Maven Repositories\\n\\nHistorically Nexus Repository Manager started as a repository manager supporting the Maven repository format and it\\ncontinues to include excellent support for users of Apache Maven.\\n\\n### Maven Repository Format Overview\\n\\n> Looking at the Maven repository format and associated concepts and ideas allows us to grasp some of the details and\\n> intricacies involved with different tools and repository formats, that will help us appreciate the need for repository\\n> management.\\n\\nMaven developers are familiar with the concept of a repository, since repositories are used by default. The primary type\\nof a binary component in a Maven format repository is a JAR file containing Java byte-code. This is due to the Java\\nbackground of Maven and the fact that the default component type is a JAR. Practically however, there is no limit to\\nwhat type of component can be stored in a Maven repository. For example, we can easily deploy WAR or EAR files, source\\narchives, Flash libraries and applications, Android archives or applications or Ruby libraries to a Maven repository.\\n\\nEvery software component is described by an XML document called a Project Object Model (POM). This POM contains\\ninformation that describes a project and lists a project\u2019s dependencies - the binary software components, which a given\\ncomponent depends upon for successful compilation or execution.\\n\\nWhen Maven downloads a component like a dependency or a plugin from a repository, it also downloads that component\'s\\nPOM. _Given a component\'s POM, Maven can then download any other components that are required by that component_.\\n\\nMaven, which interacts with a Maven repository to search for binary software components, model the projects they manage\\nand retrieve software components on-demand from a repository.\\n\\n#### The Central Repository\\n\\nWhen we download and install Maven without any customization, it retrieves components from the Central Repository. It\\nserves millions of Maven users every single day. It is the default, built-in repository using the Maven repository\\nformat and is _managed by Sonatype_. We can also view statistics about the size of the Central Repository\\n[online](https://search.maven.org/stats).\\n\\nThe Central Repository is the largest repository for Java-based components. It can be easily used from other build tools\\nas well. One can look at the Central Repository as an example of how Maven repositories operate and how they are\\nassembled. Here are some of the properties of release repositories such as the Central Repository:\\n\\n- **Component Metadata** All software components added to the Central Repository require proper metadata, including a\\n  Project Object Model (POM) for each component that describes the component itself and any dependencies that software\\n  component might have.\\n- **Release Stability** Once published to the Central Repository, a component and the metadata describing that component\\n  never change. This property of a release repository, like the Central Repository,  guarantees that projects that\\n  depend on releases will be repeatable and stable over time. While new software components are being published every\\n  day, once a component is assigned a release number on the Central Repository, there is a strict policy against\\n  modifying the contents of a software component after a release.\\n- **Component Security** The Central Repository contains cryptographic hashes and PGP signatures that can be used to\\n  verify the authenticity and integrity of software components served and supports connections in a secure manner via\\n  **HTTPS**.\\n- **Performance** The Central Repository is exposed to the users globally via a high performance content delivery\\n  network of servers.\\n\\nIn addition to the Central Repository, there are a number of major organizations, such as Red Hat, Oracle or the Apache\\nSoftware foundation, which maintain separate additional repositories. Best practice to facilitate these available\\nrepositories with Nexus Repository Manager OSS is to proxy and cache the contents on our own network.\\n\\n#### Component Coordinates and the Repository Format\\n\\nComponent coordinates create a unique identifier for a component. Maven coordinates use the following values: groupId,\\nartifactId, version, and packaging. This set of coordinates is often referred to as a **GAV coordinate**, which is short\\nfor Group, Artifact, Version coordinate. The GAV coordinate standard is the foundation for Maven\'s ability to manage\\ndependencies. Four elements of this coordinate system are described below:\\n\\n- **groupId** A group identifier groups a set of components into a logical group. Groups are often designed to reflect\\n  the **organization** under which a particular software component is being produced. For example, software components\\n  produced by the Maven project at the Apache Software Foundation are available under the groupId \\"org.apache.maven\\"\\n- **artifactId** An artifactId is an identifier for a software component and should be a descriptive name. The\\n  combination of groupId and artifactId must be unique for a specific project.\\n- **version** The version of a project ideally follows the established convention of\\n  [**semantic versioning**](http://semver.org/). For example, if our simple-library component has a major release\\n  version of 1, a minor release version of 2 and point release version of 3, the version would be 1.2.3. Versions can\\n  also have **alphanumeric qualifiers** which are often used to denote release status. An example of such a qualifier\\n  would be a version like \\"1.2.3-BETA\\" where BETA signals a stage of testing meaningful to consumers of a software\\n  component.\\n- **packaging** Maven was initially created to handle JAR files, but a Maven repository is completely agnostic about the\\n  type of component it is managing. Packaging can be anything that describes any binary software format including: zip,\\n  nar, war, ear, sar and aar.\\n\\nTools designed to interact Maven repositories translate component coordinates into a URL which corresponds to a location\\nin a Maven repository. If a tool such as Maven is looking for version \\"1.2.0\\" of the \\"commons-lang\\" JAR in the group\\n\\"org.apache.commons\\", this request is translated into:\\n\\n```bash\\n<repoURL>/org/apache/commons/commons-lang/1.2.0/commons-lang-1.2.0.jar\\n```\\n\\nMaven also downloads the corresponding POM for \\"commons-lang 1.2.0\\" from:\\n\\n```bash\\n<repoURL>/org/apache/commons/commons-lang/1.2.0/commons-lang-1.2.0.pom\\n```\\n\\nThis POM may contain references to other components, which are then retrieved from the same repository using the same\\nURL patterns.\\n\\n#### Release and Snapshot Repositories\\n\\nA Maven repository stores two types of components:\\n\\n1. **Release repositories** are for stable, static release components. A release component is a component which was\\n   created by a specific, versioned release. For example, consider the \\"1.2.0\\" release of the \\"commons-lang\\" library\\n   stored in the Central Repository. This release component, \\"commons-lang-1.2.0.jar\\", and the associated POM,\\n   \\"commons-lang-1.2.0.pom\\", are static objects which will never change in the Central Repository. Released components\\n   are considered to be solid, stable and perpetual in order to guarantee that builds which depend upon them are\\n   repeatable over time. The released JAR component is associated with a PGP signature, an MD5, and a SHA check-sum\\n   which can be used to verify both the authenticity and integrity of the binary software component.\\n2. **Snapshot repositories** are frequently updated repositories that store binary software components from projects\\n   under constant development. Snapshot components are components generated during the development of a software\\n   project. A Snapshot component has both a version number such as \\"1.3.0\\" or \\"1.3\\" and a timestamp in its name. For\\n   example, a snapshot component for \\"commons-lang 1.3.0\\" might have the name\\n   \\"commons-lang-1.3.0.-20090314.182342-1.jar\\". The associated POM, MD5 and SHA hashes would also have a similar name.\\n   To facilitate collaboration during the development of software components, Maven and other clients that know how to\\n   consume snapshot components from a repository also know how to interrogate the metadata associated with a Snapshot\\n   component to retrieve the latest version of a Snapshot dependency from a repository.\\n\\n**While it is possible to create a repository which serves both release and snapshot components, repositories are\\nusually segmented into release or snapshot repositories serving different consumers and maintaining different standards\\nand procedures for deploying components**. Much like the difference between networks, a release repository is considered\\nlike a production network and a snapshot repository is more like a development or a testing network. While there is a\\nhigher level of procedure and ceremony associated with deploying to a release repository, snapshot components can be\\ndeployed and changed frequently without regard for stability and repeatability concerns.\\n\\n:::info\\n\\nA project under active development produces snapshot components that change over time. A release is comprised of\\ncomponents which will remain unchanged over time.\\n\\n:::\\n\\n### Version policy\\n\\nEvery repository has one of the 3 **version policies** configured:\\n\\n- **Release** A Maven repository can be configured to be suitable for release components with the Release version\\n  policy. The Central Repository uses a release version policy.\\n- **Snapshot** Continuous development is typically performed with snapshot versions supported by the Snapshot version\\n  policy. These version values have to **end with -SNAPSHOT in the POM file**. This allows repeated uploads where the\\n  actual number used is composed of a date/timestamp and an enumerator and the retrieval can still use the -SNAPSHOT\\n  version string. The repository manager and client tools manage the metadata files that manage this translation from\\n  the snapshot version to the timestamp value.\\n- **Mixed** The Mixed version policy allows us to support both approaches within one repository.\\n\\n### Hosting Maven Repositories\\n\\nA hosted Maven repository can be used to deploy our own as well as third-party components. A default installation of\\nNexus Repository Manager includes two hosted Maven repositories. The **maven-releases** repository uses a release\\nversion policy and the **maven-snapshots** repository uses a snapshot version policy.\\n\\n#### Deploying to Hosted Maven repository\\n\\nDeployment to a repository is configured in 2 steps\\n\\n1. [Have Maven project point to the repository](#configuring-repository-in-maven-project)\\n2. [Authenticate push access to the repository](#obtaining-push-access-to-repository)\\n\\n##### Configuring Repository in Maven Project\\n\\nDeployment to a repository is configured in the  `pom.xml` for the respective project in the \\"distributionManagement\\"\\nsection:\\n\\n```xml\\n<project>\\n   ...\\n\\n    <distributionManagement>\\n        <repository>\\n            <id>nexus</id>\\n            <name>Releases</name>\\n            <url>https://nexus-host/repository/maven-releases</url>\\n        </repository>\\n        <snapshotRepository> \x3c!-- This repository can be omitted --\x3e\\n            <id>nexus</id>\\n            <name>Snapshot</name>\\n            <url>https://nexus-host/repository/maven-snapshots</url>\\n        </snapshotRepository>\\n    </distributionManagement>\\n\\n   ...\\n```\\n\\n:::tip\\n\\n- Replace the `nexus-host` with the NDS address pointing to the actual Nexus instance and\\n  `maven-releases`/`maven-snapshots` to the actual repository name. For example,\\n\\n  ```xml\\n  <distributionManagement>\\n      <repository>\\n          <id>nexus</id>\\n          <name>Releases</name>\\n          <url>https://nexus.paion-data.dev/repository/maven-oss</url>\\n      </repository>\\n  </distributionManagement>\\n  ```\\n\\n- The \\"Snapshot\\" repository (tagged `snapshotRepository` above) can be omitted in the most CI/CD-enabled project team\\n\\n:::\\n\\n##### Obtaining Push Access to Repository\\n\\nThe credentials used for the deployment are configured in the \\"server\\" section of the `settings.xml` file. In the\\nexample below server contains \\"nexus\\" as the id, along with a \\"headless user\'s\\" username and password. They are the\\ncredentials needed to authenticate against the repository:\\n\\n```xml\\n<settings>\\n...\\n\\n    <servers>\\n        <server>\\n            <id>nexus</id>\\n            <username>some-headless-username</username>\\n            <password>some-headless-password</password>\\n        </server>\\n    </servers>\\n\\n...\\n```\\n\\nNext, we need to grant the user above (i.e. \\"some-headless-username\\") the push access on the repository side in the\\nfollowing steps:\\n\\n1. Create a [content selector](#content-selectors)\\n2. Create a [privilege](#privileges)\\n3. Create a [role](#roles)\\n4. Assign role to [the headless user](#users) defined above\\n\\nA full build of project, including downloading the declared dependencies and uploading the build output to the\\nrepository manager, can now be invoked with `mvn clean deploy`.\\n\\n##### Deploying to Hosted Maven Repository via CI/CD (e.g. GitHub Actions)\\n\\nNote that we deployed in the last minute our artifact to repository through a manual `mvn clean deploy` command. To\\nenable automatic deployment to the repository, we will simply go through\\n[the exact same procedure](#deploying-to-hosted-maven-repository-manually) except that instead of running\\n`mvn clean deploy` locally and manually, we let CI/CD execute that for us.\\n\\n###### Up-version Automatically\\n\\nIt should be noted that a standard release repository does not allow an artifacts with a defined version to be pushed\\ninto it twice. For example, if our artifacts is my-artifact-1.1.2.jar, this JAR, with version 1.1.2, will fail to be\\npublished onto the repository the 2nd time unless we delete the version 1.1.2 up there.\\n\\nTherefore, we need to bump the artifact version each time we release. We achieve this using GitHub\'s tagging system. The\\ntwo scripts below, taken from [Yahoo/fili\'s CI/CD](https://github.com/yahoo/fili/tree/master/screwdriver), creates a new\\ntag based on previous release tag:\\n\\n1. **tag-for-release.bash**\\n\\n   ```bash\\n   #!/bin/bash\\n\\n   # Pick up the tags from the adjusted remote\\n   git fetch --unshallow\\n   git fetch --tags\\n\\n   echo $(git branch -v)\\n\\n   # Get the last tag on this branch\\n   LAST_TAG=$(git describe)\\n   echo \\"INFO Last tag: $LAST_TAG\\"\\n\\n   # Build the new tag to push\\n   NEW_TAG=$(LAST_TAG=${LAST_TAG} python .github/upversion.py)\\n   echo \\"INFO Creating tag: $NEW_TAG\\"\\n   git tag $NEW_TAG -a -m \\"Autogenerated version bump tag\\"\\n\\n   # Push the new tag\\n   echo \\"INFO Pushing tag: $NEW_TAG\\"\\n   git push origin $NEW_TAG\\n   ```\\n\\n2. **upversion.py**\\n\\n   ```python\\n   #!/usr/bin/python\\n\\n   import os\\n\\n   split_tag = (os.environ[\'LAST_TAG\'].split(\'-\')[0]).split(\\".\\")\\n   split_tag[-1] = str(int(split_tag[-1]) + 1)\\n   print(\\".\\".join(split_tag))\\n   ```\\n\\n_We put these two files under **.github** directory_.\\n\\n###### Deploying to [GitHub Packages](https://github.com/features/packages)\\n\\nCreate a **release.yml** file under _.github/workflows_ directory with the following content:\\n\\n```yaml\\n---\\nname: Release\\n\\non:\\n  push:\\n    branches:\\n      - master\\n\\njobs:\\n  test:\\n    uses: ./.github/workflows/test.yml\\n    secrets: inherit\\n\\n  publish:\\n    needs: [test]\\n    runs-on: ubuntu-latest\\n    permissions:\\n      contents: write # allow for pushing tag\\n      packages: write\\n    steps:\\n      - uses: actions/checkout@v3\\n      - uses: actions/setup-java@v3\\n        with:\\n          java-version: \'11\'\\n          distribution: \'adopt\'\\n      - name: Tag for release\\n        run: |\\n          git config --global user.name \'QubitPi\'\\n          git config --global user.email \'jack20191124@proton.me\'\\n          .github/tag-for-release.bash\\n      - name: Set release version\\n        run: |\\n          VERSION=$(git describe)\\n          mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false\\n          mvn versions:update-property -Dproperty=version.owner -DnewVersion=$VERSION -DgenerateBackupPoms=false\\n      - name: Publish Package to Paion Nexus Repository\\n        run: mvn --batch-mode deploy\\n        env:\\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\\n      - name: Deploy documentation to GitHub Pages\\n        uses: peaceiris/actions-gh-pages@v3\\n        with:\\n          github_token: ${{ secrets.GITHUB_TOKEN }}\\n          publish_dir: ./docs\\n          enable_jekyll: true\\n          user_name: QubitPi\\n          user_email: jack20191124@proton.me\\n```\\n\\n:::info\\n\\nThe `test` job defined above is a [workflow call][reusing GitHub workflow] that delegates all testing to a separate\\nGitHub Action. An example of such workflow could be:\\n\\n```yaml\\n---\\nname: Test\\n\\non:\\n  workflow_call:\\n  pull_request:\\n    types: [opened, synchronize, reopened]\\n\\njobs:\\n  test:\\n    name: Test\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@v2\\n        with:\\n          fetch-depth: 0\\n      - name: Set up JDK 11 for Build\\n        uses: actions/setup-java@v1\\n        with:\\n          java-version: 11\\n      - name: Build\\n        run: mvn -B clean verify\\n```\\n\\n:::\\n\\n:::info\\n\\nThe \\"Set release version\\" step above was inspired by\\n[yahoo/fili\'s approach](https://github.com/yahoo/fili/blob/master/screwdriver/scripts/publish.sh)\\n\\n:::\\n\\n###### Deploying to Nexus 3\\n\\nOr we can deploy to any hosted repository such as Nexus 3 with a slightly modified release definition:\\n\\n:::tip\\n\\nNote that this file differs from the [GitHub version](#deploying-to-github-packageshttpsgithubcomfeaturespackages) by\\nreplacing the `GITHUB_TOKEN` with the dedicated credentials put in a dynamically generated settints.xml file using\\nthe [whelk-io/maven-settings-xml-action](https://github.com/whelk-io/maven-settings-xml-action) action. These\\ncredentials are sealed securely in [GitHub Secrets][GitHub Secrets]. We need to define the following 3 secrets:\\n\\n1. **MAVEN_DEPLOY_SERVER_ID**\\n2. **MAVEN_DEPLOY_SERVER_USERNAME**\\n3. **MAVEN_DEPLOY_SERVER_PASSWD**\\n\\n:::\\n\\n```yaml\\n---\\nname: Release\\n\\non:\\n  push:\\n    branches:\\n      - master\\n\\njobs:\\n  test:\\n    uses: ./.github/workflows/test.yml\\n    secrets: inherit\\n\\n  publish:\\n    needs: [test]\\n    runs-on: ubuntu-latest\\n    permissions:\\n      contents: write # allow for pushing tag\\n      packages: write\\n    steps:\\n      - uses: actions/checkout@v3\\n      - uses: actions/setup-java@v3\\n        with:\\n          java-version: \'11\'\\n          distribution: \'adopt\'\\n      - name: Tag for release\\n        run: |\\n          git config --global user.name \'QubitPi\'\\n          git config --global user.email \'jack20191124@proton.me\'\\n          .github/tag-for-release.bash\\n      - name: Set release version\\n        run: |\\n          VERSION=$(git describe)\\n          mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false\\n          mvn versions:update-property -Dproperty=version.owner -DnewVersion=$VERSION -DgenerateBackupPoms=false\\n      - name: Generate settings.xml in order to grant push access to Paion Nexus Repository\\n        uses: whelk-io/maven-settings-xml-action@v20\\n        with:\\n          servers: >\\n            [\\n              {\\n                \\"id\\": \\"${{ secrets.MAVEN_DEPLOY_SERVER_ID }}\\",\\n                \\"username\\": \\"${{ secrets.MAVEN_DEPLOY_SERVER_USERNAME }}\\",\\n                \\"password\\": \\"${{ secrets.MAVEN_DEPLOY_SERVER_PASSWD }}\\"\\n              }\\n            ]\\n      - name: Publish Package to Paion Nexus Repository\\n        run: mvn --batch-mode deploy\\n      - name: Deploy documentation to GitHub Pages\\n        uses: peaceiris/actions-gh-pages@v3\\n        with:\\n          github_token: ${{ secrets.GITHUB_TOKEN }}\\n          publish_dir: ./docs\\n          enable_jekyll: true\\n          user_name: QubitPi\\n          user_email: jack20191124@proton.me\\n```\\n\\n:::tip\\n\\nWe can later pull our released artifact from the hosted repository by placing the **repository** section. For example:\\n\\n```xml\\n<project>\\n\\n    ...\\n\\n    <repositories>\\n        <repository>\\n            <id>paion</id>\\n            <name>Paion Data Official Release Repository</name>\\n            <url>https://nexus.paion-data.dev/repository/maven-oss</url>\\n        </repository>\\n    </repositories>\\n</project>\\n```\\n\\n:::\\n\\n#### Using Repository Manager with Apache Maven\\n\\nTo use repository manager with [Apache Maven](http://maven.apache.org/), configure Maven to check the repository manager\\ninstead of the default, built-in connection to the Central Repository.\\n\\nTo do this, we add a mirror configuration and override the default configuration for the central repository in our\\n\\"~/.m2/settings.xml\\", shown below:\\n\\n:::tip\\n\\nReplace the \\"nexus-host\\" with the NDS address pointing to the actual Nexus instance.\\n\\n:::\\n\\n```xml\\n<settings>\\n  <mirrors>\\n    <mirror>\\n      \x3c!--This sends everything else to /public --\x3e\\n      <id>nexus</id>\\n      <mirrorOf>*</mirrorOf>\\n      <url>https://nexus-host/repository/maven-public/</url>\\n    </mirror>\\n  </mirrors>\\n\\n  <profiles>\\n    <profile>\\n      <id>nexus</id>\\n      \x3c!--Enable snapshots for the built in central repo to direct --\x3e\\n      \x3c!--all requests to nexus via the mirror --\x3e\\n      <repositories>\\n        <repository>\\n          <id>central</id>\\n          <url>http://central</url>\\n          <releases><enabled>true</enabled></releases>\\n          <snapshots><enabled>true</enabled></snapshots>\\n        </repository>\\n      </repositories>\\n     <pluginRepositories>\\n        <pluginRepository>\\n          <id>central</id>\\n          <url>http://central</url>\\n          <releases><enabled>true</enabled></releases>\\n          <snapshots><enabled>true</enabled></snapshots>\\n        </pluginRepository>\\n      </pluginRepositories>\\n    </profile>\\n  </profiles>\\n\\n  <activeProfiles>\\n    \x3c!--make the profile active all the time --\x3e\\n    <activeProfile>nexus</activeProfile>\\n  </activeProfiles>\\n</settings>\\n```\\n\\nIn the configuration above, a single profile called **nexus** is defined. It configures a repository and a\\npluginRepository with the id **central** that overrides the same repositories in the Super POM. The _Super POM_ is\\ninternal to every Apache Maven install and establishes default values. These overrides are important since they change\\nthe repositories by enabling snapshots and replacing the URL with a bogus URL. This URL is overridden by the **mirror**\\nsetting in the same settings.xml file to point to the URL of our single repository group. This repository group can,\\ntherefore, contain release as well as snapshot components and Maven will pick them up.\\n\\nIn addition, The **mirrorOf** pattern of `*` causes any repository request to be redirected to this mirror and to our\\nsingle repository group, which in the example is the public group.\\n\\n:::tip\\n\\nIt is possible to use other patterns in the \\"mirrorOf\\" field. A possible valuable setting is to use **external:***.\\nThis matches all repositories except those using \\"localhost\\" or file based repositories. This is used in conjunction\\nwith a repository manager when you want to exclude redirecting repositories that are defined for integration testing.\\nThe integration test runs for Apache Maven itself require this setting.\\n\\nMore documentation about mirror settings can be found in the\\n[mini guide on the Maven web site](http://maven.apache.org/guides/mini/guide-mirror-settings.html).\\n\\n:::\\n\\n:::note\\n\\nFor startup who doesn\'t really need to proxy the entire Maven Central at the moment, another approach is to set up\\nmultiple repositories. In each project they are working on, they will still fetch everything from Maven Central except\\nfor their hosted component from Nexus\\n\\nThere are two different ways that we can specify the use of multiple repositories. The first way is to specify in a POM\\nwhich repositories we want to use. That is supported both inside and outside of build profiles:\\n\\n```xml\\n<project>\\n    ...\\n\\n    <repositories>\\n        <repository>\\n            <id>my-repo1</id>\\n            <name>your custom repo</name>\\n            <url>http://jarsm2.dyndns.dk</url>\\n        </repository>\\n        <repository>\\n            <id>my-repo2</id>\\n            <name>your custom repo</name>\\n            <url>http://jarsm2.dyndns.dk</url>\\n        </repository>\\n    </repositories>\\n\\n    ...\\n</project>\\n```\\n\\nThe other way we can specify multiple repositories is by creating a profile in the `${user.home}/.m2/settings.xml` or\\n`${maven.home}/conf/settings.xml` file like the following:\\n\\n```xml\\n<settings>\\n    ...\\n    <profiles>\\n        ...\\n        <profile>\\n            <id>myprofile</id>\\n            <repositories>\\n                <repository>\\n                    <id>my-repo2</id>\\n                    <name>your custom repo</name>\\n                    <url>http://jarsm2.dyndns.dk</url>\\n                </repository>\\n            </repositories>\\n        </profile>\\n        ...\\n    </profiles>\\n\\n     <activeProfiles>\\n         <activeProfile>myprofile</activeProfile>\\n     </activeProfiles>\\n     ...\\n</settings>\\n```\\n\\nIf we specify repositories in profiles we must remember to activate that particular profile. As we can see above we do\\nthis by registering a profile to be active in the `activeProfiles` element.\\n\\nWe could also activate this profile on the command like by executing the following command:\\n\\n```bash\\nmvn -Pmyprofile ...\\n```\\n\\nIn fact the `-P` option will take a CSV list of profiles to activate if we wish to activate multiple profiles\\nsimultaneously.\\n\\nThe settings descriptor documentation can be found on the\\n[Maven Local Settings Model Website](https://maven.apache.org/maven-settings/settings.html).\\n\\n:::\\n\\nRemote repository URLs are queried in the following order for artifacts until one returns a valid result:\\n\\n1. Global settings.xml\\n2. User settings.xml\\n3. Local pom.xml\\n4. Parent POMs, recursively\\n5. Super POM\\n6. effective POMs from dependency path to the artifact.\\n\\nFor each of these locations, the repositories within the profiles are queried first in the order outlined at\\n[Introduction to build profiles](https://maven.apache.org/guides/introduction/introduction-to-profiles.html).\\n\\nBefore downloading from a repository,\\n[mirrors configuration](https://maven.apache.org/guides/mini/guide-mirror-settings.html) is applied.\\n\\nEffective settings and local build POM, with profile taken into account, can easily be reviewed to see their\\nrepositories order with `mvn help:effective-settings` and mvn `help:effective-pom -Dverbose`.\\n\\n### Setting Up Docker Registry\\n\\nDocker containers and their usage have revolutionized the way applications and the underlying operating system are\\npackaged and deployed to development, testing and production systems. The creation of the\\n[Open Container Initiative](https://opencontainers.org/), and the involvement of a large number of stakeholders,\\nguarantees that the ecosystem of tools around the lightweight containers and their usage will continue to flourish.\\n[Docker Hub](https://hub.docker.com/) is the original registry for Docker container images and it is being joined by\\nmore and more other publicly available registries such as the\\n[Google Container Registry](https://cloud.google.com/container-registry/) and others.\\n\\nNexus Repository Manager OSS support Docker registries as the Docker repository format for **hosted** and **proxy**\\nrepositories. We can expose these repositories to the client-side tools directly or as a\\n[repository group](#repository-group), which is a repository that merges and exposes the contents of multiple\\nrepositories in one convenient URL. This allows us to reduce time and bandwidth usage for accessing Docker images in a\\nregistry as well as share our images within our organization in a hosted repository. Users can then launch containers\\nbased on those images, resulting in a completely private Docker registry with all the features available in the\\nrepository manager.\\n\\n#### Docker Port Scalability\\n\\nThe Docker client has strict requirements about how it can retrieve content from a repository (i.e., a registry). These\\nrequirements mainly center around the path at which it expects everything to be hosted.\\n\\nWhile it is possible to tell the Docker client to use a chosen host from which to retrieve (or to which to upload)\\nimages, it is not possible to tell it to use an arbitrary base path where images are stored in a registry.\\n\\nTo further explain, the Docker client is given a registry to contact by specifying only the hostname + port. It\'s also\\ngiven a specific path to an image in that registry. So, for example, it would be given\\n`example:443/some/custom/image` to specify an image. We are not able to specify a registry application path.\\n\\nNexus Repository exposes its Docker registries with a repository path of `/repository/<repo_name>/` and, by default, and\\napplication context path of `/`.\\n\\nSo, a full Docker image in the repository \\"docker-hosted\\" might be accessible at full URL\\n\\"example:443/nexus3/repository/docker-hosted/some/custom/image\\", which can be broken down as follows:\\n\\n- **example.com** = host name\\n- **443** = port\\n- /nexus3 = application context path\\n- /repository/docker-hosted = base registry path\\n- **/some/custom/image** = specific image path in the registry\\n\\nThere is no way to give the Docker client the application context path or base registry path. Docker needs the registry\\nexposed at the root of the host + port that it is accessing.\\n\\nThis is important because Nexus Repository uses request paths to separate content between different repositories. There\\nare a few potential ways to overcome this Docker limitation:\\n\\n### Access Control\\n\\nNexus Repository uses **role-based access contro**l (**RBAC**) to give administrators fine-grained control over user\\nrights to the following:\\n\\n- Access to the Nexus Repository web application\\n- Read access to a component path in a repository\\n- Administator access to configuration\\n- Publish or upload files to a repository\\n\\nThe default configuration ships with the administrator role and optional anonymous access to browse and read all\\nrepositories. **We should not use the default anonymous role if we need to create protected repositories**.\\n\\n### Realms\\n\\n:::info What Is a Realm?\\n\\nA realm is a security policy domain defined for a web or application server. The protected resources on a server can be\\npartitioned into a set of protection spaces, **each with its own authentication scheme** and/or authorization database\\ncontaining a collection of users and groups.\\n:::\\n\\nThe realms can be accessed via the **Realms** menu item located under **Security**, in the Administration main menu.\\n\\n![Error loading nexus3-realms.png](./nexus3-realms.png)\\n\\nEffectively, the configuration shown above determines what authentication realm is used to grant a user access and the\\norder the realms are used.\\n\\n- **Local Authenticating Realm and Local Authorizing Realm** These are the built-in realms used by default. They allow\\n  the repository manager to manage security setup without additional external systems. Sonatype recommends keeping the\\n  Local realms at the top of the active list.  In the event of system recovery, if we have them lower in the order (or\\n  removed), restoration may be more difficult.\\n\\n### Privileges\\n\\nPrivileges define actions which can be performed against specific functionality. Privileges can only be assigned to\\nroles.\\n\\nTo access Privileges go to **Security** in the Administration menu, where it\'s listed as a sub-section. An extensive\\nlist of privileges is already built in the repository manager and is partially shown in the figure below\\n\\n![Error loading nexus3-privileges-partial-list.png](./nexus3-privileges-partial-list.png)\\n\\nThis feature allows us to inspect existing privileges and create custom privileges as required. Users will need\\n_nx-privilege_ or _nx-all_ privileges to access this page.\\n\\n#### Privilege Names\\n\\nNames are unique identifiers. Privileges included by default are prefixed with **nx-** . Privileges that are migrated\\nfrom Nexus Repository 2 will be named as they were in Repository 2. Privileges that we create ourselves can only consist\\nof letters, digits, underscores(`_`), hyphens(`-`), and dots(`.`). A privilege name cannot start with an underscore or\\ndot.\\n\\nFor custom privileges, it is encouraged that we use a **simple convention** to namespace our privileges. For example\\nusing a simple acronym representing our organization name. \\"Example Organization Inc.\\" could prefix its privilege names\\nwith **eoi-** for example.\\n\\n#### Privilege Types\\n\\nThe privilege list displays an icon for the privilege Type as the first column in the list:\\n\\n:::info Privilege Permissions\\n\\nPrivilege permissions are represented by a colon separated list of text segments, where each segment can be one of:\\n\\n- a single text value\\n- a comma separated list of text values\\n- an asterisk character * to represent all values in that segment\\n\\nThe internal segment matching algorithm uses\\n[Apache Shiro wildcard permissions](https://shiro.apache.org/permissions.html).\\n\\n:::\\n\\n- application (nexus:{name}:{actions})\\n\\n  * Applicable Actions: create, read, update, delete\\n  * Description: Application type privileges are most commonly the built-in privileges that control access to specific\\n    product feature areas in the Administration **UI**. For example, \\"nexus:blobstores:create,read\\" means allowing for\\n    creating and reading blobstores\\n\\n- repository-admin (nexus:repository-admin:{format}:{repository}:{actions})\\n\\n  * Applicable Actions: browse,read,edit,add,delete\\n  * Description: Repository Admin privileges control administration of **configuration** for specific repositories or\\n    repository formats. For example, \\"nexus:repository-admin:nuget:nuget.org-proxy:browse,read\\" means allowing viewing\\n    of the repository configuration for the nuget format repository named \\"nuget.org-proxy\\". **These privileges do not\\n    control access to repository content.**\\n\\n- repository-content-selector (nexus:repository-content-selector:{selector}:{format}:{repository}:{actions})\\n\\n  * Applicable Actions: browse,read,edit,add,delete\\n  * Description: Repository Content Selector privileges provide fine-grained control over access to content within a\\n    repository by way of a content selector. For example, \\"nexus:repository-content-selector:*:maven2:*:read\\" means\\n    allowing a user for read access to any content matching a content selector defined for the maven2 format.\\n\\n- repository-view (nexus:repository-view:{format}:{repository}:{actions})\\n\\n  * Applicable Actions: browse,read,edit,add,delete\\n  * Description: Repository View privileges control general access to all content contained within specific repositories\\n    or repository formats. For example, \\"nexus:repository-view:maven2:central:browse,read\\" means allow browsing and\\n    viewing content within the maven2 format repository named central. **These privileges do not allow changing\\n    configuration of a repository.**\\n\\n- script (nexus:script:{script name}:{actions})\\n\\n  * Applicable Actions: browse,read,edit,add,delete,run\\n  * Description: Script privileges control access to using the Groovy Script related REST APIs as documented in\\n    [REST and Integration API](https://help.sonatype.com/repomanager3/integrations/rest-and-integration-api) . These\\n    privileges do not control general REST API access. For example, \\"nexus:script:*:read\\" means allowing for read access\\n    to all scripts of any name. \\"nexus:script:my-uploaded-script:run\\" means allowing the calling user for running\\n    (executing) the script named my-uploaded-script\\n\\n- wildcard (`*`)\\n\\n  * Applicable Actions: *\\n  * Description: Wildcard privileges allow one to build a privilege string using a free-form series of segments. All\\n    other privilege types are more specific segment forms of a wildcard privilege. There is only one wildcard privilege\\n    included by default named **nx-all** with permission **nexus:***  that gives access to all functionality.\\n\\n:::info Privilege Actions\\n\\nActions are functions allowing an explicit behavior the privilege can perform with the associated function.\\n\\nThe Actions to choose from are\\n\\n- **add** allows privileges to add repositories or scripts.\\n- **read** allows privileges to view various configuration lists and scripts. Without **read**, any associated action\\n  will permit a privilege to see these lists but not its contents. The **read** action also allows privileges to utilize\\n  tools that can look at content from the command line.\\n- **browse**  allows privileges to view the contents of associated repositories. Unlike **read**, privilege types with\\n  browse can only view and administrate repository _contents_ from _UI_.\\n- **create** allows privileges to create applicable configurations within the repository manager. Since a **read**\\n  permission is required to view a configuration, this action is associated with most existing create privileges.\\n- **delete** allows privileges to delete repository manager configurations, repository contents, and scripts. A\\n  **read** action is generally associated with delete actions, so the actor can view these configurations to remove\\n  them.\\n- **edit** allows privileges to modify associated scripts, repository content, and repository administration.\\n- **update** allows privileges to update repository manager configurations. Most existing privileges with update\\n  include **read** actions. Therefore, if creating custom privileges with update, the actor should consider adding read\\n  to the privilege in order to view repository manager configuration updates.\\n- **`*`**, the wildcard, gives us the ability to group all actions together.\\n\\nWe must assign a single or combination of comma-delimited actions when creating new privileges. The privilege type to\\nwhich we apply any of these Actions will perform the action\'s implied behavior. Consider how each action behaves when\\napplied to a privilege type\\n\\n:::\\n\\n#### Creating a Privilege\\n\\nClick the **Create privilege** button to view a list of privilege types\\n\\n![Error loading nexnus3-privileges-types.png](./nexnus3-privileges-types.png)\\n\\nAfter selecting a type, fill in the required fields and save the privilege. The privilege can be found listed among the\\ndefault privileges on the main **Privileges** screen. We can use the **Filter** input box to find a specific\\nprivilege. In the following example, an _Application_ privilege type is created:\\n\\n![Error loading nexus3-privileges-application.png](./nexus3-privileges-application.png)\\n\\nThe form provides Name, Description, Domain, and Actions in figure above. The form is completed for a privilege that\\nallows read access to the LDAP administration. If assigned this privilege, a user is able to view LDAP administration\\nconfiguration but not edit it, create a new LDAP configuration, nor delete any existing LDAP configurations.\\n\\nIn another example, a _Repository View_ privilege type is created:\\n\\n![Error loading nexus3-privileges-repository-view.png](./nexus3-privileges-repository-view.png)\\n\\nThe form provides Name, Description, Format, Repository, and Actions in figure above. The form is completed for a\\nprivilege granting sufficient access to publish images to a specific hosted repository. A user with this privilege can\\nview and read the contents of the repository as well as publish new images to it, but not delete images.\\n\\n### Content Selectors\\n\\nContent selectors provide a means for us to select specific content from all of our content. The content we select is\\nevaluated against expressions written in **CSEL** (**Content Selector Expression Language**). CSEL is a light version of\\n**JEXL** used to script queries along specific paths and coordinates available to our repository manager formats.\\n\\nContent selectors allow us to define what content users are allowed to access. We can define, in a simplified example, a\\nselector named \\"Apache Maven\\" with a search expression of `path =~ \\"^/org/apache/maven/\\"`. This would match all\\ncomponents that start with the designated component path. Another, yet more complete, example would be to \\"select all\\nmaven2 content along a path that starts with `org.apache.commons`\\":\\n`format == \\"maven2\\" and path =~ \\"^/org/apache/commons/.*\\"`\\n\\n#### Creating a Query\\n\\nBefore we identify user permissions for our selector, create the query first. Click **Content Selectors** located in\\n**Repository**, from the **Administration** menu. Click **Create Selector** to open a new form.\\n\\n![Error loading nexus3-content-selector-example.png](./nexus3-content-selector-example.png)\\n\\n:::tip\\n\\nWe can preview our selector and what results it will return by clicking the **Preview** results button located somewhere\\nin the middle section of the page. Select a repository or grouping of repositories from the **Preview Repository**\\ndropdown and click the **Preview** button. Assets that match will be returned in the space below the filter and can be\\nfiltered upon if we wish to check on a specific result.\\n\\n:::\\n\\nOnce we are satisfied with our fields, click **Save** to create the content selector. All saved selector queries we\\ncreate will be listed in the **Content Selectors** screen.\\n\\n#### Finer Access Control with \\"Content Selector privilege\\"\\n\\nAs part of our security setup, we can create user permissions to manage the filters we built in the _Create Selector_\\nform. We can add a new privilege that controls operations of read, edit, delete or * (all) for components matching that\\nselector. The privilege can even span multiple repositories.\\n\\nTo create a new **content selector privilege**, click **Privileges** in the **Security** section of the\\n**Administration** panel. Then click the **Create privilege** button. Locate and click **Repository Content Selector**\\nfrom the list of options in **Select Privilege Type**. We will see a form that displays the following:\\n\\n- Name: Create a name for the content selector privilege.\\n- Description: Add a brief description for the privilege.\\n- Content Selector: Use this dropdown to select from a list of selectors we created.\\n- Repository: Use this dropdown to select from either a range of all repository contents, all repository contents of an\\n  individual format, or repositories created by us.\\n- Actions: Grant read, edit, delete, or * (all) privileges for user access control.\\n\\nTo complete the form, save the new privilege by clicking **Create privilege**. We can use our new privilege to regulate\\nwhat permissible data we want the user to access. We could group all related privileges into a [role](#roles).\\nUltimately, we could assign our roles to a [user](#users).\\n\\n#### Content Selector Query Reference\\n\\nBelow are the allowable attributes for content selectors that define path and format as values supported by Nexus\\nRepository Manager.\\n\\n| **Attribute** | **Allowed Values**                           |\\n|---------------|----------------------------------------------|\\n| format        | The format of the content for which we query |\\n| path          | The path of our repository content           |\\n\\nValid Operators are\\n\\n| Operator   | Definition                                |                          Example                           |\\n|:----------:|:-----------------------------------------:|:----------------------------------------------------------:|\\n| `==`       | Matches text _exactly_                    |                    `format == \\"maven2\\"`                    |\\n| `=~`       | Matches a Java regular expression pattern |            `path =~ \\"^/org/apache/commons/.*\\"`             |\\n| `=^`       | Starts with text.                         |                 `path =^ \\"/com/example/\\"`                  |\\n| `and`      | Match all expressions                     | `format == \\"maven2\\" and path =~ \\"^/org/apache/commons/.*\\"` |\\n| `or`       | Match any expression                      |          `format == \\"maven2\\" or format == \\"npm\\"`           |\\n| `( expr )` | Group multiple expressions.               |                         [^example]                         |\\n\\n[^example]: `format == \\"npm\\" or (format == \\"maven2\\" and path =~ \\"^/org/apache/commons/.*\\")`\\n\\n:::info Version Range Regular Expressions\\n\\nTo avoid encountering database errors, we should escape dashes in version range regular expressions. For example,\\n`path =~ \\"[0-9a-zA-Z\\\\-_]\\"`\\n\\n:::\\n\\n:::caution\\n\\nWhen writing a content selector, remember that the asset\'s path will always begin with a leading slash when the selector\\nis evaluated. This is true even though the leading slash is not displayed when searching or browsing assets.\\n\\n:::\\n\\n### Roles\\n\\nRoles aggregate [privileges](#privileges) into a related context and can, in turn, be grouped to create more complex\\nroles.\\n\\nThe repository manager ships with a predefined _admin_ as well as an _anonymous role_. These can be inspected in the\\n**Roles** feature view accessible via the **Roles** item in the **Security** section of the **Administration** main\\nmenu. A simple example is shown in figure below. The list displays the _Name_ and _Description_ of the role as well as\\nthe **Source**, which displays whether the role is internal (Nexus) or a mapping to an external source like LDAP. In\\norder to access these functions, a user must have _nx-roles_ or _nx-all_ [privileges](#privileges).\\n\\n![Error loading nexus3-roles-list.png](./nexus3-roles-list.png)\\n\\nTo create a new role, click on the **Create Role** button, select **Nexus role** and fill out the Role creation feature\\nview:\\n\\n:::info\\n\\nTo use functions of creating, editing and deleting roles, a user without the _nx-all_ privilege also will need\\n_nx-privilege-read_. This is because the roles page lists privileges on it.\\n\\n:::\\n\\n![Error loading nexus3-roles-create.png](./nexus3-roles-create.png)\\n\\nWhen creating a new role, we will need to supply a **Role ID** and a **Role Name** and optionally a **Description**.\\nRoles are comprised of other roles and individual privileges. To assign a role or privilege to a role, drag and drop the\\ndesired privileges from the _Available_ list to the _Given_ list under the _Privileges_ header. We can use the\\n**Filter** input to narrow down the list of displayed privileges and the arrow buttons to add or remove privileges.\\n\\nThe same functionality is available under the _Roles_ header to select among the _Available_ roles and add them to the\\nlist of _Contained_ roles.\\n\\nFinally press the **Save** button to get the role created.\\n\\nAn existing role can be inspected and edited by clicking on the row in the list. This role-specific view allows us to\\ndelete the role with the **Delete** button. The built-in roles are managed by the repository manager and _cannot_ be\\nedited or deleted.\\n\\n#### Mapping External Groups to Nexus Roles\\n\\nIn addition to creating an internal role, the **Create Role** button allows us to create an **External Role Mapping** to\\nan external authorization system configured in the repository manager such as LDAP. This is something we would do, if we\\nwant to grant every member of an externally managed group (such as an LDAP group) a number of privileges and roles in\\nthe repository manager\\n\\nFor example, assume that we have a group in LDAP named \\"scm\\" and we want to make sure that everyone in that group has\\nadministrative privileges.\\n\\nSelect **External Role Mapping** and **LDAP** to see a list of roles managed by that external realm in a dialog. Pick\\nthe desired scm group and confirm by pressing **Create** mapping.\\n\\n:::tip\\n\\nFor faster access or if we cannot see our group name, we can also type in a portion or the whole name of the group and\\nit will limit the dropdown to the selected text.\\n\\n:::\\n\\nOnce the external role has been selected, creates a linked role. We can then assign other roles and privileges to this\\nnew externally mapped role like we would do for any other role.\\n\\nAny user that is part of the scm group in LDAP, receives all the privileges defined in the created role allowing us to\\nadapt our generic role in LDAP to the repository manager-specific use cases we want these users to be allowed to\\nperform.\\n\\n### Users\\n\\nThe repository manager ships with two users by default: _admin_ and _anonymous_. The _admin_ user has all privileges and\\nthe _anonymous_ user has read-only privileges. The initial password for the admin user can be found in an\\n\\"admin.password\\" file found in the `$data-dir` directory after starting the server.\\n\\nThe Users feature view displayed in figure below can be accessed via the **Users** item in the **Security** section of\\nthe **Administration** menu. Users must have _nx-users_ or _nx-all_ [privileges](#privileges) to see this page. On page\\nload, the security Source of \\"Local\\" is selected and represents the local NXRM realm. The filtered list shows the users\'\\nUser ID, First Name, Last Name, Email and Status from the security Source selected in the dropdown.\\n\\n![Error loading nexus3-users-list.png](./nexus3-users-list.png)\\n\\nClicking on a user in the list or clicking on the **Create local user** button displays the details view to edit or\\ncreate the account shown in figure below. For external users, such as LDAP or Crowd, once we have our external realm\\nsetup we can edit their permissions here as well. Simply select the realm the user is on from the **Source** dropdown.\\nThen type the user ID into the field to the right of that dropdown and search for it. Then click on the result desired\\nto edit, same as a local user.\\n\\n:::info\\n\\nTo use functions of creating, editing and deleting users, a user without the _nx-all_ privilege also will need\\n_nx-roles-read_. This is because the users page lists roles on it.\\n\\n:::\\n\\n![Error loading nexus3-users-create.png](./nexus3-users-create.png)\\n\\nThe **ID** can be defined upon initial creation and remains fixed thereafter. In addition we can specify the users\\n**First Name**, **Last Name** and **Email address**.  We also must enter and confirm a **Password**.\\n\\nThe Status allows us to set an account to be _Disabled_ or _Active_. The [_Roles_](#roles) control allows us to add and\\nremove defined roles to the user and therefore control the privileges assigned to the user. A user can be assigned one\\nor more roles that in turn can include references to other roles or to individual privileges.\\n\\nOn edit, we can select **Change Password** item in the drop down. The password can be changed in a dialog, provided the\\nuser is managed by the built-in security realm.\\n\\n### Default Role\\n\\nThe Default Role is a role that is automatically granted to all authenticated users.\\n\\nTo enable appending a default role to all authenticated users, navigate to the **Capabilities** item in the **System**\\nsection of the **Administration** menu; then hit **Create capability** and choose capability type **Default Role** as\\npictured below; we will then be able to select the role that we want applied to users.\\n\\n![Error loading nexus3-default-role.png](./nexus3-default-role.png)\\n\\nOnce this is saved, the _Default Role Realm_ will be added to the active list of security realms and start applying the\\nnew role to all authenticated users.\\n\\n:::caution\\n\\nThis default role is appended to authenticated users dynamically, and will **NOT** show up as assigned to any user via\\nthe User administration page.\\n\\n:::\\n\\nTroubleshooting\\n---------------\\n\\n### \\"413 Request Entity Too Large\\"\\n\\nIf deploying, for example, a Maven JAR or Docker image to some Nexus repository results in \\"413 Request Entity Too\\nLarge\\" error, that\'s due to, in the case of Nginx as reverse proxy in front of the Nexus, our server block having a\\ndefault value for **client_max_body_size** of around 1MB in size when unset.\\n\\nTo resolve this, we will need to add the following line to our server block (`/etc/nginx/nginx.conf`):\\n\\n![Error loading nexus-413-solution.png](./nexus-413-solution.png)\\n\\nFor more information, such as where \\"client_max_body_size\\" directive should be placed, please refer to\\n[Nginx documentation](http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size)\\n\\n### \\"400 Repository does not allow updating assets\\"\\n\\nThe version already exists on a release repository. We will need to either bump component version or let Nexus admin\\nto delete the root folder of that component.\\n\\n### \\"A database error occurred\\"\\n\\nWhen we perform some disk I/O related task on UI and we see the following on the top right corner of the page:\\n\\n![Error loading nexus3-strange-error.png](./nexus3-strange-error.png)\\n\\nThe error itself does not indicate any information about the nature of the error. We will then need to know more details\\nabout the error by going down to the Nexus server log.\\n\\n:::note\\n\\nIn case Nexus is running as a Docker container, we need to jump into the container first by executing\\n\\n```bash\\ndocker exec -it <nexus-container-name> bash\\n```\\n\\nwhere `nexus-container-name` can be seen using `docker ps -a`\\n\\n:::\\n\\nThe log file we will be looking at, in the case of running inside Docker container, is located at\\n`/nexus-data/log/nexus.log`\\n\\n[GitHub Secrets]: https://docs.github.com/en/actions/security-guides/encrypted-secrets\\n\\n[reusing GitHub workflow]: https://docs.github.com/en/actions/using-workflows/reusing-workflows#creating-a-reusable-workflow"},{"id":"nexus","metadata":{"permalink":"/aergia/blog/nexus","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-09-29-nexus-docker-registry/index.md","source":"@site/blog/2022-09-29-nexus-docker-registry/index.md","title":"Nexus 3 - Setting Up Docker Registry","description":"Docker containers and their usage have revolutionized the way applications and the underlying operating system are","date":"2022-09-29T00:00:00.000Z","formattedDate":"September 29, 2022","tags":[{"label":"Nexus","permalink":"/aergia/blog/tags/nexus"},{"label":"Docker","permalink":"/aergia/blog/tags/docker"}],"readingTime":3.47,"hasTruncateMarker":true,"authors":[{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"nexus","title":"Nexus 3 - Setting Up Docker Registry","authors":["jiaqi"],"tags":["Nexus","Docker"]},"prevItem":{"title":"Nexus 3 Repository Manager OSS","permalink":"/aergia/blog/nexus"},"nextItem":{"title":"Continuous Delivery","permalink":"/aergia/blog/continuous-delivery"}},"content":"Docker containers and their usage have revolutionized the way applications and the underlying operating system are\\npackaged and deployed to development, testing and production systems. The creation of the\\n[Open Container Initiative](https://opencontainers.org/), and the involvement of a large number of stakeholders,\\nguarantees that the ecosystem of tools around the lightweight containers and their usage will continue to flourish.\\n[Docker Hub](https://hub.docker.com/) is the original registry for Docker container images and it is being joined by\\nmore and more other publicly available registries such as the\\n[Google Container Registry](https://cloud.google.com/container-registry/) and others.\\n\\nNexus Repository Manager OSS support Docker registries as the Docker repository format for **hosted** and **proxy**\\nrepositories. We can expose these repositories to the client-side tools directly or as a\\n[repository group](#repository-group), which is a repository that merges and exposes the contents of multiple\\nrepositories in one convenient URL. This allows us to reduce time and bandwidth usage for accessing Docker images in a\\nregistry as well as share our images within our organization in a hosted repository. Users can then launch containers\\nbased on those images, resulting in a completely private Docker registry with all the features available in the\\nrepository manager.\\n\\n\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\nDocker Port Scalability\\n-----------------------\\n\\nThe Docker client has strict requirements about how it can retrieve content from a repository (i.e., a registry). These\\nrequirements mainly center around the path at which it expects everything to be hosted.\\n\\nWhile it is possible to tell the Docker client to use a chosen host from which to retrieve (or to which to upload)\\nimages, it is not possible to tell it to use an arbitrary base path where images are stored in a registry.\\n\\nTo further explain, the Docker client is given a registry to contact by specifying only the hostname + port. It\'s also\\ngiven a specific path to an image in that registry. So, for example, it would be given\\n`example:443/some/custom/image` to specify an image. We are not able to specify a registry application path.\\n\\nNexus Repository exposes its Docker registries with a repository path of `/repository/<repo_name>/` and, by default, and\\napplication context path of `/`.\\n\\nSo, a full Docker image in the repository \\"docker-hosted\\" might be accessible at full URL\\n\\"example:443/nexus3/repository/docker-hosted/some/custom/image\\", which can be broken down as follows:\\n\\n- **example.com** = host name\\n- **443** = port\\n- /nexus3 = application context path\\n- /repository/docker-hosted = base registry path\\n- **/some/custom/image** = specific image path in the registry\\n\\nThere is no way to give the Docker client the application context path or base registry path. Docker needs the registry\\nexposed at the root of the host + port that it is accessing.\\n\\nThis is important because Nexus Repository uses request paths to separate content between different repositories. There\\nare a few potential ways to overcome this Docker limitation:\\n\\n1. Using a [reverse proxy](https://en.wikipedia.org/wiki/Reverse_proxy)\\n2. Using [port connectors](#ssl-and-repository-connector-configuration)\\n\\nSSL and Repository Connector Configuration\\n------------------------------------------\\n\\nDocker relies on secure connections using SSL to connect to the repositories. We are therefore required to expose the\\nrepository manager to our client tools via HTTPS. This can be configured via an external proxy server, which can also be\\nused to [scale your repositories](#scaling-repositories), or directly with the repository manager.\\n\\nThe recommended minimal configuration requires one port for a Docker repository group used for read access to all\\nrepositories and one port for each hosted Docker repository that will receive push events from your users. The\\nRepository Connectors configuration, displayed in Figure: \u201cRepository Connector Configuration\\", is available in the\\nconfiguration for proxy and hosted Docker repositories as well as Docker repository groups.\\n\\nScaling Repositories\\n--------------------"},{"id":"continuous-delivery","metadata":{"permalink":"/aergia/blog/continuous-delivery","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-08-31-continuous-delivery/index.md","source":"@site/blog/2022-08-31-continuous-delivery/index.md","title":"Continuous Delivery","description":"Continuous delivery is an approach where teams release quality products frequently and predictably from source code","date":"2022-08-31T00:00:00.000Z","formattedDate":"August 31, 2022","tags":[{"label":"Continuous Delivery","permalink":"/aergia/blog/tags/continuous-delivery"}],"readingTime":26.405,"hasTruncateMarker":true,"authors":[{"name":"continuousdelivery.com","title":"Origin","url":"https://continuousdelivery.com/","imageURL":"https://continuousdelivery.com/images/cd-book.png","key":"continuousdelivery.com"},{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"continuous-delivery","title":"Continuous Delivery","authors":["continuousdelivery.com","jiaqi"],"tags":["Continuous Delivery"]},"prevItem":{"title":"Nexus 3 - Setting Up Docker Registry","permalink":"/aergia/blog/nexus"},"nextItem":{"title":"What Is Immutable Infrastructure","permalink":"/aergia/blog/immutable-infrastructure"}},"content":"Continuous delivery is an approach where teams release quality products frequently and predictably from source code\\nrepository to production in an automated fashion.\\n\\n\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\nWhat is Continuous Delivery\\n---------------------------\\n\\nContinuous Delivery is the ability to get changes of all types - including new features, configuration changes, bug\\nfixes and experiments - into production, or into the hands of users, _safely_ and _quickly_ in a _sustainable_ way.\\n\\nThe goal of continuous delivery is to make deployments - whether of a large-scale distributed system, a complex\\nproduction environment, an embedded system, or an app - predictable, routine affairs that can be performed on demand.\\n\\nWe achieve all this by ensuring our code is always in a deployable state, even in the face of teams of thousands of\\ndevelopers making changes on a daily basis. We thus completely eliminate the integration, testing and hardening phases\\nthat traditionally followed \\"dev complete\\", as well as code freezes.\\n\\n### Why Continuous Delivery\\n\\nIt is often assumed that if we want to deploy software more frequently, we must accept lower levels of stability and\\nreliability in our systems. In fact, peer-reviewed research shows that this is not the case. High performance teams\\nconsistently deliver services faster and more reliably than their low performing competition. This is true even in\\nhighly regulated domains such as [financial services](https://www.youtube.com/watch?v=eMS97X5ZTGc) and\\n[government](https://www.youtube.com/watch?v=QwHVlJtqhaI). This capability provides an incredible competitive advantage\\nfor organizations that are willing to invest the effort to pursue it.\\n\\n:::info\\n\\n- Firms with high-performing IT organizations were twice as likely to exceed their profitability, market share and\\n  productivity goals.\\n- High performers achieved higher levels of both throughput and stability.\\n- The use of continuous delivery practices including version control, continuous integration, and test automation\\n  predicts higher IT performance.\\n- Culture is measurable and predicts job satisfaction and organizational performance.\\n- Continuous Delivery measurably reduces both deployment pain and team burnout.\\n\\n:::\\n\\nThe practices at the heart of continuous delivery help us achieve several important benefits:\\n\\n- **Low risk releases**. The primary goal of continuous delivery is to make software deployments painless, low-risk\\n  events that can be performed at any time, on demand. By applying [patterns](#patterns) such as **blue-green\\n  deployments** it is relatively straightforward to achieve zero-downtime deployments that are undetectable to users.\\n\\n  :::info blue-green deployment\\n\\n  ![Error loading blue-green-deployments.png ](./blue-green-deployments.png)\\n\\n  One of the challenges with automating deployment is the cut-over itself, taking software from the final stage of\\n  testing to live production. We usually need to do this quickly in order to minimize downtime. The blue-green\\n  deployment approach does this by ensuring we have **two production environments**, as identical as possible. At any\\n  time one of them, let\'s say blue for the example, is live. As we prepare a new release of our software we do our\\n  final stage of testing in the green environment. Once the software is working in the green environment, we switch the\\n  router so that all incoming requests go to the green environment - the blue one is now idle.\\n\\n  Blue-green deployment also gives us a rapid way to rollback - if anything goes wrong we switch the router back to\\n  our blue environment. There\'s still the issue of dealing with missed transactions while the green environment was\\n  live, but depending on our design we may be able to feed transactions to both environments in such a way as to keep\\n  the blue environment as a backup when the green is live. Or we may be able to put the application in read-only mode\\n  before cut-over, run it for a while in read-only mode, and then switch it to read-write mode. That may be enough to\\n  flush out many outstanding issues.\\n\\n  The two environments need to be different but as identical as possible. In some situations they can be different\\n  pieces of hardware, or they can be different virtual machines running on the same (or different) hardware. They can\\n  also be a single operating environment partitioned into separate zones with separate IP addresses for the two slices.\\n\\n  Once we\'ve put our green environment live and we\'re happy with its stability, we then use the blue environment as\\n  our **staging environment** for the final testing step for our next deployment. When we are ready for our next\\n  release, we switch from green to blue in the same way that we did from blue to green earlier. That way both green and\\n  blue environments are regularly cycling between live, previous version (for rollback) and staging the next version.\\n\\n  An advantage of this approach is that it\'s the same basic mechanism as we need to get a hot-standby working. Hence\\n  this allows us to test our disaster-recovery procedure on every release.\\n\\n  The fundamental idea is to have two easily switchable environments to switch between, there are plenty of ways to vary\\n  the details. One project did the switch by bouncing the web server rather than working on the router. Another\\n  variation would be to use the same database, making the blue-green switches for web and domain layers.\\n\\n  Databases can often be a challenge with this technique, particularly when we need to change the schema to support a\\n  new version of the software. The trick is to **separate the deployment of schema changes from application upgrades**.\\n  So first apply a database refactoring to change the schema to support both the new and old version of the application,\\n  deploy that, check everything is working fine so we have a rollback point, then deploy the new version of the\\n  application. (And when the upgrade has bedded down remove the database support for the old version.)\\n  :::\\n\\n- **Faster time to market**. It\'s common for the integration and test/fix phase of the traditional phased software\\n  delivery lifecycle to consume weeks to even months. When teams work together to automate the build and deployment,\\n  environment provisioning, and regression testing process, developers can incorporate integration and regression\\n  testing into their daily work and completely remove these phases. We also avoid the large amount of re-work that\\n  plague the phased approach.\\n- **Higher quality and Better products**. When developers have automated tools that discover regressions within minutes,\\n  teams are freed to **focus their effort on user research and higher level testing activities** such as exploratory\\n  testing, usability testing, and performance and security testing. By building a deployment pipeline, these activities\\n  can be performed continuously throughout the delivery process, ensuring quality is built into products and services\\n  from the beginning. Continuous delivery makes it economic to work in small batches. This means we can get feedback\\n  from users throughout the delivery lifecycle based on working software.\\n- **Lower costs**. Any successful software product or service will evolve significantly over the course of its lifetime.\\n  By investing in build, test, deployment and environment automation, we substantially reduce the cost of making and\\n  delivering incremental changes to software by **eliminating many of the fixed costs** associated with the release\\n  process.\\n- **Happier teams**. Continuous Delivery makes releases less painful and reduces team burnout. Furthermore, when we\\n  release more frequently, software delivery teams can engage more actively with users, learn which ideas work and which\\n  don\'t, and see first-hand then outcomes of the work they have done. By removing low-value painful activities\\n  accociated with software delivery, we can fodus on what we care about most - continuous delighting our users.\\n\\n**Continuous delivery is about continuous, daily improvement - the constant discipline of pursuing higher performance by\\nfollowing the heuristic \\"if it hurts, do it more often, and bring the pain forward.\\"**\\n\\nPrinciples\\n----------\\n\\nThere are five principles at the heart of continuous delivery:\\n\\n1. Build quality in\\n2. Work in small batches\\n3. Computers perform repetitive tasks, people solve problems\\n4. Relentlessly pursue continuous improvement\\n5. Everyone is responsible\\n\\nIt\'s easy to get bogged down in the details of implementing continuous delivery - tools, architecture, practices,\\npolitics - if you find yourself lost, try revisiting these principles and you may find it helps you refocus on what\'s\\nimportant.\\n\\n### Build Quality In\\n\\nW. Edwards Deming, a key figure in the history of the Lean movement, offered\\n[14 key principles](https://deming.org/explore/fourteen-points) for management. Principle three states, \\"Cease\\ndependence on inspection to achieve quality. Eliminate the need for inspection on a mass basis by building quality into\\nthe product in the first place\\".\\n\\nIt\'s much cheaper to fix problems and defects if we find them immediately - ideally before they are ever checked into\\nversion control, by running automated tests locally. Finding defects downstream through inspection (such as manual\\ntesting) is time-consuming, requiring significant triage. Then we must fix the defect, trying to recall what we were\\nthinking when we introduced the problem days or perhaps even weeks ago.\\n\\nCreating and evolving feedback loops to detect problems as early as possible is essential and never-ending work in\\ncontinuous delivery. If we find a problem in our exploratory testing, we must not only fix it, but then ask: How could\\nwe have caught the problem with an automated acceptance test? When an acceptance test fails, we should ask: Could we\\nhave written a unit test to catch this problem?\\n\\n### Work in Small Batches\\n\\nIn traditional phased approaches to software development, handoffs from dev to test or test to IT operations consist of\\nwhole releases: months worth of work by teams consisting of tens or hundreds of people.\\n\\nIn continuous delivery, we take the opposite approach, and try and get every change in version control as far towards\\nrelease as we can, getting comprehensive feedback as rapidly as possible.\\n\\nWorking in small batches has many benefits. It reduces the time it takes to get feedback on our work, makes it easier to\\ntriage and remediate problems, increases efficiency and motivation, and prevents us from succumbing to the sunk cost\\nfallacy.\\n\\nThe reason we work in large batches is because of the large fixed cost of handing off changes. **A key goal of\\ncontinuous delivery is to change the economics of the software delivery process to make it economically viable to work\\nin small batches so we can obtain the many benefits of this approach**.\\n\\n:::info\\n\\nA key goal of continuous delivery is to change the economics of the software delivery process to make it economically\\nviable to work in small batches so we can obtain the many benefits of this approach\\n\\n:::\\n\\n### Relentlessly Pursue Continuous Improvement\\n\\nContinuous improvement, or _kaizen_ in Japanese, is another key idea from the Lean movement.\\n[Taiichi Ohno](http://www.amazon.com/dp/0071808019?tag=contindelive-20), a key figure in the history of the Toyota\\ncompany, once said,\\n\\n> \\"Kaizen opportunitites are infinite. Don\'t think you have made things better than before and be at ease\u2026 This would be\\n> like the student who becomes proud because they bested their master two times out of three in fencing. Once you pick\\n> up the sprouts of kaizen ideas, it is important to have the attitude in our daily work that just underneath one kaizen\\n> idea is yet another one\\".\\n\\nDon\'t treat transformation as a project to be embarked on and then completed so we can return to business as usual. The\\nbest organizations are those where everybody treats improvement work as an essential part of their daily work, and where\\nnobody is satisfied with the status quo.\\n\\n### Everyone is Responsible\\n\\nIn high performing organizations, nothing is \\"somebody else\'s problem.\\" Developers are responsible for the quality and\\nstability of the software they build. Operations teams are responsible for helping developers build quality in. Everyone\\nworks together to achieve the organizational level goals, rather than optimizing for what\u2019s best for their team or\\ndepartment.\\n\\nWhen people make local optimizations that reduce the overall performance of the organization, it\'s often due to systemic\\nproblems such as poor management systems such as annual budgeting cycles, or incentives that reward the wrong behaviors.\\nA classic example is rewarding developers for increasing their velocity or writing more code, and rewarding testers\\nbased on the number of bugs they find.\\n\\nMost people want to do the right thing, but they will adapt their behaviour based on how they are rewarded. Therefore,\\nit is very important to create fast feedback loops from the things that really matter: how customers react to what we\\nbuild for them, and the impact on our organization.\\n\\nFoundations - Prerequisites for Continuous Delivery\\n---------------------------------------------------\\n\\n### Configuration Management\\n\\nAutomation plays a vital role in ensuring we can release software repeatably and reliably. One key goal is to take\\nrepetitive manual processes like build, deployment, regression testing and infrastructure provisioning, and automate\\nthem. In order to achieve this, we need to version control everything required to perform these processes, including\\nsource code, test and deployment scripts, infrastructure and application configuration information, and the many\\nlibraries and packages we depend upon. We also want to make it straightforward to query the current -and historical -\\nstate of our environments.\\n\\nWe have two overriding goals:\\n\\n1. **Reproducibility**: We should be able to provision any environment in a fully automated fashion, and know that any\\n   new environment reproduced from the same configuration is identical.\\n2. **Traceability**: We should be able to pick any environment and be able to determine quickly and precisely the\\n   versions of every dependency used to create that environment. We also want to be able to compare previous versions of\\n   an environment and see what has changed between them.\\n\\nThese capabilities give us several very important benefits:\\n\\n1. **Disaster recovery**: When something goes wrong with one of our environments, for example a hardware failure or a\\n   security breach, we need to be able to reproduce that environment in a deterministic amount of time in order to be\\n   able to restore service.\\n2. **Auditability**: In order to demonstrate the integrity of the delivery process, we need to be able to show the path\\n   backwards from every deployment to the elements it came from, including their version. Comprehensive configuration\\n   management, combined with deployment pipelines, enable this.\\n3. **Higher quality**: The software delivery process is often subject to long delays waiting for development, testing\\n   and production environments to be prepared. When this can be done automatically from version control, we can get\\n   feedback on the impact of our changes much more rapidly, enabling us to build quality in to our software.\\n4. **Capacity management**: When we want to add more capacity to our environments, the ability to create new\\n   reproductions of existing servers is essential. This capability, using [OpenStack](https://www.openstack.org/) for\\n   example, enables the horizontal scaling of modern cloud-based distributed systems.\\n5. **Response to defects**: When we discover a critical defect, or a vulnerability in some component of our system, we\\n   want to get a new version of our software released as quickly as possible. Many organizations have an emergency\\n   process for this type of change which goes faster by bypassing some of the testing and auditing. This presents an\\n   especially serious dilemma in safety-critical systems. Our goal should be to be able to use our normal release\\n   process for emergency fixes - which is precisely what continuous delivery enables, on the basis of comprehensive\\n   configuration management.\\n\\nAs environments become more complex and heterogeneous, it becomes progressively harder to achieve these goals. Achieving\\nperfect reproducibility and traceability to the last byte for a complex enterprise system is impossible (apart from\\nanything else, every real system has state). Thus a key part of configuration management is working to **simplify our\\narchitecture, environments and processes** to reduce the investment required to achieve the desired benefits.\\n\\n#### Configuration Management Learning Resources\\n\\n- [Infrastructure as Code](https://www.oreilly.com/library/view/infrastructure-as-code/9781491924334/)\\n- [Pedro Canahuati on scaling operations at Facebook](http://www.infoq.com/presentations/scaling-operations-facebook)\\n\\n### Continuous Integration\\n\\nCombining the work of multiple developers is hard. Software systems are complex, and an apparently simple,\\nself-contained change to a single file can easily have unintended consequences which compromise the correctness of the\\nsystem. As a result, some teams have developers work isolated from each other on their own branches, both to keep\\ntrunk/master stable, and to prevent them treading on each other\u2019s toes.\\n\\nHowever, over time these branches diverge from each other. While merging a single one of these branches into mainline is\\nnot usually troublesome, the work required to integrate multiple long-lived branches into mainline is usually painful,\\nrequiring significant amounts of re-work as conflicting assumptions of developers are revealed and must be resolved.\\n\\nTeams using long-lived branches often require code freezes, or even integration and stabilization phases, as they work\\nto integrate these branches prior to a release. Despite modern tooling, this process is still expensive and\\nunpredictable. On teams larger than a few developers, the integration of multiple branches requires multiple rounds of\\nregression testing and bug fixing to validate that the system will work as expected following these merges. This problem\\nbecomes exponentially more severe as team sizes grow, and as branches become more long-lived.\\n\\nThe practice of continuous integration was invented to address these problems. CI (continuous integration) follows the\\nXP (extreme programming) principle that if something is painful, we should do it more often, and bring the pain forward.\\nThus in CI developers integrate all their work into trunk (also known as mainline or master) on a regular basis (at\\nleast daily). A set of automated tests is run both **before and after** the merge to validate that no regressions are\\nintroduced. If these automated tests fail, the team stops what they are doing and someone fixes the problem immediately.\\n\\nThus we ensure that the software is always in a working state, and that developer branches do not diverge significantly\\nfrom trunk. The benefits of continuous integration are very significant - higher levels of throughput, more stable\\nsystems, and higher quality software. However the practice is still controversial, for two main reasons.\\n\\nFirst, it requires developers to break up large features and other changes into smaller, more incremental steps that can\\nbe integrated into trunk/master. This is a paradigm shift for developers who are not used to working in this way. It also\\ntakes longer to get large features completed. However in general we don\'t want to optimize for the speed at which\\ndevelopers can declare their work \\"dev complete\\" on a branch. Rather, we want to be able to get changes reviewed,\\nintegrated, tested and deployed as fast as possible - and this process is an order of magnitude faster and cheaper when\\nthe changes are small and self-contained, and the branches they live on are short-lived. Working in small batches also\\nensures developers get regular feedback on the impact of their work on the system as a whole - from other developers,\\ntesters, customers, and automated performance and security tests\u2014which in turn makes any problems easier to detect,\\ntriage, and fix.\\n\\nSecond, continuous integration requires a fast-running set of comprehensive automated unit tests. These tests should be\\ncomprehensive enough to give a good level of confidence that the software will work as expected, while also running in a\\nfew minutes or less. If the automated unit tests take longer to run, developers will not want to run them frequently,\\nand they will become harder to maintain. Creating maintainable suites of automated unit tests is complex and is best done\\nthrough test-driven development (TDD), in which developers write failing automated tests before they implement the code\\nthat makes the tests pass. TDD has several benefits, the most important of which is that it ensures developers write code\\nthat is modular and easy to test, reducing the maintenance cost of the resulting automated test suites. But TDD is still\\nnot sufficiently widely practiced.\\n\\nDespite these barriers, **helping software development teams implement continuous integration should be the number one\\npriority for any organization** wanting to start the journey to continuous delivery. By creating rapid feedback loops\\nand ensuring developers work in small batches, CI enables teams to build quality into their software, thus reducing the\\ncost of ongoing software development, and increasing both the productivity of teams and the quality of the work they\\nproduce.\\n\\n#### Continuous Integration Learning Resources\\n\\n- [Paul Duvall\'s book on Continuous Integration](http://www.amazon.com/dp/0321336380?tag=contindelive-20)\\n\\n### Continuous Testing\\n\\nThe key to building quality into our software is making sure we can get fast feedback on the impact of changes.\\nTraditionally, extensive use was made of manual inspection of code changes and manual testing (testers following\\ndocumentation describing the steps required to test the various functions of the system) in order to demonstrate the\\ncorrectness of the system. This type of testing was normally done in a phase following \u201cdev complete\u201d. However this\\nstrategy have several drawbacks:\\n\\n- Manual regression testing takes a long time and is relatively expensive to perform, creating a bottleneck that\\n  prevents us releasing software more frequently, and getting feedback to developers weeks (and sometimes months) after\\n  they wrote the code being tested.\\n- Manual tests and inspections are not very reliable, since people are notoriously poor at performing repetitive tasks\\n  such as regression testing manually, and it is extremely hard to predict the impact of a set of changes on a complex\\n  software system through inspection.\\n- When systems are evolving over time, as is the case in modern software products and services, we have to spend\\n  considerable effort updating test documentation to keep it up-to-date.\\n\\nIn order to build quality in to software, we need to adopt a different approach.\\n\\nOnce we have continuous integration and test automation in place, we create a\\n[deployment pipeline](#the-deployment-pipeline). In the deployment pipeline pattern, every change runs a build that\\n\\n- creates packages that can be deployed to any environment and\\n- runs unit tests (and possibly other tasks such as static analysis), giving feedback to developers in the space of a\\n  few minutes.\\n\\nPackages that pass this set of tests have more comprehensive automated acceptance tests run against them. Once we have\\npackages that pass all the automated tests, they are available for deplyment to other environments.\\n\\nIn the deployment pipeline, every change is effectively a release candidate. The job of the deployment pipeline is to\\ncatch known issues. If we can\'t detect any known problems, we should feel totally comfortable releasing any packages\\nthat have gone through it. If we aren\'t, or if we discover defects later, it means we need to improve our pipeline,\\nperhaps adding or updating some tests.\\n\\nOur goal should be to find problems as soon as possible, and make the lead time from check-in to release as short as\\npossible. Thus we want to parallelize the activities in the deployment pipeline, not have many stages executing in\\nseries. If we discover a defect in the acceptance tests, we should be looking to improve our unit tests (most of our\\ndefects should be discovered through unit testing).\\n\\nImplementing Continuous Delivery\\n--------------------------------\\n\\nOrganizations attempting to deploy continuous delivery tend to make two common mistakes. The first is to treat\\ncontinuous delivery as an end-state, a goal in itself. The second is to spend a lot of time and energy worrying about\\nwhat products to use.\\n\\n### Evolutionary Architecture\\n\\nIn the context of enterprise architecture there are typically multiple attributes we are concerned about, for example\\navailability, security, performance, usability and so forth. In continuous delivery, we introduce two new architectural\\nattributes:\\n\\n1. **testability**\\n2. **deployability**\\n\\nIn a _testable_ architecture, we design our software such that most defects can (in principle, at least) be discovered\\nby developers by running automated tests on their workstations. We shouldn\u2019t need to depend on complex, integrated\\nenvironments in order to do the majority of our acceptance and regression testing.\\n\\nIn a _deployable_ architecture, deployments of a particular product or service can be performed independently and in a\\nfully automated fashion, without the need for significant levels of orchestration. Deployable systems can typically be\\nupgraded or reconfigured with zero or minimal downtime.\\n\\nWhere testability and deployability are not prioritized, we find that much testing requires the use of complex,\\nintegrated environments, and deployments are \\"big bang\\" events that require that many services are released at the same\\ntime due to complex interdependencies. These \\"big bang\\" deployments require many teams to work together in a carefully\\norchestrated fashion with many hand-offs, and dependencies between hundreds or thousands of tasks. Such deployments\\ntypically take many hours or even days, and require scheduling significant downtime.\\n\\nDesigning for testability and deployability starts with ensuring our products and services are composed of\\nloosely-coupled, well-encapsulated components or modules\\n\\nWe can define a well-designed modular architecture as one in which it is possible to test or deploy a single component\\nor service on its own, with any dependencies replaced by a suitable test double, which could be in the form of a virtual\\nmachine, a stub, or a mock. Each component or service should be deployable in a fully automated fashion on developer\\nworkstations, test environments, or in production. In a well-designed architecture, it is possible to get a high level of\\nconfidence the component is operating properly when deployed in this fashion.\\n\\n:::info Test Double\\n\\nTest Double is a generic term for any case where you replace a production object for testing purposes. There are various\\nkinds of double:\\n\\n- **Dummy** objects are passed around but never actually used. Usually they are just used to fill parameter lists.\\n- **Fake** objects actually have working implementations, but usually take some shortcut which makes them not suitable\\n  for production (an InMemoryTestDatabase is a good example).\\n- **Stubs** provide canned answers to calls made during the test, usually not responding at all to anything outside\\n  what\'s programmed in for the test.\\n- **Spies** are stubs that also record some information based on how they were called. One form of this might be an email\\n  service that records how many messages it was sent.\\n- **Mocks** are pre-programmed with expectations which form a specification of the calls they are expected to receive.\\n  They can throw an exception if they receive a call they don\'t expect and are checked during verification to ensure\\n  they got all the calls they were expecting.\\n\\n:::\\n\\nAny true service-oriented architecture should have these properties\u2014but unfortunately many do not. However, the\\nmicroservices movement has explicitly prioritized these architectural properties.\\n\\nOf course, many organizations are living in a world where services are distinctly hard to test and deploy. Rather than\\nre-architecting everything, we recommend an iterative approach to improving the design of enterprise system, sometimes\\nknown as evolutionary architecture. In the evolutionary architecture paradigm, we accept that successful products and\\nservices will require re-architecting during their lifecycle due to the changing requirements placed on them.\\n\\nOne pattern that is particularly valuable in this context is the strangler application. In this pattern, we iteratively\\nreplace a monolithic architecture with a more componentized one by ensuring that new work is done following the\\nprinciples of a service-oriented architecture, while accepting that the new architecture may well delegate to the system\\nit is replacing. Over time, more and more functionality will be performed in the new architecture, and the old system\\nbeing replaced is \\"strangled\\".\\n\\n![](./strangler.png)\\n\\n### Patterns\\n\\n#### The Deployment Pipeline\\n\\nThe key pattern introduced in continuous delivery is the **deployment pipeline**. Our goal was to make deployment to any\\nenvironment a fully automated, scripted process that could be performed on demand in minutes. We wanted to be able to\\nconfigure testing and production environments purely from configuration files stored in version control. The apparatus\\nwe used to perform these tasks became known as _deployment pipelines_\\n\\nIn the deployment pipeline pattern, every change in version control triggers a process (usually in a CI server) which\\ncreates deployable packages and runs automated unit tests and other validations such as static code analysis. This first\\nstep is optimized so that it takes only a few minutes to run. If this initial commit stage fails, the problem must be\\nfixed immediately; nobody should check in more work on a broken commit stage. Every passing commit stage triggers the\\nnext step in the pipeline, which might consist of a more comprehensive set of automated tests. Versions of the software\\nthat pass all the automated tests can then be deployed to production.\\n\\nDeployment pipelines tie together [configuration management](#configuration-management),\\n[continuous integration](#continuous-integration) and [test](#continuous-testing) and deployment automation in a\\nholistic, powerful way that works to improve software quality, increase stability, and reduce the time and cost required\\nto make incremental changes to software, whatever domain we\'re operating in. When building a deployment pipeline, the\\nfollowing practices become valuable:\\n\\n- **Only build packages once**. We want to be sure the thing we\'re deploying is the same thing we\'ve tested throughout\\n  the deployment pipeline, so if a deployment fails we can eliminate the packages as the source of the failure.\\n- **Deploy the same way to every environment, including development**. This way, we test the deployment process many,\\n  many times before it gets to production, and again, we can eliminate it as the source of any problems.\\n- **Smoke test your deployments**. Have a script that validates all your application\'s dependencies are available, at\\n  the location you have configured your application. Make sure your application is running and available as part of the\\n  deployment process.\\n- **Keep your environments similar**. Although they may differ in hardware configuration, they should have the same\\n  version of the operating system and middleware packages, and they should be configured in the same way. This has\\n  become much easier to achieve with modern virtualization and container technology.\\n\\nWith the advent of infrastructure as code, it has became possible to use deployment pipelines to create a fully\\nautomated process for taking all kinds of changes\u2014including database and infrastructure changes\\n\\n### Patterns for Low-Risk Releases\\n\\nIn the context of web-based systems there are a number of patterns that can be applied to further reduce the risk of\\ndeployments. Michael Nygard also describes a number of important software design patterns which are instrumental in\\ncreating resilient large-scale systems in his book\\n[Release It!](http://www.amazon.com/dp/0978739213?tag=contindelive-20)\\n\\nThe 3 key principles that enable low-risk releases are\\n\\n1. **Optimize for Resilience**. Once we accept that failures are inevitable, we should start to move away from the idea\\n   of investing all our effort in preventing problems, and think instead about how to restore service as rapidly as\\n   possible when something goes wrong. Furthermore, when an accident occurs, we should treat it as a learning\\n   opportunity. Resilience isn\'t just a feature of our systems, it\'s a characteristic of a team\'s culture. High\\n   performance organizations are constantly working to improve the resilience of their systems by trying to break them\\n   and implementing the lessons learned in the course of doing so.\\n2. **Low-risk Releases are Incremental**. Our goal is to architect our systems such that we can release individual\\n   changes (including database changes) independently, rather than having to orchestrate big-bang releases due to tight\\n   coupling between multiple different systems.\\n3. **Focus on Reducing Batch Size**. Counterintuitively, deploying to production more frequently actually reduces the\\n   risk of release when done properly, simply because the amount of change in each deployment is smaller. When each\\n   deployment consists of tens of lines of code or a few configuration settings, it becomes much easier to perform root\\n   cause analysis and restore service in the case of an incident. Furthermore, because we practice the deployment\\n   process so frequently, we\u2019re forced to simplify and automate it which further reduces risk."},{"id":"immutable-infrastructure","metadata":{"permalink":"/aergia/blog/immutable-infrastructure","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-08-30-immutable-infrastructure/index.md","source":"@site/blog/2022-08-30-immutable-infrastructure/index.md","title":"What Is Immutable Infrastructure","description":"In a traditional mutable server infrastructure, servers are continually updated and modified in place. Engineers and","date":"2022-08-30T00:00:00.000Z","formattedDate":"August 30, 2022","tags":[{"label":"Continuous Delivery","permalink":"/aergia/blog/tags/continuous-delivery"}],"readingTime":9.135,"hasTruncateMarker":true,"authors":[{"name":"Hazel Vird\xf3","title":"Senior Technical Writer","url":"https://www.digitalocean.com/community/tutorials/what-is-immutable-infrastructure","imageURL":"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/DigitalOcean_logo.svg/1024px-DigitalOcean_logo.svg.png","key":"hazel"},{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"immutable-infrastructure","title":"What Is Immutable Infrastructure","authors":["hazel","jiaqi"],"tags":["Continuous Delivery"]},"prevItem":{"title":"Continuous Delivery","permalink":"/aergia/blog/continuous-delivery"},"nextItem":{"title":"Deploying v.s. Releasing","permalink":"/aergia/blog/deploying-vs-releasing"}},"content":"In a traditional mutable server infrastructure, servers are continually updated and modified in place. Engineers and\\nadministrators working with this kind of infrastructure can SSH into their servers, upgrade or downgrade packages\\nmanually, tweak configuration files on a server-by-server basis, and deploy new code directly onto existing servers. In\\nother words, these servers are mutable; they can be changed after they\u2019re created. Infrastructure comprised of mutable\\nservers can itself be called mutable, traditional, or (disparagingly) artisanal.\\n\\nAn immutable infrastructure is another infrastructure paradigm in which servers are never modified after they\'re\\ndeployed. If something needs to be updated, fixed, or modified in any way, new servers built from a common image with\\nthe appropriate changes are provisioned to replace the old ones. After they\u2019re validated, they\u2019re put into use and the\\nold ones are decommissioned.\\n\\nThe benefits of an immutable infrastructure include more consistency and reliability in your infrastructure and a\\nsimpler, more predictable deployment process. It mitigates or entirely prevents issues that are common in mutable\\ninfrastructures, like configuration drift and [snowflake servers](https://martinfowler.com/bliki/SnowflakeServer.html).\\nHowever, using it efficiently often includes comprehensive deployment automation, fast server provisioning in a cloud\\ncomputing environment, and solutions for handling stateful or ephemeral data like logs.\\n\\n\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\nDifferences Between Mutable and Immutable Infrastructure\\n--------------------------------------------------------\\n\\nThe most fundamental difference between mutable and immutable infrastructure is in their central policy: the components\\nof the former are designed to be changed after deployment; the components of the latter are designed to remain unchanged\\nand ultimately be replaced.\\n\\nConceptually speaking, the two kinds of infrastructure vary greatly in their approach to how servers should be treated\\n(e.g. created, maintained, updated, destroyed). This is commonly illustrated with a \\"pets versus cattle\\" analogy.\\n\\n:::info Pets v.s. Cattle\\n\\nThe servers in traditional mutable infrastructures were irreplaceable, unique systems that had to be kept running at all\\ntimes. In this way, they were like **pets**: one of a kind, inimitable, and tended to by hand. Losing one could be\\ndevastating. The servers in immutable infrastructures, on the other hand, are disposable and easy to replicate or scale\\nwith automated tools. In this way, they\'re like **cattle**: one of many in a herd where no individual is unique or\\nindispensable.\\n\\nTo quote [Randy Bias](http://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/), who first applied\\nthe pets vs. cattle analogy to cloud computing:\\n\\n> In the old way of doing things, we treat our servers like pets, for example Bob the mail server. If Bob goes down,\\n> it\'s all hands on deck. The CEO can\u2019t get his email and it\u2019s the end of the world. In the new way, servers are\\n> numbered, like cattle in a herd. For example, www001 to www100. When one server goes down, it\'s taken out back, shot,\\n> and replaced on the line.\\n\\nAnother similar way of illustrating the implications of the difference between how servers are treated is with the\\nconcepts of snowflake servers and phoenix servers.\\n\\n[**Snowflake servers**](https://martinfowler.com/bliki/SnowflakeServer.html) are similar to pets. They are servers that\\nare managed by hand, frequently updated and tweaked in place, leading to a unique environment.\\n[**Phoenix servers**](https://martinfowler.com/bliki/PhoenixServer.html) are similar to cattle. They are servers that\\nare always built from scratch and are easy to recreate (or \\"rise from the ashes\\") through automated procedures.\\n\\n:::\\n\\nPractically speaking, mutable infrastructure is a much older infrastructure paradigm that predates the core\\ntechnologies, like virtualization and [cloud computing](#embracing-the-cloud), that make immutable infrastructures\\npossible and practical. Knowing this history helps contextualize the conceptual differences between the two and the\\nimplications of using one or the other in modern day infrastructure.\\n\\nEmbracing the Cloud\\n--------------------\\n\\nBefore virtualization and cloud computing became possible and widely available, server infrastructure was centered\\naround physical servers. These physical servers were expensive and time-consuming to create; the initial setup could\\ntake days or weeks because of how long it took to order new hardware, configure the machine, and then install it in a\\n[colo](https://en.wikipedia.org/wiki/Colocation_centre) or similar location.\\n\\nMutable infrastructure has its origins here. Because the cost of replacing a server was so high, it was most practical\\nto keep using the servers you had running for as long as possible with as little downtime as possible. This meant there\\nwere a lot of in place changes for regular deployments and updates, but also for ad-hoc fixes, tweaks, and patches when\\nsomething went wrong. The consequence of frequent manual changes is that servers can become hard to replicate, making\\neach one a unique and fragile component of the overall infrastructure.\\n\\nThe advent of virtualization and on-demand/cloud computing represented a turning point in server architecture. Virtual\\nservers were less expensive, even at scale, and they could be created and destroyed in minutes instead of days or weeks.\\nThis made new deployment workflows and server management techniques possible for the first time, like using\\nconfiguration management or cloud APIs to provision new servers quickly, programmatically, and automatically. The speed\\nand low cost of creating new virtual servers is what makes the immutability principle practical.\\n\\nTraditional mutable infrastructures originally developed when the use of physical servers dictated what was possible in\\ntheir management, and continued to develop as technology improved over time. The paradigm of modifying servers after\\ndeployment is still common in modern day infrastructure. In contrast, immutable infrastructures were designed from the\\nstart to rely on virtualization-based technologies for fast provisioning of architecture components, like cloud\\ncomputing\'s virtual servers.\\n\\nAdvantages of Immutable Infrastructure\\n--------------------------------------\\n\\nTo understand the advantages of immutable infrastructures, it\u2019s necessary to contextualize the disadvantages of mutable\\ninfrastructures.\\n\\nServers in mutable infrastructures can suffer from configuration drift, which is when undocumented, impromptu changes\\ncause servers\' configurations to become increasingly divergent from each other and from the reviewed, approved, and\\noriginally-deployed configuration. These increasingly snowflake-like servers are hard to reproduce and replace, making\\nthings like scaling and recovering from issues difficult. Even replicating issues to debug them becomes challenging\\nbecause of the difficulty of creating a staging environment that matches the production environment.\\n\\nWith this in mind, the primary benefits of using an immutable infrastructure are deployment simplicity, reliability, and\\nconsistency, all of which ultimately minimize or eliminate many common pain points and failure points.\\n\\n### Known-Good Server State and Fewer Deployment Failures\\n\\nAll deployments in an immutable infrastructure are executed by provisioning new servers based on a validated and\\nversion-controlled image. As a result, these deployments don\u2019t depend on the previous state of a server, and\\nconsequently can\'t fail - or only partially complete - because of it.\\n\\nWhen new servers are provisioned, they can be tested before being put into use. In addition, deployments become\\n[atomic](https://en.wikipedia.org/wiki/Linearizability): either they complete successfully or nothing changes.\\n\\nThis makes deploying much more reliable and also ensures that the state of every server in the infrastructure is always\\n\x3c!-- markdown-link-check-disable --\x3e\\nknown. Additionally, this process makes it easy to implement a [blue-green deployment](continuous-delivery) or\\n\x3c!-- markdown-link-check-enable --\x3e\\n[rolling releases](https://en.wikipedia.org/wiki/Rolling_release), meaning no downtime.\\n\\n### No configuration Drift or Snowflake Servers\\n\\nAll configuration changes in an immutable infrastructure are implemented by checking an updated image into version\\ncontrol with documentation and using an automated, unified deployment process to deploy replacement servers with that\\nimage. Shell access to the servers is sometimes completely restricted.\\n\\nThis prevents complicated or hard-to-reproduce setups by eliminating the risk of snowflake servers and configuration\\ndrift. This also prevents situations where someone needs to modify a poorly-understood production server, which runs a\\nhigh risk of error and causing downtime or unintended behavior.\\n\\n### Consistent Staging Environments and Easy Horizontal Scaling\\n\\nBecause all servers use the same creation process, there are no deployment edge cases. This prevents messy or\\ninconsistent staging environments by making it trivial to duplicate the production environment, and also simplifies\\nhorizontal scaling by seamlessly allowing you to add more identical servers to your infrastructure.\\n\\n### Simple Rollback and Recovery Processes\\n\\nUsing version control to keep image history also helps with handling production issues. The same process that is used to\\ndeploy new images can also be used to roll back to older versions, adding additional resilience and reducing recovery\\ntime when handling downtime.\\n\\nImplementing Immutable Infrastructure\\n-------------------------------------\\n\\nImmutable infrastructure comes with some requirements and nuance in its implementation details, especially compared to\\ntraditional mutable infrastructures.\\n\\nIt is technically possible to implement an immutable infrastructure independent of any automation, tooling, or software\\ndesign principles by simply adhering to the key principle of immutability. However, the components below (roughly in\\npriority order) are strongly recommended for practicality at scale:\\n\\n- **Dedication from engineering and operations teams** to collaborate and commit to the approach. For all the simplicity\\n  of the end product, there are a lot of moving parts in an immutable infrastructure, and no one person will know all of\\n  it. Additionally, some aspects of working within this infrastructure can be new or outside of people\u2019s comfort zones,\\n  like debugging or doing one-off tasks without shell access.\\n- **Servers in a cloud computing environment**, or another virtualized environment. The key here is to have isolated\\n  instances with fast provisioning from custom images, as well as automated management for creation and destruction via\\n  an API or similar.\\n- **Full automation of the entire deployment pipeline**, ideally including post-creation image validation. Setting up\\n  this automation adds significantly to the upfront cost of implementing this infrastructure, but it is a one-time cost\\n  which amortizes out quickly.\\n- **A [service-oriented architecture](https://en.wikipedia.org/wiki/Service-oriented_architecture)**, separating our\\n  infrastructure into modular, logically discrete units that communicate over a network.\\n- **A [stateless](https://en.wikipedia.org/wiki/Service_statelessness_principle), volatile application layer** which\\n  includes our immutable servers. Anything here can get destroyed and rebuilt quickly at any time (volatile) without any\\n  loss of data (stateless).\\n- **A persistent data layer** that includes:\\n\\n  * **Centralized logging** with additional details about a server\'s deployment, like image identification via a version\\n    or Git commit SHA. Because servers are disposable (and frequently disposed of) in this infrastructure, storing logs\\n    and metrics externally allows debugging _even when shell access is restricted_ or after a server has been destroyed.\\n  * **External data stores** for databases and any other stateful or ephemeral data. We will never rely on local storage\\n    when the servers are volatile, so we need to store that data elsewhere.\\n\\nThere are many different ways to implement each of these components. CI/CD tools can be a good place to start for\\ndeployment pipeline automation; [Netflix\'s Chaos Monkey](https://github.com/Netflix/chaosmonkey), which randomly kills\\nservers in your production environment, is a real trial by fire for your final setup."},{"id":"deploying-vs-releasing","metadata":{"permalink":"/aergia/blog/deploying-vs-releasing","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-08-29-deply-vs-release/index.md","source":"@site/blog/2022-08-29-deply-vs-release/index.md","title":"Deploying v.s. Releasing","description":"The key distinction between deployment and release is the business rationale. Deployment doesn\'t necessarily mean users","date":"2022-08-29T00:00:00.000Z","formattedDate":"August 29, 2022","tags":[{"label":"Continuous Delivery","permalink":"/aergia/blog/tags/continuous-delivery"}],"readingTime":1.825,"hasTruncateMarker":true,"authors":[{"name":"Joseph Mathenge","url":"https://www.bmc.com/blogs/software-deployment-vs-release/","imageURL":"https://yt3.ggpht.com/ytc/AL5GRJX2ITW5UDZgTqodcXst-XYmK3-6UZfrAl0fq4tfYw=s68-c-k-c0x00ffffff-no-rj","key":"joseph-mathenge"},{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"deploying-vs-releasing","title":"Deploying v.s. Releasing","authors":["joseph-mathenge","jiaqi"],"tags":["Continuous Delivery"]},"prevItem":{"title":"What Is Immutable Infrastructure","permalink":"/aergia/blog/immutable-infrastructure"},"nextItem":{"title":"Docker cAdvisor","permalink":"/aergia/blog/docker-c-advisor"}},"content":"The key distinction between deployment and release is the business rationale. Deployment doesn\'t necessarily mean users\\nhave access to features. Some companies will release at the same time as deployment to production is taking place.\\n\\nOthers will choose to wait, thereby having the new features in production but not availed to users until the business\\ndecides.\\n\\n\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\nWhat is Deployment\\n------------------\\n\\nDeployment involves moving software from one controlled environment to another. **An environment is a subset of IT\\ninfrastructure used for a particular purpose**. The most common environments are:\\n\\n- **Development**. Commonly referred to as _dev_, this is where developers build the code.\\n- **Integration**. Here, the new code is combined and validated that it works with existing code.\\n- **Test**. This is where both functional and non-functional tests are conducted on the merged code to confirm it meets\\n  organization and customer requirements.\\n- **Staging**. This environment is used to test the software using real data to validate it is ready for use.\\n- **Production**. Commonly referred to as prod, this is where the software is made available to users.\\n\\nWhat is Software Release\\n------------------------\\n\\nA release is **a collection of one or more new or changed services or service components deployed into the live\\nenvironment as a result of one or more changes**\\n\\nIn other words, a release makes services and features available to users. More often than not,\\n[release management](https://www.bmc.com/blogs/devops-release-management/) is more of a business responsibility than a\\ntechnical responsibility. This is because the decisions on scheduling releases can be tied to business strategy from a\\nrevenue or portfolio management perspective."},{"id":"docker-c-advisor","metadata":{"permalink":"/aergia/blog/docker-c-advisor","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-07-31-docker-c-advisor/index.md","source":"@site/blog/2022-07-31-docker-c-advisor/index.md","title":"Docker cAdvisor","description":"[//]: # (Copyright Jiaqi Liu)","date":"2022-07-31T00:00:00.000Z","formattedDate":"July 31, 2022","tags":[{"label":"Docker","permalink":"/aergia/blog/tags/docker"},{"label":"Virtualization","permalink":"/aergia/blog/tags/virtualization"}],"readingTime":1.29,"hasTruncateMarker":true,"authors":[{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"docker-c-advisor","title":"Docker cAdvisor","authors":["jiaqi"],"tags":["Docker","Virtualization"]},"prevItem":{"title":"Deploying v.s. Releasing","permalink":"/aergia/blog/deploying-vs-releasing"},"nextItem":{"title":"Open Sourcing Screwdriver - Yahoo\'s Continuous Delivery Build System for Dynamic Infrastructure","permalink":"/aergia/blog/screwdriver"}},"content":"\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\nDocker cAdvisor\\n---------------\\n\\n[cAdvisor](https://github.com/google/cadvisor) (Container Advisor) provides Docker container users an understanding of\\nthe resource usage and performance characteristics of their running containers. It is a running daemon that collects,\\naggregates, processes, and exports information about running containers. Specifically, for each container it keeps\\nresource isolation parameters, historical resource usage, histograms of complete historical resource usage and network\\nstatistics. This data is exported by container and machine-wide.\\n\\nAlthough [cAdvisor](https://github.com/google/cadvisor) has some prelimilary (useful though) UI. It also offers\\n\\n1. [RESTful API to query container stats](https://github.com/google/cadvisor/blob/master/docs/api.md)\\n2. [Export capability to common data storage, such as Elasticsearch](https://github.com/google/cadvisor/blob/master/docs/storage/README.md)\\n\\nTo pull the image and run it:\\n\\n```bash\\nsudo docker run \\\\\\n    --volume=/:/rootfs:ro \\\\\\n    --volume=/var/run/docker.sock:/var/run/docker.sock:rw \\\\\\n    --volume=/sys:/sys:ro \\\\\\n    --volume=/var/lib/docker/:/var/lib/docker:ro \\\\\\n    --volume=/dev/disk/:/dev/disk:ro \\\\\\n    --publish=8080:8080 \\\\\\n    --detach=true \\\\\\n    --name=cadvisor \\\\\\n    --privileged \\\\\\n    --device=/dev/kmsg \\\\\\n    gcr.io/cadvisor/cadvisor:v0.36.0\\n```\\n\\n![cAdvisor Screenshot 1](./cadvisor-1.png)\\n![cAdvisor Screenshot 2](./cadvisor-2.png)\\n\\n### [docker-container-stats](https://github.com/virtualzone/docker-container-stats)\\n\\n[cAdvisor](https://github.com/google/cadvisor) is good for customizing container monitoring, but it\'s heavy. A\\nquick-and-lightweight option would be [docker-container-stats](https://github.com/virtualzone/docker-container-stats)\\n\\n![docker-container-stats Screenshot](./docker-container-stats.png)"},{"id":"screwdriver","metadata":{"permalink":"/aergia/blog/screwdriver","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-06-30-screwdriver/index.md","source":"@site/blog/2022-06-30-screwdriver/index.md","title":"Open Sourcing Screwdriver - Yahoo\'s Continuous Delivery Build System for Dynamic Infrastructure","description":"[//]: # (Copyright Jiaqi Liu)","date":"2022-06-30T00:00:00.000Z","formattedDate":"June 30, 2022","tags":[{"label":"CI/CD","permalink":"/aergia/blog/tags/ci-cd"}],"readingTime":4.165,"hasTruncateMarker":true,"authors":[{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"screwdriver","title":"Open Sourcing Screwdriver - Yahoo\'s Continuous Delivery Build System for Dynamic Infrastructure","authors":["jiaqi"],"tags":["CI/CD"]},"prevItem":{"title":"Docker cAdvisor","permalink":"/aergia/blog/docker-c-advisor"},"nextItem":{"title":"OpenVPN","permalink":"/aergia/blog/openvpn"}},"content":"\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\nContinuous Delivery enables software development teams to move faster and adapt to users\' needs quicker by reducing the\\ninherent friction associated with releasing software changes. Yahoo\'s engineering has modernized as it has embraced\\nContinuous Delivery as a strategy for improving product quality and engineering agility. All our active products deliver\\nfrom commit to production with full automation and this has greatly improved Yahoo\'s ability to deliver products.\\n\\nPart of what enabled Yahoo to make Continuous Delivery at scale a reality was our improved build and release tooling.\\nNow, we are open sourcing an adaptation of our code as [Screwdriver.cd](http://screwdriver.cd/), a new streamlined build\\nsystem designed to enable Continuous Delivery to production at scale for dynamic infrastructure.\\n\\nSome of the key design features of Screwdriver have helped Yahoo achieve Continuous Delivery at scale. At a high level\\nthese are:\\n\\n- Making deployment pipelines easy\\n- Optimizing for trunk development\\n- Making rolling back easy\\n\\n**Easy deployment pipelines**: Deployment pipelines that continuously test, integrate, and deploy code to production\\ngreatly reduce the risk of errors and reduce the time to get feedback to developers. The challenge for many groups had\\nbeen that pipelines were cumbersome to setup and maintain. We designed a solution that made pipelines easy to configure\\nand completely self-service for any developer. By managing the pipeline configuration in the code repository Screwdriver\\nallows developers to configure pipelines in a manner familiar to them, and as a bonus, to easily code review pipeline\\nchanges too.\\n\\n**Trunk development**: Internally, we encourage workflows where the trunk is always shippable. Our teams use a modified\\n[GitHub flow](https://guides.github.com/introduction/flow/) for their workflows. Pull Requests (PRs) are the entry point\\nfor running tests and ensuring code that entered the repository has been sufficiently tested. Insisting on formal PRs\\nalso improves the quality of our code reviews.\\n\\nTo ensure trunks are shippable, we enable functional testing of code in the PRs. Internally, this is a configuration\\nbaked into pipelines that dynamically allocates compute resources, deploys the code, and runs tests. These tests include\\nweb testing using tools like Selenium. These dynamically-allocated resources are also available for a period after the\\nPR build, allowing engineers to interact with the system and review visual aspects of their changes.\\n\\n**Easy rollbacks**: To allow for easy code rollbacks, we allow phases of the pipeline to be re-run at a previously-saved\\nstate. We leverage features in our PaaS to handle the deployment, but we store and pass metadata to enable us to re-run\\nfrom a specific git SHA with the same deployment data. This allows us to roll back to a previous state in production.\\nThis design makes rolling back as easy as selecting a version from a dropdown menu and clicking \\"deploy\\". Anyone with\\nwrite access to the project can make this change. This helped us move teams to a DevOps model where developers were\\nresponsible for the production state.\\n\\nThe successful growth of Screwdriver over the past 5 years at Yahoo has today led to Screwdriver being synonymous with\\nContinuous Delivery within the company. **Screwdriver handles over 25,000+ builds per day and 12,000+ daily git commits\\nas a single shared entrypoint for Yahoo. It supports multiple languages and handles both virtual machine and\\ncontainer-based builds and deployment**.\\n\\n![Error screwdriver-example.png](./screwdriver-example.png)\\n\\nScrewdriver.cd\'s architecture is comprised of four main components: a frontend for serving content to the user, a\\nstateless API that orchestrates between user interactions and build operations, the execution engines (Docker Swarm,\\nKubernetes, etc.) that checkout source code and execute in containers, and the launcher that executes and monitors\\ncommands inside the container.\\n\\nThe diagram below shows this architecture overlaid with a typical developer flow.\\n\\n![Error sd-workflow.png](./sd-workflow.png)\\n\\nTo give some context around our execution engines, internal Screwdriver started as an abstraction layer on top of\\nJenkins and used Docker to provide isolation, common build containers, etc. We used features provided by Jenkins plugins\\nto leverage existing work around coverage and test reports. However, as Screwdriver usage continued to climb, it outgrew\\na single Jenkins cluster. So in order to grow to our needs, we added capabilities in Screwdriver that allowed us to\\nscale horizontally while also adding capabilities to schedule pipelines across a number of Jenkins clusters. As we\\nscaled Screwdriver, we used less from Jenkins and built more supporting services utilizing our cloud infrastructure. The\\nopen-source version is focused on Kubernetes and Docker Swarm as our primary supported execution engines."},{"id":"openvpn","metadata":{"permalink":"/aergia/blog/openvpn","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-05-27-openvpn/index.md","source":"@site/blog/2022-05-27-openvpn/index.md","title":"OpenVPN","description":"[//]: # (Copyright Jiaqi Liu)","date":"2022-05-27T00:00:00.000Z","formattedDate":"May 27, 2022","tags":[{"label":"Security","permalink":"/aergia/blog/tags/security"}],"readingTime":13.715,"hasTruncateMarker":true,"authors":[{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"}],"frontMatter":{"slug":"openvpn","title":"OpenVPN","authors":["jiaqi"],"tags":["Security"]},"prevItem":{"title":"Open Sourcing Screwdriver - Yahoo\'s Continuous Delivery Build System for Dynamic Infrastructure","permalink":"/aergia/blog/screwdriver"},"nextItem":{"title":"Add Custom ASCII Banner Logo to SSH Login Screen","permalink":"/aergia/blog/ssh-ascii-banner"}},"content":"\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\n[Download](https://openvpn.net/community-downloads/)\\n\\n```bash\\n./configure\\nmake\\nsudo make install\\n```\\n\\nalias openvpn=\\"/usr/local/sbin/openvpn\\"\\n\\nOpenVPN\\n-------\\n\\nIt is necessary to secure and protect the data transmitted on a wide network of Internet. One use case is that more and\\nmore enterprises offer their customers or business partners a protected access to relevant data for their business\\nrelations such as ordering formulae or stock data. Virtual Private Networks (VPNs) were created out of a greater need\\nfor such secured communication across an otherwise unprotected infrastructure, such as internet, over private channels,\\nwhere the community at large isn\'t able to eavesdrop\\n\\nwe have three typical scenarios for VPN solutions in modern enterprises as follows:\\n\\n1. An intranet spanning over several locations of a company\\n2. Access for home or field workers with changing IPs, mobile devices, and centralized protection\\n3. An extranet for customers or business partners\\n\\nEach of these typical scenarios requires special security considerations and setups. The external home workers will need\\ndifferent access to servers in the company than the customers and business partners. In fact, access for business\\npartners and customers must be restricted severely.\\n\\n### Computer Networks Basics\\n\\nTo understand VPN, some basic network concepts need to be understood. All data exchange in computer networks is based on\\n**protocols**. Protocols are like languages or rituals that must be used between communication partners in networks.\\nWithout the correct use of the correct protocol, communication fails.\\n\\n#### Protocols and Layers\\n\\nThere are a large number of protocols involved in any action we take when we access the Internet or a PC in our local\\nnetwork. Our **Network Interface Card (NIC)** will communicate with a hub, a switch, or a router. Our application will\\ncommunicate with its partner on a server on another PC, and many more protocol-based communication procedures are\\nnecessary to exchange data.\\n\\nBecause of this, the **Open Systems Interconnection (OSI) specification** was created. Every protocol used in today\'s\\nnetworks can be classified by this scheme. The OSI specification defines seven numbered layers of data exchange which\\nstart at layer 1 (the physical layer) of the underlying network media (electrical, optical, or radio signals) and span\\nup to layer 7 (the application layer), where applications on PCs communicate with each other.\\n\\nThe layers of the OSI model are as follows:\\n\\n1. **Physical layer**: Sending and receiving through the hardware\\n2. **Data link layer**: Encoding and decoding data packets into bits\\n3. **Network layer**: Switching, routing, addressing, error handling, and so on\\n4. **Transport layer**: End-to-end error recovery and flow control\\n5. **Session layer**: Establishing connections and sessions between applications\\n6. **Presentation layer**: Translating between application data formats and network formats\\n7. **Application layer**: Application-specific protocols\\n\\n_In the Internet, however, a slightly different approach is used_. The Internet is mainly based on the **Internet\\nProtocol (IP)**.\\n\\nThe layers of the IP model are as follows:\\n\\n1. **Link layer**: A concatenation of OSI layers 1 and 2 (the physical and data link layers).\\n2. **Network layer**: Comprising the network layer of the OSI model\\n3. **Transport layer**: Comprising protocols, such as **Transmission Control Protocol (TCP)** and **User Datagram\\n   Protocol (UDP)**, which are the basis for protocols of the application layer.\\n4. **Application layer**: Concatenation of OSI layers 5 through 7 (the session, presentation, and application layers).\\n\\nA TCP/IP network packet consists of two parts - header and data. The header is a sort of label containing metadata on\\nsender, recipient, and administrative information for the transfer. On the networking level of an Ethernet network these\\npackets are called frames. In the context of the Internet Protocol these packets are called datagrams, Internet datagrams,\\nIP datagrams, or simply **packets**\\n\\nSo what do VPNs do? **VPN software takes IP packets or Ethernet frames and wraps them into another packet**.\\nSpecifically:\\n\\n* Whole network packets (frames, datagrams) consisting of header and data are _wrapped_ into new packets\\n* All data, including metadata, such as recipient and sender, are encrypted\\n* The new packets are labeled with new headers containing meta-information about the VPN and are addressed to the VPN\\n  partner\\n\\nAll VPN software systems differ only in the special way of _wrapping_ and _locking_ the data.\\n\\n#### Tunneling and Overhead\\n\\nVPN technology is often called **tunneling** because the data in a VPN connection is protected from the Internet, as the\\nwalls of a road or rail tunnel protect the traffic in the tunnel from the weight of stone of the mountain above. Let\'s\\nnow have a closer look at how the VPN software does this.\\n\\n![Error loading vpn-tunneling-and-overhead.png](./vpn-tunneling-and-overhead.png)\\n\\nThe VPN software in the locations A and B encrypts and decrypts the data and sends it through the tunnel. Like cars or\\ntrains in a tunnel, the data cannot go anywhere else but to the other tunnel endpoint (if they are properly routed).\\n\\nThe following are put together and wrapped into one new package:\\n\\n* Tunnel information (such as the address of the other endpoint)\\n* Encryption data and methods\\n* The original IP packet (or network frame)\\n\\nThe new package is then sent to the other tunnel endpoint. The payload of this package now holds the complete IP packet\\n(or network frame), but in an encrypted form. It is, therefore, not readable to anyone who does not possess the right\\nkey. The new header of the packet simply contains the addresses of the sender, recipient, and other metadata that is\\nnecessary for and provided by the VPN software that is used.\\n\\n![Error loading vpn-wrapping.png](./vpn-wrapping.png)\\n\\nPerhaps you have noticed that the amount of data that is sent grows during the process of \'wrapping\'. Depending on the\\nVPN software used, this so-called **overhead** can become a very important factor. The overhead is the difference\\nbetween the net data that is sent to the tunnel software and the gross data that is sent through the tunnel by the VPN\\nsoftware. If a file of 1MB is sent from user A to user B, and this file causes 1.5MB traffic in the tunnel, then the\\noverhead would be 50%, a very high level indeed (note that every protocol that is used causes overhead, so not all of\\nthat 50% might be the fault of the VPN solution.). The overhead caused by the VPN software depends on the amount of\\norganizational (meta-) data and the encryption used. Whereas the first depends only on the VPN software used, the latter\\nis simply a matter of choice between security and speed. In other words, the better the cipher you use for encryption,\\nthe more overhead you will produce. _Speed versus security is your choice_.\\n\\n#### VPN Concepts\\n\\n##### A Proposed Standard for Tunneling\\n\\nIn principle, tunneling can be done on almost all layers of the OSI model. The **General Routing Encapsulation (GRE)**\\nprovides a standard for tunneling data, which was defined in 1994 in Request for Comments (**RFCs**) 1701 and 1702, and\\nlater in RFCs 2784 and 2890. Perhaps because this definition is not a protocol definition, but more or less a standard\\nproposal on how to tunnel data, this implementation has found its way into many devices and has become the basis for\\nother protocols.\\n\\n##### Protocols Implemented on OSI Layer 2\\n\\nVPN technologies residing in layer 2 can theoretically tunnel any kind of packet. In most cases a virtual\\n**Point-to-Point Protocol (PPP)** device is established, which is used to connect to the other tunnel endpoint. A PPP\\ndevice is normally used for modem or DSL connections.\\n\\n4 well known layer-2 VPN technologies, which are defined by RFCs, use encryption methods and provide user\\nauthentication, as follows:\\n\\n1. The **Point to Point Tunneling Protocol (PPTP)**, RFC 2637, which was developed with the help of Microsoft, is an\\n   expansion of the PPP. It is integrated in all newer Microsoft operating systems. PPTP uses GRE for encapsulation and\\n   can tunnel IP, IPX, and other protocols over the Internet. The main disadvantage is the restriction that there can\\n   only be one tunnel at a time between communication partners.\\n2. The **Layer 2 Forwarding (L2F)**, RFC 2341, was developed almost at the same time by other companies, including\\n   Cisco, and offers more possibilities than PPTP, especially regarding tunneling of network frames and multiple\\n   simultaneous tunnels.\\n3. The **Layer 2 Tunneling Protocol (L2TP)**, RFC 2661, is accepted as an industry standard and is being widely used by\\n   Cisco and other manufacturers. Its success is based on the fact that it combines the advantages of L2F and PPTP\\n   without suffering their drawbacks. Even though it does not provide its own security mechanisms, it can be combined\\n   with technologies offering such mechanisms, such as IPsec (see the section\\n   [_Protocols Implemented on OSI Layer 3_](#protocols-implemented-on-osi-layer-3)).\\n4. The **Layer 2 Security Protocol (L2Sec)**, RFC 2716, was developed to provide a solution to the security flaws of\\n   IPsec. Even though its overhead is rather big, the security mechanisms that are used are secure, because mainly\\n   SSL/TLS is used\\n\\n##### Protocols Implemented on OSI Layer 3\\n\\n**IPsec (Internet Protocol Security)** is the most widespread tunneling technology. In fact it is a more complex set of\\nprotocols, standards, and mechanisms than a single technology.\\n\\nIPsec was developed as an Internet Security Standard on layer 3 and has been standardized by the Internet Engineering\\nTask Force (IETF) since 1995. IPsec can be used to encapsulate any traffic of application layers, but no traffic of\\nlower network layers. Network frames, IPX packets, and broadcast messages cannot be transferred, and network address\\ntranslation is only possible with restrictions.\\n\\nNevertheless IPsec can use a variety of encryption mechanisms, authentication protocols, and other security\\nassociations. IPsec software exists for almost every platform.\\n\\nThe main advantage of IPsec is the fact that it is being used everywhere. An administrator can choose from a large\\nnumber of hardware devices, software implementations, and administration frontends to provide networks with a secure\\ntunnel.\\n\\nThere are two methods that IPsec uses:\\n\\n1. **Tunnel mode**: All IP packets are encapsulated in a new packet and sent to the other tunnel endpoint, where the VPN\\n   software unpacks them and forwards them to the recipient. In this way the IP addresses of sender and recipient and\\n   all other metadata are protected.\\n2. **Transport mode**: In transport mode, only the payload of the data section is encrypted and encapsulated. In this\\n   way the overhead becomes significantly smaller than in tunnel mode, but an attacker can easily read the metadata and\\n   find out who is communicating with whom. However the data is encrypted and therefore protected, which makes IPsec a\\n   real \'private\' VPN solution.\\n\\n##### Protocols Implemented on OSI Layer 4\\n\\n### What is a VPN\\n\\nSimply put, **a VPN allows an administrator to create a \\"local\\" network between multiple computers on varying network\\nsegments**. In some instances, those machines can be on the same LAN, they can be distant from each other across the\\nvast Internet, or they can even be connected across a multitude of connection media such as wireless uplinks, satellite,\\ndial-up-networking, and so on. The P in VPN comes from the added protection to make that virtual network private.\\nNetwork traffic that is flowing over a VPN is often referred to as **inside the (VPN) tunnel**, compared to all the\\nother traffic that is **outside the tunnel**.\\n\\nIn the following figure, network traffic is shown as it traditionally traverses across multiple network segments and the\\ngeneral Internet. Here, this traffic is relatively open to inspection and analysis, which is insecure:\\n\\n![Error loading vpn-insecure-network.png](./vpn-insecure-network.png)\\n\\nWhen a VPN is used, the traffic inside the tunnel is no longer identifiable. Here is an example of the traffic within a\\nVPN. While the VPN itself is routed across the Internet like in the preceding figure, devices along the network path\\nonly see VPN traffic; those devices are completely unaware of what is being transmitted inside the private tunnel.\\nProtected protocols, such as HTTPS and SSH, will still be protected inside the tunnel from other VPN users, but will be\\nadditionally unidentifiable from outside the tunnel. A VPN not only encrypts the traffic within, it hides and protects\\nindividual data streams from those outside the tunnel.\\n\\n![Error loading vpn-secure.png](./vpn-secure.png)\\n\\nOpenVPN is often called an SSL-based VPN, as it uses the SSL/TLS protocol to secure the connection. However, OpenVPN\\nalso uses HMAC in combination with a digest (or hashing) algorithm for ensuring the integrity of the packets delivered.\\nIt can be configured to use pre-shared keys as well as X.509 certificates. These features are not typically offered by\\nother SSL-based VPNs.\\n\\nFurthermore, OpenVPN uses a **virtual network adapter (a tun or tap device)** as an interface between the user-level\\nOpenVPN software and the operating system. In general, any operating system that has support for a tun/tap device can\\nrun OpenVPN. This currently includes Linux, Free/Open/NetBSD, Solaris, AIX, Windows, and Mac OS, as well as iOS/Android\\ndevices. For all these platforms, client software needs to be installed, which sets OpenVPN apart from client-less\\nor web-based VPNs.\\n\\nOpenVPN has the notion of a control channel and a data channel, both of which are encrypted and secured differently.\\nHowever, all traffic passes over a single UDP or TCP connection. The control channel is encrypted and secured using\\nSSL/TLS, the data channel is encrypted using a custom encryption protocol.\\n\\n#### OpenVPN Packages\\n\\nThere are several OpenVPN packages available on the Internet:\\n\\n* The open source or community version of OpenVPN\\n* OpenVPN Access Server, the closed-source commercial offering by OpenVPN Inc.\\n* The mobile platform versions of OpenVPN for both Android and iOS (part of the code is closed-source, as a requirement\\n  of Apple)\\n\\n##### OpenVPN Internals\\n\\n###### The Tun/Tap Driver\\n\\nOne of the basic building blocks of OpenVPN is the tun/tap driver. The concept of the tun/tap driver comes from the\\nUnix/Linux world, where it is often natively available as part of the operating system. This is a virtual network\\nadapter that is treated by the operating system as either a point-to-point adapter (tun-style) for IP-only traffic or as\\na full virtual Ethernet adapter for all types of traffic (tap-style). At the backend of this adapter is an application,\\nsuch as OpenVPN, to process the incoming and outgoing traffic. Linux, Free/Open/NetBSD, Solaris and Mac OS include a tun\\nkernel driver, which is capable of both tun-style and tap-style operations.\\n\\n![Error loading vpn-tun-tap.png](./vpn-tun-tap.png)\\n\\nThe flow of traffic from a user application via OpenVPN is depicted in the preceding diagram. In the diagram, the\\napplication is sending traffic to an address that is reachable via the OpenVPN tunnel. The steps are as follows:\\n\\n1. The application hands over the packet to the operating system.\\n2. The OS decides using normal routing rules that the packet needs to be routed via the VPN.\\n3. The packet is then forwarded to the kernel tun device.\\n4. The kernel tun device forwards the packets to the (user-space) OpenVPN process.\\n5. The OpenVPN process encrypts and signs the packet, fragments it if necessary, and then hands it over to the kernel\\n   again to send it to the address of the remote VPN endpoint.\\n6. The kernel picks up the encrypted packet and forwards it to the remote VPN endpoint, where the same process is\\n   reversed. It can also be seen in this diagram that the performance of OpenVPN will always be less than that of a\\n   regular network connection. For most applications, the performance loss is minimal and/or acceptable. However, for\\n   speeds greater than 1GBps, there is a performance bottleneck, both in terms of bandwidth and latency.\\n\\n### Additional OpenVPN Resources\\n\\n* [Free Profile](https://www.vpnbook.com/) - OpenVPN tab (need VPN access first)\\n* [Bypass OpenVPN for particular IP](https://serverfault.com/a/487471)\\n\\n#### Config File\\n\\nWhen people talk about \\"openvpn client config\\", they are referring to the `.ovpn` files that you drop to the\\n\\"Import Profiles\\" section of OpenVPN. Add those lines to `.ovpn` file after, for example, \\"remote pl226.vpnbook.com 80\\"\\nline\\n\\n#### Contingency Plan\\n\\n* [Lantern](https://github.com/getlantern/download)\\n* [Free VPN for Chrome - VPN Proxy VeePN](https://chrome.google.com/webstore/detail/free-vpn-for-chrome-vpn-p/majdfhpaihoncoakbjgbdhglocklcgno?hl=en)"},{"id":"ssh-ascii-banner","metadata":{"permalink":"/aergia/blog/ssh-ascii-banner","editUrl":"https://github.com/QubitPi/aergia/tree/gh-pages/blog/2022-04-30-ssh-ascii-banner/index.md","source":"@site/blog/2022-04-30-ssh-ascii-banner/index.md","title":"Add Custom ASCII Banner Logo to SSH Login Screen","description":"[//]: # (Copyright Jiaqi Liu)","date":"2022-04-30T00:00:00.000Z","formattedDate":"April 30, 2022","tags":[{"label":"DevOps","permalink":"/aergia/blog/tags/dev-ops"}],"readingTime":1.68,"hasTruncateMarker":true,"authors":[{"name":"Jiaqi Liu","title":"Maintainer of Aergia","url":"https://github.com/QubitPi","imageURL":"https://avatars.githubusercontent.com/u/16126939?v=4","key":"jiaqi"},{"name":"Mike Andreasen","url":"https://guides.wp-bullet.com/add-custom-ascii-banner-logo-to-ssh-login/","imageURL":"https://secure.gravatar.com/avatar/0b12d8ba68100a5d983170f913d20d5e?s=100&d=mm&r=g","key":"mike-andreasen"}],"frontMatter":{"slug":"ssh-ascii-banner","title":"Add Custom ASCII Banner Logo to SSH Login Screen","authors":["jiaqi","mike-andreasen"],"tags":["DevOps"]},"prevItem":{"title":"OpenVPN","permalink":"/aergia/blog/openvpn"}},"content":"\x3c!--truncate--\x3e\\n\\n[//]: # (Copyright Jiaqi Liu)\\n\\n[//]: # (Licensed under the Apache License, Version 2.0 &#40;the \\"License\\"&#41;;)\\n[//]: # (you may not use this file except in compliance with the License.)\\n[//]: # (You may obtain a copy of the License at)\\n\\n[//]: # (    http://www.apache.org/licenses/LICENSE-2.0)\\n\\n[//]: # (Unless required by applicable law or agreed to in writing, software)\\n[//]: # (distributed under the License is distributed on an \\"AS IS\\" BASIS,)\\n[//]: # (WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.)\\n[//]: # (See the License for the specific language governing permissions and)\\n[//]: # (limitations under the License.)\\n\\nIn the early 90\'s ASCII art became a thing. It was a way to make logos using regular ASCII characters to decorate readme\\nfiles and add some branding. Nowadays we can generate these banners using free tools like [Text to ASCII Art Generator].\\nIt can be used to create a server login banner that is displayed each time people log in via SSH.\\n\\n![./example.png](./example.png)\\n\\nFirs generate a ASCII logo with the [Text to ASCII Art Generator]. Then open up message of the day file\\n\\n```bash\\nsudo nano /etc/motd\\n```\\n\\nAdd a text such as\\n\\n```bash\\nThe programs included with the Debian GNU/Linux system are free software;\\nthe exact distribution terms for each program are described in the\\nindividual files in /usr/share/doc/*/copyright.\\n\\nDebian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent\\npermitted by applicable law.\\n\\n\\n______     _              ______      _\\n| ___ \\\\   (_)             |  _  \\\\    | |\\n| |_/ /_ _ _  ___  _ __   | | | |__ _| |_ __ _\\n|  __/ _` | |/ _ \\\\| \'_ \\\\  | | | / _` | __/ _` |\\n| | | (_| | | (_) | | | | | |/ / (_| | || (_| |\\n\\\\_|  \\\\__,_|_|\\\\___/|_| |_| |___/ \\\\__,_|\\\\__\\\\__,_|\\n```\\n\\nSave the file and open a new SSH session and log in, we should be greeted with our beautiful banner\\n\\n[Text to ASCII Art Generator]: http://patorjk.com/software/taag/"}]}')}}]);