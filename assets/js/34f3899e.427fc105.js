"use strict";(self.webpackChunkhashicorp_aws=self.webpackChunkhashicorp_aws||[]).push([[5492],{1316:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=i(7624),t=i(2172);const a={sidebar_position:9,title:"Kong API Gateway"},r="Deploying Kong API Gateway",o={id:"kong",title:"Kong API Gateway",description:"[//]: # (Copyright Jiaqi Liu)",source:"@site/docs/kong.md",sourceDirName:".",slug:"/kong",permalink:"/hashicorp-aws/docs/kong",draft:!1,unlisted:!1,editUrl:"https://github.com/QubitPi/hashicorp-aws/tree/master/docs/docs/kong.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"Kong API Gateway"},sidebar:"tutorialSidebar",previous:{title:"General Troubleshooting",permalink:"/hashicorp-aws/docs/troubleshooting"}},l={},c=[{value:"Setup",id:"setup",level:2},{value:"SSL",id:"ssl",level:3},{value:"Nginx Config",id:"nginx-config",level:3},{value:"General Deployment",id:"general-deployment",level:2},{value:"AWS Credentials",id:"aws-credentials",level:3},{value:"Installing HashiCorp Packer &amp; Terraform",id:"installing-hashicorp-packer--terraform",level:3},{value:"Getting HashiCorp Deployment Tool",id:"getting-hashicorp-deployment-tool",level:3},{value:"Defining Packer Variables",id:"defining-packer-variables",level:3},{value:"Defining Terraform Variables",id:"defining-terraform-variables",level:3},{value:"Building AMI Image",id:"building-ami-image",level:3},{value:"Deploying to EC2",id:"deploying-to-ec2",level:3},{value:"Deployment via Screwdriver CD",id:"deployment-via-screwdriver-cd",level:2},{value:"Deployment via HACP",id:"deployment-via-hacp",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Security Group Isn&#39;t Working as Expected in AWS",id:"security-group-isnt-working-as-expected-in-aws",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"deploying-kong-api-gateway",children:"Deploying Kong API Gateway"}),"\n",(0,s.jsxs)(n.p,{children:["hashicorp-aws deploys ",(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/docs.konghq.com/gateway/latest/",children:"Kong API Gateway"})," in the following way:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Deploys ",(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/docs.konghq.com/gateway/latest/",children:"Kong API Gateway"})," in ",(0,s.jsx)(n.strong,{children:"HTTP"})," mode"]}),"\n",(0,s.jsxs)(n.li,{children:["Deploys a reverse proxy Nginx in front of the ",(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/docs.konghq.com/gateway/latest/",children:"Kong API Gateway"})," in the same EC2 to redirect all HTTPS request to\ngateway's\n",(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/docs.konghq.com/gateway/latest/production/networking/default-ports/",children:"corresponding"})," HTTP\nports"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The diagram below illustrates the resulting deployment"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Error loading kong-deployment-diagram.png",src:i(7948).c+"",width:"2778",height:"728"})}),"\n",(0,s.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(n.h3,{id:"ssl",children:"SSL"}),"\n",(0,s.jsxs)(n.p,{children:["First, please follow the ",(0,s.jsx)(n.a,{href:"setup#setup",children:"general setup guide"})," with some Nginx config modifications\n",(0,s.jsx)(n.a,{href:"#nginx-config",children:"discussed in the next section"})]}),"\n",(0,s.jsx)(n.h3,{id:"nginx-config",children:"Nginx Config"}),"\n",(0,s.jsx)(n.p,{children:"hashicorp-aws assumes the following for all of its management app deployment:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Business logic and SSL/HTTP are separate concerns and must be decoupled from each other"})}),"\n",(0,s.jsx)(n.p,{children:"That being said, hashicorp-aws deploys Kong completely without SSL and spins up a Nginx rever proxy to handle the\nHTTPS redirections to Kong's HTTP ports. Therefore:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["hashicorp-aws uses a ",(0,s.jsx)(n.a,{href:"https://github.com/QubitPi/docker-kong",children:"customized fork of docker-kong"})," to\n",(0,s.jsx)(n.a,{href:"https://github.com/QubitPi/docker-kong/pull/1",children:"fully separate the\napp and SSL"}),",\nand, therefore,"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["the Nginx config needs multiple ",(0,s.jsx)(n.a,{href:"https://www.nginx.com/resources/wiki/start/topics/examples/server_blocks/",children:"servers"}),"\nto ensure all HTTPS ports are mapped to their corresponding HTTP ports as shown in the config snippet below:"]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["All relevant HTTP and HTTPS ports are listed in\n",(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/docs.konghq.com/gateway/latest/production/networking/default-ports/",children:"Kong's documentation here"}),". In general, our Nginx should **listen on an HTTPS port\nand ",(0,s.jsx)(n.code,{children:"proxy_pass"})," to an HTTP port. For example, ports 8443 and 8444 are ",(0,s.jsx)(n.code,{children:"proxy_pass"}),"ed to 8000 and 8001, respectively,\nboth of which are listed in the doc."]}),(0,s.jsx)(n.p,{children:"One special case is HTTP port 8002, which is the Kong manager UI port. hashicorp-aws assigns user specified domain\nto each deployed Kong. Hitting the domain will simply open up a user-friendly UI by this configuration."})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example that modifies the ",(0,s.jsx)(n.a,{href:"setup#configuring-reverse-proxy-on-nginx",children:"general Nginx config"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n...\n\nserver {\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n    server_name my.kongdomain.com;\n\n    location / {\n        proxy_pass http://localhost:8002;\n    }\n\n    listen [::]:443 ssl ipv6only=on;\n    listen 443 ssl;\n    ssl_certificate /etc/ssl/certs/server.crt;\n    ssl_certificate_key /etc/ssl/private/server.key;\n}\n\nserver {\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n    server_name my.kongdomain.com;\n\n    location / {\n        proxy_pass http://localhost:8000;\n    }\n\n    listen [::]:8443 ssl ipv6only=on;\n    listen 8443 ssl;\n    ssl_certificate /etc/ssl/certs/server.crt;\n    ssl_certificate_key /etc/ssl/private/server.key;\n}\nserver {\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n    server_name my.kongdomain.com;\n\n    location / {\n        proxy_pass http://localhost:8001;\n    }\n\n    listen [::]:8444 ssl ipv6only=on;\n    listen 8444 ssl;\n    ssl_certificate /etc/ssl/certs/server.crt;\n    ssl_certificate_key /etc/ssl/private/server.key;\n}\n\n...\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Note how we changed the HTTPS' default port forwarding and added two extra server blocks for other Kong's ports."}),"\n",(0,s.jsx)(n.h2,{id:"general-deployment",children:"General Deployment"}),"\n",(0,s.jsx)(n.h3,{id:"aws-credentials",children:"AWS Credentials"}),"\n",(0,s.jsx)(n.p,{children:"The following environment variables need to be defined:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"setup#aws",children:"AWS_ACCESS_KEY_ID"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"setup#aws",children:"AWS_SECRET_ACCESS_KEY"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"installing-hashicorp-packer--terraform",children:"Installing HashiCorp Packer & Terraform"}),"\n",(0,s.jsx)(n.p,{children:"We will go through deployment using Packer & Terraform command line tools which can be installed by following the\ninstructions below:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/hashicorp-packer/packer/install",children:"Installing Packer"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/hashicorp-terraform/terraform/install",children:"Installing Terraform"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"getting-hashicorp-deployment-tool",children:"Getting HashiCorp Deployment Tool"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"git clone https://github.com/QubitPi/hashicorp-aws.git\n"})}),"\n",(0,s.jsx)(n.h3,{id:"defining-packer-variables",children:"Defining Packer Variables"}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/hashicorp-packer/packer/guides/hcl/variables#from-a-file",children:"HashiCorp Packer variable values file"})," named ",(0,s.jsx)(n.strong,{children:"aws-kong.auto.pkrvars.hcl"})," under\n",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/QubitPi/hashicorp-aws/tree/master/hashicorp/kong/images",children:"hashicorp-aws/hashicorp/kong/images"})})," directory with the following contents:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title=hashicorp-aws/hashicorp/kong/images/aws-kong.auto.pkrvars.hcl",children:'aws_image_region                 = "us-east-1"\nami_name                         = "my-kong-ami"\ninstance_type                    = "t2.small"\naws_kong_ssl_cert_file_path      = "/path/to/ssl.crt"\naws_kong_ssl_cert_key_file_path  = "/path/to/ssl.key"\naws_kong_nginx_config_file_path  = "/path/to/nginx.conf"\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"aws_image_region"})," is the ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html#Concepts.RegionsAndAvailabilityZones.Availability",children:"image region"})," of ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html",children:"AWS AMI"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ami_name"})," is the published AMI name; it can be arbitrary"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"instance_type"})," is the recommended ",(0,s.jsx)(n.a,{href:"https://aws.amazon.com/ec2/instance-types/",children:"AWS EC2 instance type"})," running this image"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"aws_kong_ssl_cert_file_path"})," is the absolute path or the path relative to ",(0,s.jsx)(n.code,{children:"hashicorp-aws/hashicorp/kong/images"})," of\nthe ",(0,s.jsx)(n.a,{href:"setup#ssl",children:"SSL certificate file"})," for the Kong API Gateway domain"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"aws_kong_ssl_cert_key_file_path"}),"  is the absolute path or the path relative to ",(0,s.jsx)(n.code,{children:"hashicorp-aws/hashicorp/kong/images"})," of the ",(0,s.jsx)(n.a,{href:"setup#ssl",children:"SSL certificate key file"})," for the Kong API Gateway domain"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"aws_kong_nginx_config_file_path"})," is the absolute path or the path relative to ",(0,s.jsx)(n.code,{children:"hashicorp-aws/hashicorp/kong/images"}),"\nof the ",(0,s.jsx)(n.a,{href:"#nginx-config",children:"Nginx config file"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"defining-terraform-variables",children:"Defining Terraform Variables"}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/hashicorp-terraform/terraform/language/values/variables#variable-definitions-tfvars-files",children:"HashiCorp Terraform variable values file"})," named ",(0,s.jsx)(n.strong,{children:"aws-kong.auto.tfvars"})," under\n",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"https://github.com/QubitPi/hashicorp-aws/tree/master/hashicorp/kong/instances",children:"hashicorp-aws/hashicorp/kong/instances"})})," directory with the following contents:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",metastring:"title=hashicorp-aws/hashicorp/kong/instances/aws-kong.auto.tfvars",children:'aws_deploy_region   = "us-east-1"\nami_name            = "my-kong-ami"\ninstance_type       = "t2.small"\nec2_instance_name   = "My Kong API Gateway"\nec2_security_groups = ["My Kong API Gateway Security Group"]\nroute_53_zone_id    = "MBS8YLKZML18VV2E8M8OK"\ngateway_domain      = "gateway.mycompany.com"\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"aws_deploy_region"})," is the ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html#Concepts.RegionsAndAvailabilityZones.Availability",children:"EC2 runtime region"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ami_name"})," is the name of the published AMI; ",(0,s.jsxs)(n.strong,{children:["it must be the same as the ",(0,s.jsx)(n.code,{children:"ami_name"})," in\n",(0,s.jsx)(n.a,{href:"#defining-packer-variables",children:"Packer variable file"})]})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"instance_type"})," is the chosen ",(0,s.jsx)(n.a,{href:"https://aws.amazon.com/ec2/instance-types/",children:"AWS EC2 instance type"})," at runtime"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ec2_instance_name"})," is the deployed EC2 name as appeared in the instance list of AWS console; it can be arbitrary"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ec2_security_groups"})," is the ",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-security-groups.html",children:"AWS Security Group"})," ",(0,s.jsx)(n.em,{children:"name"})," (yes, not ID, but name...)"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"gateway_domain"})," is the SSL-enabled domain that will serve ",(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/docs.konghq.com/gateway/latest/kong-manager/",children:"Kong manager UI"})]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["Although the ",(0,s.jsx)(n.code,{children:"gateway_domain"})," is a public identity, hashicorp-aws will bind a ",(0,s.jsx)(n.strong,{children:"private IP"})," address to this domain"]})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"route_53_zone_id"})," is the AWS Route 53 hosted Zone ID that hosts the domain ",(0,s.jsx)(n.code,{children:"gateway.mycompany.com"})]}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsx)(n.p,{children:"To find the zone ID in AWS Route 53, we can:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Sign in to the AWS Management Console"}),"\n",(0,s.jsxs)(n.li,{children:["Open the Route 53 console at ",(0,s.jsx)(n.a,{href:"https://console.aws.amazon.com/route53/",children:"https://console.aws.amazon.com/route53/"})]}),"\n",(0,s.jsx)(n.li,{children:"Select Hosted zones in the navigation pane"}),"\n",(0,s.jsx)(n.li,{children:"Find the requested ID in the top level Hosted Zones summary in the Route 53 section"}),"\n"]})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"building-ami-image",children:"Building AMI Image"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'cd hashicorp-aws/hashicorp/kong/images\npacker init .\npacker validate -var "skip_create_ami=true" .\npacker build -var "skip_create_ami=false" .\n'})}),"\n",(0,s.jsx)(n.h3,{id:"deploying-to-ec2",children:"Deploying to EC2"}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Depending on the ",(0,s.jsx)(n.a,{href:"#defining-packer-variables",children:"AMI"})," and ",(0,s.jsx)(n.a,{href:"#defining-terraform-variables",children:"EC2"})," configs, ",(0,s.jsx)(n.strong,{children:"please be aware\nAWS credit charges shall incur after the following commands execute"})]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ../instances\nterraform init\nterraform validate\nterraform apply -auto-approve\n"})}),"\n",(0,s.jsx)(n.h2,{id:"deployment-via-screwdriver-cd",children:"Deployment via Screwdriver CD"}),"\n",(0,s.jsxs)(n.p,{children:["hashicorp-aws also support deployment using ",(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/screwdriver-cd-homepage/",children:"Screwdriver CD"})," with this ",(0,s.jsx)(n.a,{href:"https://github.com/QubitPi/kong-api-gateway-release-definition-template",children:"Kong API Gateway Release Definition Template"})]}),"\n",(0,s.jsx)(n.h2,{id:"deployment-via-hacp",children:"Deployment via HACP"}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"Please try our HACP platform to deploy a Kong instance. It gives us one-click experience that helps us stand up an API\ngateway in a minute."})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"security-group-isnt-working-as-expected-in-aws",children:"Security Group Isn't Working as Expected in AWS"}),"\n",(0,s.jsx)(n.p,{children:"This could happen when we are accessing the deployed gateway from a public IP address, such as our personal computer."}),"\n",(0,s.jsxs)(n.p,{children:["Complying with the best security practice, hashicorp-aws binds ",(0,s.jsx)(n.em,{children:"private"})," EC2 IP to a Route 53 domain. Since it is a\ncommon practice to limit the API gateway access by assigning gateway instance with\n",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/vpc/latest/userguide/security-group-rules.html",children:"inbound rules"}),". hashicorp-aws also manages\nto disable all HTTP request to the gateway. Therefore, any public visit to our deployed gateway instance has to go\nthrough the gateway domain."]}),"\n",(0,s.jsxs)(n.p,{children:["But since the domain is bound by a private IP, accessing the gateway through the domain from public IP source will hit\nthe private IP, which would always fail ",(0,s.jsx)(n.em,{children:"independent"})," of security group configs"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The reason we bind ",(0,s.jsx)(n.em,{children:"private"})," IP to domain is that\n",(0,s.jsx)(n.a,{href:"https://stackoverflow.com/a/24242211",children:"when gateway is used for inter security-group communication, it works\nover private addressing. If we use the public IP address the firewall rule will not recognise the source security group"}),".\nThis is particularly important when the gateway is serving API to downstream services such as frontend APP."]})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"The solution"}),"? To access the gateway manually from our machine, for instance, we should address the instance using the\nPublic DNS record - this will actually be pointed at the private IP address when we hit the DNS name."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, if our instance has public IP ",(0,s.jsx)(n.code,{children:"203.0.113.185"})," and private IP ",(0,s.jsx)(n.code,{children:"10.1.234.12"}),", we are given a public DNS name\nlike ",(0,s.jsx)(n.code,{children:"ec2-203-0-113-185.eu-west-1.compute.amazonaws.com"}),", which will resolve to ",(0,s.jsx)(n.code,{children:"203.0.113.185"})," if queried externally,\nor ",(0,s.jsx)(n.code,{children:"10.1.234.12"})," if queried internally. This will enable our security groups to work as intended. See\n",(0,s.jsx)(n.a,{href:"https://stackoverflow.com/a/24242211",children:"this thread"})," for more details."]})]})}function d(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},7948:(e,n,i)=>{i.d(n,{c:()=>s});const s=i.p+"assets/images/kong-deployment-diagram-0e603dd1e4fb96d8c09f228e1ff31894.png"},2172:(e,n,i)=>{i.d(n,{I:()=>o,M:()=>r});var s=i(1504);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);