"use strict";(self.webpackChunkaergia=self.webpackChunkaergia||[]).push([[4767],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,k=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(k,i(i({ref:t},l),{},{components:n})):a.createElement(k,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2028:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1},i="aergia::docker",s={unversionedId:"recipes/docker",id:"recipes/docker",title:"aergia::docker",description:"Installs the Docker Community Edition (CE) on Ubuntu.",source:"@site/docs/recipes/docker.md",sourceDirName:"recipes",slug:"/recipes/docker",permalink:"/aergia/docs/recipes/docker",draft:!1,editUrl:"https://github.com/QubitPi/aergia/tree/gh-pages/docs/recipes/docker.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Recipes",permalink:"/aergia/docs/category/recipes"},next:{title:"aergia::docker_compose",permalink:"/aergia/docs/recipes/docker-compose"}},c={},p=[{value:"Recipe Details",id:"recipe-details",level:2},{value:"Recipe Verification",id:"recipe-verification",level:2},{value:"Executing the Docker Command Without Sudo (No Included in Recipe)",id:"executing-the-docker-command-without-sudo-no-included-in-recipe",level:2}],l={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"aergiadocker"},"aergia::docker"),(0,r.kt)("p",null,"Installs the ",(0,r.kt)("strong",{parentName:"p"},"Docker Community Edition")," (CE) on ",(0,r.kt)("strong",{parentName:"p"},"Ubuntu"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"aergia::docker")," gives a Chef node not just the Docker service (daemon) but also the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker")," command line utility, or\nthe Docker client.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.docker.com/"},"Docker")," is an application that simplifies the process of managing application processes in\ncontainers. Containers let us run our applications in ",(0,r.kt)("strong",{parentName:"p"},"resource-isolated")," processes. They are similar to virtual\nmachines, but containers are more portable, more resource-friendly, and more dependent on the host operating system."),(0,r.kt)("h2",{id:"recipe-details"},"Recipe Details"),(0,r.kt)("p",null,"The Docker installation package available in the official Ubuntu repository may not be the latest version. To ensure we\nget the latest version, ",(0,r.kt)("inlineCode",{parentName:"p"},"aergia::docker")," installs Docker from the official Docker repository. To do that, this recipe"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"adds a new package source"),(0,r.kt)("li",{parentName:"ol"},"adds the GPG key from Docker to ensure the downloads are valid, and then"),(0,r.kt)("li",{parentName:"ol"},"installs the package.")),(0,r.kt)("p",null,"The recipe effectively executes the following steps in order:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Updates a Chef node's existing list of packages:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Installs a the following prerequisite packages which let ",(0,r.kt)("inlineCode",{parentName:"p"},"apt")," use packages over HTTPS:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install apt-transport-https ca-certificates curl software-properties-common\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Adds the GPG key for the official Docker repository to the Chef node:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Adds the Docker repository to APT sources (This will also update our package database with the Docker packages from\nthe newly added repo.):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"\n')),(0,r.kt)("admonition",{parentName:"li",type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"aergia::docker")," uses ",(0,r.kt)("a",{parentName:"p",href:"https://docs.chef.io/resources/apt_repository/"},"apt_repository Resource")," to complete steps 3\nand 4.")),(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"To verify, after the recipe run, that we have installed from the Docker repo instead of the default Ubuntu repo, we\ncan type"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"apt-cache policy docker-ce\n")),(0,r.kt)("p",{parentName:"admonition"},"We'll see output like this, although the version number for Docker may be different:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"docker-ce:\n  Installed: (none)\n  Candidate: 5:19.03.9~3-0~ubuntu-focal\n  Version table:\n     5:19.03.9~3-0~ubuntu-focal 500\n        500 https://download.docker.com/linux/ubuntu focal/stable amd64 Packages\n")),(0,r.kt)("p",{parentName:"admonition"},"Notice that in this case ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-ce")," is not installed, but the candidate for installation is from the Docker\nrepository for Ubuntu (",(0,r.kt)("inlineCode",{parentName:"p"},"focal"),")."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Installs Docker:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install docker-ce\n")))),(0,r.kt)("h2",{id:"recipe-verification"},"Recipe Verification"),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"aergia::docker")," included and run, Docker should now be installed on Chef node; the daemon is started, and the\nprocess is also enabled to start on boot. Check that it's running with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl status docker\n")),(0,r.kt)("p",null,"The output should be similar to the following, showing that the service is active and running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Output\n\u25cf docker.service - Docker Application Container Engine\n     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n     Active: active (running) since Tue 2020-05-19 17:00:41 UTC; 17s ago\nTriggeredBy: \u25cf docker.socket\n       Docs: https://docs.docker.com\n   Main PID: 24321 (dockerd)\n      Tasks: 8\n     Memory: 46.4M\n     CGroup: /system.slice/docker.service\n             \u2514\u250024321 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\n")),(0,r.kt)("h2",{id:"executing-the-docker-command-without-sudo-no-included-in-recipe"},"Executing the Docker Command Without Sudo (No Included in Recipe)"),(0,r.kt)("p",null,'By default, the docker command can only be run by the root user or by a user in the docker group, which is automatically\ncreated during Docker\'s installation process. We cannot run the docker command without prefixing it with "sudo"\nor without being in the docker group. If we want to avoid typing "sudo" whenever we run the docker command, add our\nusername to the docker group:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo usermod -aG docker ${USER}\n")),(0,r.kt)("p",null,"To apply the new group membership, ",(0,r.kt)("strong",{parentName:"p"},"log out of the server and back in"),", or type the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"su - ${USER}\n")),(0,r.kt)("p",null,"We will be prompted to enter our user's password to continue."),(0,r.kt)("p",null,"Confirm that we user is now added to the docker group by typing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"groups\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Output\nsammy sudo docker\n")),(0,r.kt)("p",null,"If we need to add a user to the docker group that we are not logged in as, declare that username explicitly using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo usermod -aG docker username\n")),(0,r.kt)("p",null,"For example, to enable for both root and jenkins user:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo usermod -aG docker ${USER}\nsudo usermod -aG docker jenkins\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If there are any Jenkins agents running, we should reconnect agent as well for the last command to take effect for the\nagent")))}d.isMDXComponent=!0}}]);