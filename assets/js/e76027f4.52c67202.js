"use strict";(self.webpackChunkhashicorp_aws=self.webpackChunkhashicorp_aws||[]).push([[8808],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=l(a),h=r,d=u["".concat(p,".").concat(h)]||u[h]||m[h]||i;return a?n.createElement(d,s(s({ref:t},c),{},{components:a})):n.createElement(d,s({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3527:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:5,title:"React App"},s=void 0,o={unversionedId:"react",id:"react",title:"React App",description:"[//]: # (Copyright Jiaqi Liu)",source:"@site/docs/5-react.md",sourceDirName:".",slug:"/react",permalink:"/hashicorp-aws/docs/react",draft:!1,editUrl:"https://github.com/QubitPi/hashicorp-aws/tree/gh-pages/docs/5-react.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"React App"},sidebar:"tutorialSidebar",previous:{title:"Elastic Stack (ELK)",permalink:"/hashicorp-aws/docs/elk"},next:{title:"Jersey-Jetty Based Webservice",permalink:"/hashicorp-aws/docs/webservice"}},p={},l=[{value:"Manual Deployment",id:"manual-deployment",level:2},{value:"GitHub Action Automatic Deployment",id:"github-action-automatic-deployment",level:2},{value:"General Template in Downstream Repo",id:"general-template-in-downstream-repo",level:3},{value:"Auxiliary Actions",id:"auxiliary-actions",level:3},{value:"Code Style Checks",id:"code-style-checks",level:4},{value:"Unit Tests",id:"unit-tests",level:4},{value:"Cypress E2E Tests",id:"cypress-e2e-tests",level:4},{value:"Release to NPM",id:"release-to-npm",level:4}],c={toc:l};function m(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"EBS volumes during build time will ",(0,r.kt)("a",{parentName:"li",href:"https://qubitpi.github.io/hashicorp-packer/packer/integrations/hashicorp/amazon/latest/components/builder/ebs#:~:text=Optional%3A-,delete_on_termination,-(bool)%20%2D%20Indicates%20whether"},"automatically be removed")))),(0,r.kt)("h2",{id:"manual-deployment"},"Manual Deployment"),(0,r.kt)("p",null,"The following script variables need to be defined:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html"},(0,r.kt)("strong",{parentName:"a"},"AWS_ACCESS_KEY_ID"))," & ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html"},(0,r.kt)("strong",{parentName:"a"},"AWS_SECRET_ACCESS_KEY"))),(0,r.kt)("admonition",{parentName:"li",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("em",{parentName:"p"},"IAM user")," associated with the credentials above must have the following ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction_access-management.html"},"AWS permissions policies"),":"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"IAMFullAccess"),(0,r.kt)("li",{parentName:"ul"},"AmazonEC2FullAccess"),(0,r.kt)("li",{parentName:"ul"},"AmazonRoute53FullAccess")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"REACT_DIR"),": The local absolute path to the React project repo"),(0,r.kt)("admonition",{parentName:"li",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Should the React App be built with ",(0,r.kt)("a",{parentName:"p",href:"https://create-react-app.dev/docs/adding-custom-environment-variables/#adding-development-environment-variables-in-env"},".env file"),", this file MUST exist at ",(0,r.kt)("inlineCode",{parentName:"p"},"$REACT_DIR/.env")," at this moment. This .env\nfile is essentially the same one mentioned in the ",(0,r.kt)("inlineCode",{parentName:"p"},"HC_CONFIG_DIR")," part below"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"HC_DIR"),": The local absolute path to the ",(0,r.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/hashicorp-aws/"},"hashicorp-aws")," directory")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"HC_CONFIG_DIR"),": The local absolute path to a directory containing the following deployment files:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"SSL cert file located (",(0,r.kt)("inlineCode",{parentName:"p"},"/abs/path/to/hashicorp-aws-config-dir/server.crt"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"SSL cert key file (",(0,r.kt)("inlineCode",{parentName:"p"},"/abs/path/to/hashicorp-aws-config-dir/server.key"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Nginx config file (",(0,r.kt)("inlineCode",{parentName:"p"},"/abs/path/to/hashicorp-aws-config-dir/nginx.conf"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},".env file (",(0,r.kt)("inlineCode",{parentName:"p"},"/abs/path/to/hashicorp-aws-config-dir/.env"),")")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A ",(0,r.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/hashicorp-packer/packer/guides/hcl/variables#from-a-file"},"HashiCorp Packer variable file")," named ",(0,r.kt)("strong",{parentName:"p"},"aws-react.pkrvars.hcl")," with the following\nvariable values (",(0,r.kt)("inlineCode",{parentName:"p"},"/abs/path/to/hashicorp-aws-config-dir/aws-react.pkrvars.hcl"),"):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-hcl"},'aws_image_region                 = "my-aws-region"\nami_name                         = "my-react-app"\ninstance_type                    = "<one of t2.micro/t2.small/t2.medium/t2.large/t2.xlarge/t2.2xlarge>"\nreact_dist_path                  = "../../../../dist"\naws_react_ssl_cert_file_path     = "../../../../hashicorp-aws-config-dir/server.crt"\naws_react_ssl_cert_key_file_path = "../../../../hashicorp-aws-config-dir/server.key"\naws_react_nginx_config_file_path = "../../../../hashicorp-aws-config-dir/nginx.conf"\naws_react_dot_env_file_path      = "../../../../hashicorp-aws-config-dir/filebeat.yml"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A ",(0,r.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/hashicorp-terraform/terraform/language/values/variables#variable-definitions-tfvars-files"},"HashiCorp Terraform variable file")," named ",(0,r.kt)("strong",{parentName:"p"},"aws-react.tfvars")," with the\nfollowing variable values (",(0,r.kt)("inlineCode",{parentName:"p"},"/abs/path/to/hashicorp-aws-config-dir/aws-react.tfvars"),"):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-hcl"},'aws_deploy_region   = "my-aws-region"\nroute_53_zone_id    = "9DQXLTNSN7ZX9P8V2KZII"\nami_name            = "my-react-app"\ninstance_type       = "<one of t2.micro/t2.small/t2.medium/t2.large/t2.xlarge/t2.2xlarge>"\nec2_instance_name   = "My React App"\nec2_security_groups = ["My React App"]\nreact_domain        = "myreactapp.mycompany.com"\n')))))),(0,r.kt)("p",null,"Then we can execute the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/QubitPi/hashicorp-aws/blob/master/hashicorp/react/deploy.sh"},"deploy.sh"))," to manually deploy any React Apps"),(0,r.kt)("h2",{id:"github-action-automatic-deployment"},"GitHub Action Automatic Deployment"),(0,r.kt)("h3",{id:"general-template-in-downstream-repo"},"General Template in Downstream Repo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"env:\n  NODE_VERSION: 16\n  \njobs:\n  hashicorp:\n    name: Generated React dist in GitHub Action, publish its AMI and deploy the AMI to EC2 through HashiCorp\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Set node version to ${{ env.NODE_VERSION }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n      - name: Checkout HashiCorp deployment tool\n        run: git clone https://github.com/QubitPi/hashicorp-aws.git ../hashicorp-aws\n      - name: Load hashicorp-aws-config-dir and put it in the same directory as hashicorp-aws\n        run: ...\n      - name: Load Packer variable file\n        run: cp ../hashicorp-aws-config-dir/aws-react.pkrvars.hcl ../hashicorp-aws/hashicorp/react/images/aws-react.auto.pkrvars.hcl\n      - name: Load Terraform variable file\n        run: cp ../hashicorp-aws-config-dir/aws-react.tfvars ../hashicorp-aws/hashicorp/react/instances/aws-react.auto.tfvars       \n      - name: Generate dist\n        run: cp ../hashicorp-aws-config-dir/.env . && yarn && yarn build\n      - name: Move dist to a location for HashiCorp deployment to pickup\n        run: mv dist ../\n      - name: QubitPi/hashicorp-aws\n        uses: QubitPi/hashicorp-aws@master\n        with:\n          hashicorp-dir: ../hashicorp-aws/hashicorp/react\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: ${{ secrets.AWS_REGION }}\n")),(0,r.kt)("h3",{id:"auxiliary-actions"},"Auxiliary Actions"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The following auxiliary actions assumes a yarn-based project")),(0,r.kt)("h4",{id:"code-style-checks"},"Code Style Checks"),(0,r.kt)("p",null,"This action assume ",(0,r.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/prettier/docs/en/install.html"},"Prettier")," and ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/"},"ESLint")," have been installed "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev --exact prettier\nyarn add --dev eslint\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nname: My CI/CD\n\nenv:\n  NODE_VERSION: 16\n\njobs:\n  code-style:\n    name: Code Style Check\n    runs-on: ubuntu-latest\n    steps:\n      - uses: QubitPi/hashicorp-aws/auxiliary/github/actions/ui-code-style@master\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n")),(0,r.kt)("h4",{id:"unit-tests"},"Unit Tests"),(0,r.kt)("p",null,"Our ",(0,r.kt)("strong",{parentName:"p"},"package.json")," should have an entry that defines the command ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn test"),", for example, when our unit tests is\nwritten with ",(0,r.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/jest/"},"Jest"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "test": "jest"\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nname: My CI/CD\n\nenv:\n  NODE_VERSION: 16\n\njobs:\n  unit-tests:\n    name: Unit Tests\n    needs: [yml-md-style, code-style]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: QubitPi/hashicorp-aws/auxiliary/github/actions/ui-unit-test@master\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n")),(0,r.kt)("h4",{id:"cypress-e2e-tests"},"Cypress E2E Tests"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Cypress E2E Tests")," offers developers Actions that provide an easy way to automate, customize, and execute\n",(0,r.kt)("strong",{parentName:"p"},"parallel")," end-to-end tests within a GitHub project.  The action provides"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"dependency installation via ",(0,r.kt)("strong",{parentName:"li"},"yarn"),","),(0,r.kt)("li",{parentName:"ul"},"scanning of test specs,"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"running each spec in parallel"),", and"),(0,r.kt)("li",{parentName:"ul"},"upload test screenshots and video on test failure.")),(0,r.kt)("p",null,"The example below is a very simple setup:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Put all ",(0,r.kt)("strong",{parentName:"p"},".spec.cy.ts"),' test files under "cypress/e2e" directory')),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Have a file at the root of project with the name ",(0,r.kt)("strong",{parentName:"p"},".env.test"),', which will contain all the environment variables used\nduring the test. The action will rename the ".env.test" name to the regular ',(0,r.kt)("em",{parentName:"p"},".env")," file")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Place a ",(0,r.kt)("strong",{parentName:"p"},"test-setup.sh")," file under ",(0,r.kt)("em",{parentName:"p"},".github/test-setup.sh")," directory for any pre-test setup. For example, to start\na ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/typicode/lowdb"},"lowdb")," server and\n",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/wait-on"},"run e2e only after the server starts"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n\ncd packages/lowdb\nyarn install\nyarn start ../../.github/db.json &\nyarn wait-on-server\n")),(0,r.kt)("p",{parentName:"li"},"Don't forget to make the script executable by running"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chmod u+x .github/test-setup.sh\n")),(0,r.kt)("p",{parentName:"li"},"If no pre-test setup is needed, please leave this file with only 1 line: ",(0,r.kt)("inlineCode",{parentName:"p"},"#!/bin/bash"),", i.e. no-ops")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Use Cypress E2E Tests workflow:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nname: My GitHub Workflow\n\n"on":\n   pull_request:\n   push:\n      branches:\n         - master\n\njobs:\n  list-e2e-specs:\n    runs-on: ubuntu-latest\n    outputs:\n      paths: ${{ steps.list-e2e-specs.outputs.paths }}\n    steps:\n      - name: List Files\n        id: list-e2e-specs\n        uses: mirko-felice/list-files-action@v3.0.5\n        with:\n          repo: ${{ github.repository }}\n          ref: ${{ github.ref }}\n          path: "cypress/e2e"\n          ext: ".ts"\n  \n  e2e-tests:\n    name: E2E Tests\n    needs: list-e2e-specs\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        node_version: [16]\n        start_strategy: ["yarn-start", "serve"]\n        test_spec: ${{ fromJson(needs.list-e2e-specs.outputs.paths) }}\n    steps:\n      - uses: QubitPi/hashicorp-aws/auxiliary/github/actions/cypress-e2e@master\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          start-strategy: ${{ matrix.start_strategy }}\n          spec-relative-path: ${{ matrix.test_spec }}\n')))),(0,r.kt)("h4",{id:"release-to-npm"},"Release to NPM"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title=".github/upversion.py"',title:'".github/upversion.py"'},"#!/usr/bin/python\nimport os\n\nsplit_tag = (os.environ['LAST_TAG'].split('-')[0]).split(\".\")\nsplit_tag[-1] = str(int(split_tag[-1]) + 1)\nprint(\".\".join(split_tag))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=".github/tag-for-release.bash"',title:'".github/tag-for-release.bash"'},'#!/bin/bash\n\n# Pick up the tags from the adjusted remote\ngit fetch --tags\n\necho $(git branch -v)\n\n# Get the last tag on this branch\nLAST_TAG=$(git describe --tags)\necho "INFO Last tag: $LAST_TAG"\n\n# Build the new tag to push\nNEW_TAG=$(LAST_TAG=${LAST_TAG} python .github/upversion.py)\necho "INFO Creating tag: $NEW_TAG"\ngit tag $NEW_TAG -a -m "Autogenerated version bump tag"\n\n# Push the new tag\necho "INFO Pushing tag: $NEW_TAG"\ngit push origin $NEW_TAG\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\nname: My CI/CD\n\nenv:\n  USER: QubitPi\n  EMAIL: jack20220723@gmail.com\n  NODE_VERSION: 16\n\njobs:\n  unit-tests:\n    name: Unit Tests\n    runs-on: ubuntu-latest\n    steps:\n      - uses: QubitPi/hashicorp-aws/auxiliary/github/actions/npm-release@master\n        with:\n          node-version: ${{ env.NODE_VERSION }}\n          user: ${{ env.USER }}\n          email: ${{ env.EMAIL }}\n          npm-token: ${{ secrets.NPM_TOKEN }}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Please make sure to disable 2F authentication before running the CI/CD above so that release can be pushed to NPM from\nwithin GitHub Action without auth errors"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("img",{alt:"Error loading disable-2fa.png",src:a(842).Z,width:"2560",height:"961"}))))}m.isMDXComponent=!0},842:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/disable-2fa-98f1c1067e44bd5bcf4f7fe9be4140ec.png"}}]);