"use strict";(self.webpackChunkaergia=self.webpackChunkaergia||[]).push([[9671],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(a),u=i,d=h["".concat(l,".").concat(u)]||h[u]||m[u]||r;return a?n.createElement(d,o(o({ref:t},c),{},{components:a})):n.createElement(d,o({ref:t},c))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},9881:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:1},o="Aergia Documentation Home",s={unversionedId:"intro",id:"intro",title:"Aergia Documentation Home",description:"HashiCorp AWS - Immutable Infrastructure as Code via GitHub Action",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/aergia/docs/intro",draft:!1,editUrl:"https://github.com/QubitPi/aergia/tree/gh-pages/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Elastic Stack (ELK)",permalink:"/aergia/docs/elk"}},l={},p=[{value:"HashiCorp AWS - Immutable Infrastructure as Code via GitHub Action",id:"hashicorp-aws---immutable-infrastructure-as-code-via-github-action",level:2},{value:"How to Use HashiCrop AWS",id:"how-to-use-hashicrop-aws",level:2},{value:"Step 1 - Setting up HashiCrop Packer &amp; Terraform Template Files",id:"step-1---setting-up-hashicrop-packer--terraform-template-files",level:3},{value:"Step 2 - Defining Action File",id:"step-2---defining-action-file",level:3},{value:"FAQ",id:"faq",level:3},{value:"How do I define custom environment variables for &quot;Packer template files&quot;/&quot;Terraform config files&quot;/&quot;script.sh file&quot;",id:"how-do-i-define-custom-environment-variables-for-packer-template-filesterraform-config-filesscriptsh-file",level:4},{value:"Declare Packer Variables",id:"declare-packer-variables",level:5},{value:"Load Environment Variables into GitHub Action Context",id:"load-environment-variables-into-github-action-context",level:5},{value:"Passing the Environment Variable",id:"passing-the-environment-variable",level:5},{value:"How to Enable SSL Automatically Through HashiCorp AWS",id:"how-to-enable-ssl-automatically-through-hashicorp-aws",level:4},{value:"Step 1 - Store SSL Certificate in GitHub Secrets",id:"step-1---store-ssl-certificate-in-github-secrets",level:5},{value:"Step 2 - Load Certificate into HashiCorp Context through GitHub Action",id:"step-2---load-certificate-into-hashicorp-context-through-github-action",level:5},{value:"Step 3 - Define Nginx Reverse Proxy Config File",id:"step-3---define-nginx-reverse-proxy-config-file",level:5},{value:"Step 3 - Loading Certificates and Nginx Config Files into AMI Image",id:"step-3---loading-certificates-and-nginx-config-files-into-ami-image",level:5},{value:"Step 4 - Moving Certificates and Nginx Config Files to the Proper Locations in AMI",id:"step-4---moving-certificates-and-nginx-config-files-to-the-proper-locations-in-ami",level:5},{value:"Step 5 - Registering DNS Record for the EC2 Instance",id:"step-5---registering-dns-record-for-the-ec2-instance",level:5}],c={toc:p};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"aergia-documentation-home"},"Aergia Documentation Home"),(0,i.kt)("h2",{id:"hashicorp-aws---immutable-infrastructure-as-code-via-github-action"},"HashiCorp AWS - Immutable Infrastructure as Code via GitHub Action"),(0,i.kt)("p",null,"HashiCorp AWS is an opinionated CI/CD ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions"},"GitHub Action")," that"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"packages an application into an ",(0,i.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html"},"AMI image")," and registers it onto AWS, then"),(0,i.kt)("li",{parentName:"ol"},"deploys an ",(0,i.kt)("a",{parentName:"li",href:"https://aws.amazon.com/ec2/"},"EC2 instance")," of that AMI")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://github.com/QubitPi/QubitPi/blob/master/img/hashicorp-aws/hashicorp-aws.png?raw=true",alt:"Error loading hashicorp-aws.png"})),(0,i.kt)("h2",{id:"how-to-use-hashicrop-aws"},"How to Use HashiCrop AWS"),(0,i.kt)("h3",{id:"step-1---setting-up-hashicrop-packer--terraform-template-files"},"Step 1 - Setting up HashiCrop Packer & Terraform Template Files"),(0,i.kt)("p",null,"HashiCorp AWS action follows ",(0,i.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/terraform/tutorials/provision/packer"},"HashiCrop's best practice")," by expecting a directory called\n",(0,i.kt)("strong",{parentName:"p"},"hashicorp")," located at the root of the repository. It's structure looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},".\n\u2514\u2500\u2500 my-app-repository/\n    \u251c\u2500\u2500 hashicorp/\n    \u2502   \u251c\u2500\u2500 images/\n    \u2502   \u2502   \u251c\u2500\u2500 aws-my-app.pkr.hcl\n    \u2502   \u2502   \u2514\u2500\u2500 variables.pkr.hcl\n    \u2502   \u251c\u2500\u2500 instances/\n    \u2502   \u2502   \u2514\u2500\u2500 main.tf\n    \u2502   \u2514\u2500\u2500 scripts/\n    \u2502       \u2514\u2500\u2500 script.sh\n    \u251c\u2500\u2500 src\n    \u2514\u2500\u2500 ...\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Diagram generated from ",(0,i.kt)("a",{parentName:"p",href:"https://tree.nathanfriend.io/"},"tree.nathanfriend.io"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("strong",{parentName:"p"},"aws-my-app.pkr.hcl")," is the standard ",(0,i.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/packer/tutorials/aws-get-started/aws-get-started-build-image#write-packer-template"},"HashiCorp Packer Template")," file. For example")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("strong",{parentName:"p"},"variables.pkr.hcl"),"  is the standard ",(0,i.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/hashicorp-packer/packer/guides/hcl/variables"},"Packer Variable")," definitions"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Place make sure to place the following variable declaration block in ",(0,i.kt)("em",{parentName:"p"},"variables.pkr.hcl"),". this is an\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Inversion_of_control"},"inversion of control")," variable required by HashiCorp AWS. The value of\nthis variable will be set to the ",(0,i.kt)("em",{parentName:"p"},"AWS_REGION")," which will be talked about later"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-hcl"},'variable "aws_image_region" {\n  type =  string\n  sensitive = true\n}\n')),(0,i.kt)("p",{parentName:"li"},"Packer template file can ",(0,i.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/hashicorp-packer/packer/guides/hcl/variables"},"use this variable")," however needed")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("strong",{parentName:"p"},"main.tf")," is the standard ",(0,i.kt)("a",{parentName:"p",href:"https://developer.hashicorp.com/terraform/tutorials/aws-get-started/aws-build#write-configuration"},"HashiCorp Terraform Config File")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Similar to ",(0,i.kt)("em",{parentName:"p"},"variables.pkr.hcl"),", please put a variable called ",(0,i.kt)("strong",{parentName:"p"},"aws_deploy_region")," ",(0,i.kt)("em",{parentName:"p"},"at the top")," of this file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-terraform"},'variable "aws_deploy_region" {\n  type = string\n  description = "The EC2 region"\n}\n')),(0,i.kt)("p",{parentName:"li"},"The value of this variable will be set to the ",(0,i.kt)("em",{parentName:"p"},"AWS_REGION")," which will be talked about later. Terraform config file\ncan ",(0,i.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/hashicorp-terraform/terraform/language/values/variables"},"use this variable")," however needed")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"HashiCorp AWS configures AMI image using\n",(0,i.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/hashicorp-packer/packer/docs/provisioners/shell"},"Shell Provisioner"),". This is achieved by placing a ",(0,i.kt)("strong",{parentName:"p"},"script.sh")," file under\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"scripts")," directory")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A complete working example can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/mlflow/tree/master/hashicorp"},"here")))),(0,i.kt)("h3",{id:"step-2---defining-action-file"},"Step 2 - Defining Action File"),(0,i.kt)("p",null,"Under regular ",(0,i.kt)("inlineCode",{parentName:"p"},".github/workflows")," directory, create a ",(0,i.kt)("inlineCode",{parentName:"p"},".yml")," file with a preferred name with the following\nexample contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nname: My App IaC Definition (HashiCorp)\n\n"on":\n  pull_request:\n  push:\n    branches:\n      - master\n\njobs:\n  hashicorp:\n    name: Publish my-app AMI Image and Deploy It to EC2 through HashiCorp\n    runs-on: ubuntu-latest\n    defaults:\n      run:\n        working-directory: hashicorp\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Publish my-app AMI image and deploy it to EC2 through HashiCorp\n        uses: QubitPi/hashicorp-aws@master\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: ${{ secrets.AWS_REGION }}\n')),(0,i.kt)("p",null,"In the example above:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Each pull request (and every new commits to that PR) validates HashiCorp Packer & Terraform files as tests")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Each ",(0,i.kt)("inlineCode",{parentName:"p"},"master")," branch commit run the tests above and, if successful, publish the image to AWS AMI registry and then\ndeploy the images to EC2 instances automatically")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Old AMI image with the same name will be deregistered. HashiCorp AWS Action takes the opinionated view that\n",(0,i.kt)("em",{parentName:"p"},"deployment should always consume the latest AMI"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The following ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets"},"GitHub Action Secrets")," needs to be setup"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html"},(0,i.kt)("strong",{parentName:"a"},"AWS_ACCESS_KEY_ID"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html"},(0,i.kt)("strong",{parentName:"a"},"AWS_SECRET_ACCESS_KEY"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html"},(0,i.kt)("strong",{parentName:"a"},"AWS_REGION"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The Security Group of the EC2 instance, however, still needs to be manually configured. This is planned to be\nautomated in the near future.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A complete working example can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/mlflow/blob/master/.github/workflows/hashicorp.yml"},"here")))),(0,i.kt)("h3",{id:"faq"},"FAQ"),(0,i.kt)("h4",{id:"how-do-i-define-custom-environment-variables-for-packer-template-filesterraform-config-filesscriptsh-file"},'How do I define custom environment variables for "Packer template files"/"Terraform config files"/"script.sh file"'),(0,i.kt)("p",null,"Let's say our Packer ",(0,i.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/hashicorp-packer/packer/docs/provisioners/shell"},"shell provisioner")," script (i.e. ",(0,i.kt)("em",{parentName:"p"},"script.sh")," file) needs to\ninteract with some 3rd party API with a ",(0,i.kt)("em",{parentName:"p"},"username")," and ",(0,i.kt)("em",{parentName:"p"},"token"),". Knowing that it's a bad practice to hard-code token\npublicly in the script, we can use pass our username/token into HashiCorp context through GitHub Action using the 2\nfollowing ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets"},"GitHub Secrets")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${{ secrets.AUTH_USERNAME }}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${{ secrets.AUTH_TOKEN }}"))),(0,i.kt)("h5",{id:"declare-packer-variables"},"Declare Packer Variables"),(0,i.kt)("p",null,"After the two secrets above have been created, we will initiate a new ",(0,i.kt)("strong",{parentName:"p"},"my-app.auto.pkrvars.hcl")," file under\n",(0,i.kt)("em",{parentName:"p"},"hashicorp/images")," with the following contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-hcl"},'AUTH_USERNAME = "AUTH_USERNAME_INJECTED_BY_CI_CD"\nAUTH_TOKEN = "AUTH_TOKEN_INJECTED_BY_CI_CD"\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"We can replace"),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AUTH_USERNAME_INJECTED_BY_CI_CD")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AUTH_TOKEN_INJECTED_BY_CI_CD"))),(0,i.kt)("p",{parentName:"blockquote"},"with anything else. These two values will be used as a placeholder for dynamic replacement by the 2 secret values")),(0,i.kt)("p",null,"Add the following variable declarations in the aforementioned ",(0,i.kt)("strong",{parentName:"p"},"variables.pkr.hcl")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-hcl"},'variable "AUTH_USERNAME" {\n  type    = string\n  sensitive = true\n}\n\nvariable "AUTH_TOKEN" {\n  type    = string\n  sensitive = true\n}\n')),(0,i.kt)("h5",{id:"load-environment-variables-into-github-action-context"},"Load Environment Variables into GitHub Action Context"),(0,i.kt)("p",null,'Add an extra step "Load custom environment variables into Packer variable file" shown below by injecting the two\naforementioned GitHub secrets:'),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Make sure to replace ",(0,i.kt)("strong",{parentName:"p"},"AUTH_USERNAME_INJECTED_BY_CI_CD")," and ",(0,i.kt)("strong",{parentName:"p"},"AUTH_TOKEN_INJECTED_BY_CI_CD")," if needed")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"    ...\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        \n      - name: Load custom environment variables into Packer variable file\n        working-directory: hashicorp/images\n        run: |\n          sed -i -e 's/AUTH_USERNAME_INJECTED_BY_CI_CD/${{ secrets.AUTH_USERNAME }}/g' my-app.auto.pkrvars.hcl\n          sed -i -e 's/AUTH_TOKEN_INJECTED_BY_CI_CD/${{ secrets.AUTH_TOKEN }}/g' my-app.auto.pkrvars.hcl\n        \n      - name: Publish my-app AMI image and deploy it to EC2 through HashiCorp\n        uses: QubitPi/hashicorp-aws@master\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: ${{ secrets.AWS_REGION }}\n")),(0,i.kt)("h5",{id:"passing-the-environment-variable"},"Passing the Environment Variable"),(0,i.kt)("p",null,"In the packer template file ",(0,i.kt)("strong",{parentName:"p"},"aws-my-app.pkr.hcl"),", our environment variable will be available as"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"${var.AUTH_USERNAME}"),", and"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"${var.AUTH_TOKEN}"))),(0,i.kt)("p",null,"and can be passed into ",(0,i.kt)("strong",{parentName:"p"},"script.sh")," file using ",(0,i.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/hashicorp-packer/packer/docs/provisioners/shell"},"shell provisioner"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-hcl"},'  provisioner "shell" {\n    environment_vars = [\n      "AUTH_USERNAME=${var.AUTH_USERNAME}",\n      "AUTH_TOKEN=${var.AUTH_TOKEN}"\n    ]\n    script = "../scripts/setup.sh"\n  }\n')),(0,i.kt)("p",null,"The variables are reference in the ",(0,i.kt)("em",{parentName:"p"},"script.sh")," by"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$AUTH_USERNAME")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$AUTH_TOKEN"))),(0,i.kt)("h4",{id:"how-to-enable-ssl-automatically-through-hashicorp-aws"},"How to Enable SSL Automatically Through HashiCorp AWS"),(0,i.kt)("p",null,"Let's image the following scenario:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"I purchased a domain from ",(0,i.kt)("a",{parentName:"li",href:"https://domains.google/"},"Google Domain")," called ",(0,i.kt)("strong",{parentName:"li"},"my-domain.com")),(0,i.kt)("li",{parentName:"ol"},"I developed a web app that will be exposed at ",(0,i.kt)("strong",{parentName:"li"},"my-app.my-domain.com")),(0,i.kt)("li",{parentName:"ol"},"I will deploy my app to ",(0,i.kt)("a",{parentName:"li",href:"https://aws.amazon.com/ec2/"},"AWS EC2")," using HashiCorp AWS"),(0,i.kt)("li",{parentName:"ol"},"Right after EC2 is up, I need to automatically enable secure SSL communication so that my app can be visited at\n",(0,i.kt)("inlineCode",{parentName:"li"},"https://my-app.my-domain.com"))),(0,i.kt)("p",null,"Assuming that ",(0,i.kt)("strong",{parentName:"p"},"HashiCorp AWS, or Immutable Infrastructure in general, is not responsible for SSL\ncertificates lifecycle management"),", we can read the certificate from ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions"},"GitHub Action")," and\nload it into EC2 instance in the following way:"),(0,i.kt)("h5",{id:"step-1---store-ssl-certificate-in-github-secrets"},"Step 1 - Store SSL Certificate in ",(0,i.kt)("a",{parentName:"h5",href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets"},"GitHub Secrets")),(0,i.kt)("p",null,"Assuming we have\n",(0,i.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/aergia/blog/jenkins-on-aws#applying-for-a-certificate-using-certbot"},"obtained both the certificate and certificate key"),", we have the\nfollowing ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets"},"GitHub Action Secrets")," set up first"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"SSL_CERTIFICATE"),": The content of the certificate file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"SSL_CERTIFICATE_KEY"),": The content of the certificate key file")),(0,i.kt)("h5",{id:"step-2---load-certificate-into-hashicorp-context-through-github-action"},"Step 2 - Load Certificate into HashiCorp Context through ",(0,i.kt)("a",{parentName:"h5",href:"https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions"},"GitHub Action")),(0,i.kt)("p",null,'Right before the HashiCorp AWS step, we will put the following "Load SSL Certificates" step:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"  ...\n\n  steps:\n    ...\n\n    - name: Load SSL Certificates\n      working-directory: hashicorp/images\n      run: |\n        echo '${{ secrets.SSL_CERTIFICATE }}' > server.crt\n        echo '${{ secrets.SSL_CERTIFICATE_KEY }}' > server.key\n\n    - name: Publish my-app AMI image and deploy it to EC2 through HashiCorp\n      uses: QubitPi/hashicorp-aws@master\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: ${{ secrets.AWS_REGION }}\n")),(0,i.kt)("h5",{id:"step-3---define-nginx-reverse-proxy-config-file"},"Step 3 - Define Nginx Reverse Proxy Config File"),(0,i.kt)("p",null,"Note that in the following config, Nginx assumes the certificate file and its key file are located at\n",(0,i.kt)("strong",{parentName:"p"},"/etc/ssl/certs/server.crt")," and ",(0,i.kt)("strong",{parentName:"p"},"/etc/ssl/private/server.key"),", respectively. In addition, please modify\n",(0,i.kt)("inlineCode",{parentName:"p"},"my-app.my-domain.com")," in it accordingly:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ini"},"server {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n\n    server_name _;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n\nserver {\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n    server_name my-app.my-domain.com;\n\n    location / {\n        proxy_pass http://localhost:5000;\n    }\n\n    listen [::]:443 ssl ipv6only=on;\n    listen 443 ssl;\n    ssl_certificate /etc/ssl/certs/server.crt;\n    ssl_certificate_key /etc/ssl/private/server.key;\n}\n\nserver {\n    if ($host = my-app.my-domain.com) {\n        return 301 https://$host$request_uri;\n    }\n\n    listen 80 ;\n    listen [::]:80 ;\n    server_name my-app.my-domain.com;\n    return 404;\n}\n")),(0,i.kt)("h5",{id:"step-3---loading-certificates-and-nginx-config-files-into-ami-image"},"Step 3 - Loading Certificates and Nginx Config Files into AMI Image"),(0,i.kt)("p",null,"In the ",(0,i.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/hashicorp-packer/packer/docs/templates/hcl_templates/blocks/build"},"build block")," of our ",(0,i.kt)("strong",{parentName:"p"},"images/aws-my-app.pkr.hcl")," file, we add 3 provisioners to\nload the certificate, certificate key, and the Nginx reverse proxy config file into AMI."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note that Packer's file provisioner do not have root user privilege to put our files directly to the desired\nlocations. We will put them instead to a temporary location and have the shell provisioner to move them second time\nto the destinated locations in the\n",(0,i.kt)("a",{parentName:"p",href:"#step-4---moving-certificates-and-nginx-config-files-to-the-proper-locations-in-ami"},"next step"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-hcl"},'build {\n  ...\n\n  # Load SSL Certificates into AMI image\n  provisioner "file" {\n    source = "./server.crt"\n    destination = "/home/ubuntu/server.crt"\n  }\n  provisioner "file" {\n    source = "./server.key"\n    destination = "/home/ubuntu/server.key"\n  }\n\n  # Load Nginx config file into AMI image\n  provisioner "file" {\n    source = "./nginx-ssl.conf"\n    destination = "/home/ubuntu/nginx-ssl.conf"\n  }\n\n  ...\n}\n')),(0,i.kt)("h5",{id:"step-4---moving-certificates-and-nginx-config-files-to-the-proper-locations-in-ami"},"Step 4 - Moving Certificates and Nginx Config Files to the Proper Locations in AMI"),(0,i.kt)("p",null,"In ",(0,i.kt)("strong",{parentName:"p"},"scripts/setup.sh")," file, we add the following server configuration script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# Install Nginx and load SSL config\nsudo apt install -y nginx\nsudo mv /home/ubuntu/nginx-ssl.conf /etc/nginx/sites-enabled/default\nsudo mv /home/ubuntu/server.crt /etc/ssl/certs/server.crt\nsudo mv /home/ubuntu/server.key /etc/ssl/private/server.key\n")),(0,i.kt)("h5",{id:"step-5---registering-dns-record-for-the-ec2-instance"},"Step 5 - Registering DNS Record for the EC2 Instance"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/aergia/blog/jenkins-on-aws#applying-for-a-certificate-using-certbot"},"certificate we provided")," works only for one certain domain,\ni.e. ",(0,i.kt)("em",{parentName:"p"},"my-app.my-domain.com")," in our case. We need to expose our EC2 under that domain.\n",(0,i.kt)("a",{parentName:"p",href:"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_record.html"},"aws_route53_record")," allows us to dynamically bind EC2 IP to its hosted domain\nso that each time when a new EC2 instance is instantiated, that instance will register its IP to ",(0,i.kt)("inlineCode",{parentName:"p"},"my-domain.com")," on\nRoute 53."),(0,i.kt)("p",null,"In our ",(0,i.kt)("strong",{parentName:"p"},"instances/main.tf")," file, we will add the following"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Make sure this resource is after the ",(0,i.kt)("em",{parentName:"p"},"aws_instance"),", because IP is available only after the EC2 instance has been\nprovisioned; The IAM user associated with the ",(0,i.kt)("em",{parentName:"p"},"AWS_ACCESS_KEY_ID")," & ",(0,i.kt)("em",{parentName:"p"},"AWS_SECRET_ACCESS_KEY")," should also have\nsufficient permission to interact with Route 53"),(0,i.kt)("p",{parentName:"blockquote"},"In addition, the option\n",(0,i.kt)("a",{parentName:"p",href:"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_record#allow_overwrite"},(0,i.kt)("strong",{parentName:"a"},"allow_overwrite")),'\ndeletes existing DNS record with name "my-app.my-domain.com"')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-terraform"},'resource "aws_route53_record" "my-app-my-domain-com" {\n  zone_id         = "SDFE943RBVIN3O202YEG12E"\n  name            = "my-app.my-domain.com"\n  type            = "A"\n  ttl             = 300\n  records         = [aws_instance.my-app.public_ip]\n  allow_overwrite = true\n}\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"What if my domain is on Google Domain, not on Route 53?")),(0,i.kt)("p",{parentName:"blockquote"},"In this case, we can simply connect Google Domain to AWS Route 53 in the following steps"),(0,i.kt)("ol",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a Hosted Zone in AWS Route 53:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Login into AWS Management Console and head towards Route 53"),(0,i.kt)("li",{parentName:"ul"},"In Route 53 -> Click ",(0,i.kt)("strong",{parentName:"li"},"Hosted zones")," -> Click ",(0,i.kt)("strong",{parentName:"li"},"Create Hosted Zone")),(0,i.kt)("li",{parentName:"ul"},"Fill in ",(0,i.kt)("strong",{parentName:"li"},"Domain Name")," and select ",(0,i.kt)("strong",{parentName:"li"},"Type")," as ",(0,i.kt)("strong",{parentName:"li"},"Public Hosted Zone")," and click create"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Update Google Domain to use custom ",(0,i.kt)("a",{parentName:"p",href:"https://www.domain.com/help/article/what-is-a-nameserver"},"name servers")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Log into ",(0,i.kt)("a",{parentName:"li",href:"https://domains.google/"},"Google Domain")," account and click on ",(0,i.kt)("strong",{parentName:"li"},"My domains")),(0,i.kt)("li",{parentName:"ul"},"Click on ",(0,i.kt)("strong",{parentName:"li"},"DNS")),(0,i.kt)("li",{parentName:"ul"},"At the top of the page, select ",(0,i.kt)("strong",{parentName:"li"},"Custom name servers")),(0,i.kt)("li",{parentName:"ul"},'Copy and paste all four Name Server (NS) from the Route 53 Record Sets panel (Under "Hosted zone details") and\nclick ',(0,i.kt)("strong",{parentName:"li"},"save")))))))}m.isMDXComponent=!0}}]);