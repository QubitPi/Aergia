"use strict";(self.webpackChunkhashicorp_aws=self.webpackChunkhashicorp_aws||[]).push([[472],{9326:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var i=s(5893),t=s(1151);const o={sidebar_position:9,title:"Kong API Gateway"},r=void 0,a={id:"kong",title:"Kong API Gateway",description:"[//]: # (Copyright Jiaqi Liu)",source:"@site/docs/kong.md",sourceDirName:".",slug:"/kong",permalink:"/hashicorp-aws/docs/kong",draft:!1,unlisted:!1,editUrl:"https://github.com/QubitPi/hashicorp-aws/tree/master/docs/docs/kong.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"Kong API Gateway"},sidebar:"tutorialSidebar",previous:{title:"General Troubleshooting",permalink:"/hashicorp-aws/docs/troubleshooting"}},c={},l=[{value:"SSL",id:"ssl",level:2},{value:"Nginx Config",id:"nginx-config",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Security Group Isn&#39;t Working as Expected in AWS",id:"security-group-isnt-working-as-expected-in-aws",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"ssl",children:"SSL"}),"\n",(0,i.jsx)(n.h3,{id:"nginx-config",children:"Nginx Config"}),"\n",(0,i.jsx)(n.p,{children:"hashicorp-aws assumes the following for all of its management app deployment:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Business logic and SSL/HTTP are separate concerns and must be decoupled from each other"})}),"\n",(0,i.jsx)(n.p,{children:"That being said, hashicorp-aws deploys Kong completely without SSL and spins up a Nginx rever proxy to handle the\nHTTPS redirecting to Kong's pure HTTP app. Therefore:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["hashicorp-aws uses a ",(0,i.jsx)(n.a,{href:"https://github.com/QubitPi/docker-kong",children:"customized fork of docker-kong"})," to\n",(0,i.jsx)(n.a,{href:"https://github.com/QubitPi/docker-kong/pull/1",children:"fully separate the\napp and SSL"}),",\nand therefore"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["the Nginx config needs multiple ",(0,i.jsx)(n.a,{href:"https://www.nginx.com/resources/wiki/start/topics/examples/server_blocks/",children:"servers"}),"\nto ensure all HTTPS ports are mapped to their corresponding HTTP ports as shown in the config snippet below:"]}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["All relevant HTTP and HTTPS ports are listed in\n",(0,i.jsx)(n.a,{href:"https://qubitpi.github.io/docs.konghq.com/gateway/latest/production/networking/default-ports/",children:"Kong's documentation here"}),". In general, our Nginx should **listen on an HTTPS port\nand ",(0,i.jsx)(n.code,{children:"proxy_pass"})," to an HTTP port. For example, ports 8443 and 8444 are ",(0,i.jsx)(n.code,{children:"proxy_pass"}),"ed to 8000 and 8001, respectively,\nboth of which are listed in the doc."]}),(0,i.jsx)(n.p,{children:"One special case is HTTP port 8002, which is the Kong manager UI port. hashicorp-aws assigns user specified domain\nto each deployed Kong. Hitting the domain will simply open up a user-friendly UI by this configuration."})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nginx",metastring:"configuration",children:"\n...\n\nserver {\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n    server_name my.kongdomain.com;\n\n    location / {\n        proxy_pass http://localhost:8002;\n    }\n\n    listen [::]:443 ssl ipv6only=on;\n    listen 443 ssl;\n    ssl_certificate /etc/ssl/certs/server.crt;\n    ssl_certificate_key /etc/ssl/private/server.key;\n}\n\nserver {\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n    server_name my.kongdomain.com;\n\n    location / {\n        proxy_pass http://localhost:8000;\n    }\n\n    listen [::]:8443 ssl ipv6only=on;\n    listen 8443 ssl;\n    ssl_certificate /etc/ssl/certs/server.crt;\n    ssl_certificate_key /etc/ssl/private/server.key;\n}\nserver {\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n    server_name my.kongdomain.com;\n\n    location / {\n        proxy_pass http://localhost:8001;\n    }\n\n    listen [::]:8444 ssl ipv6only=on;\n    listen 8444 ssl;\n    ssl_certificate /etc/ssl/certs/server.crt;\n    ssl_certificate_key /etc/ssl/private/server.key;\n}\n\n...\n\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"security-group-isnt-working-as-expected-in-aws",children:"Security Group Isn't Working as Expected in AWS"}),"\n",(0,i.jsx)(n.p,{children:"This could happen when we are accessing the deployed gateway from a public IP address, such as our personal computer."}),"\n",(0,i.jsxs)(n.p,{children:["Complying with the best security practice, hashicorp-aws binds ",(0,i.jsx)(n.em,{children:"private"})," EC2 IP to a Route 53 domain. Since it is a\ncommon practice to limit the API gateway access by assigning gateway instance with\n",(0,i.jsx)(n.a,{href:"https://docs.aws.amazon.com/vpc/latest/userguide/security-group-rules.html",children:"inbound rules"}),". hashicorp-aws also manages\nto disable all HTTP request to the gateway. Therefore, any public visit to our deployed gateway instance has to go\nthrough the gateway domain."]}),"\n",(0,i.jsxs)(n.p,{children:["But since the domain is bound by a private IP, accessing the gateway through the domain from public IP source will hit\nthe private IP, which would always fail ",(0,i.jsx)(n.em,{children:"independent"})," of security group configs"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The reason we bind ",(0,i.jsx)(n.em,{children:"private"})," IP to domain is that\n",(0,i.jsx)(n.a,{href:"https://stackoverflow.com/a/24242211",children:"when gateway is used for inter security-group communication, it works\nover private addressing. If we use the public IP address the firewall rule will not recognise the source security group"}),".\nThis is particularly important when the gateway is serving API to downstream services such as frontend APP."]})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"The solution"}),"? To access the gateway manually from our machine, for instance, we should address the instance using the\nPublic DNS record - this will actually be pointed at the private IP address when we hit the DNS name."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, if our instance has public IP ",(0,i.jsx)(n.code,{children:"203.0.113.185"})," and private IP ",(0,i.jsx)(n.code,{children:"10.1.234.12"}),", we are given a public DNS name\nlike ",(0,i.jsx)(n.code,{children:"ec2-203-0-113-185.eu-west-1.compute.amazonaws.com"}),", which will resolve to ",(0,i.jsx)(n.code,{children:"203.0.113.185"})," if queried externally,\nor ",(0,i.jsx)(n.code,{children:"10.1.234.12"})," if queried internally. This will enable our security groups to work as intended. See\n",(0,i.jsx)(n.a,{href:"https://stackoverflow.com/a/24242211",children:"this thread"})," for more details."]})]})}function d(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>r});var i=s(7294);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);