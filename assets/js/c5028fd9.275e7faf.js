"use strict";(self.webpackChunkhashicorp_aws=self.webpackChunkhashicorp_aws||[]).push([[779],{878:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var s=t(5893),i=t(1151);const r={slug:"certbot",title:"Installing Free SSL Certificates with Certbot running on Nginx",authors:["jiaqi"],tags:["SSL","HTTPS","Security"]},o=void 0,l={permalink:"/hashicorp-aws/blog/certbot",editUrl:"https://github.com/QubitPi/hashicorp-aws/tree/master/docs/blog/2023-09-16-certbot/index.md",source:"@site/blog/2023-09-16-certbot/index.md",title:"Installing Free SSL Certificates with Certbot running on Nginx",description:"[//]: # (Copyright Jiaqi Liu)",date:"2023-09-16T00:00:00.000Z",formattedDate:"September 16, 2023",tags:[{label:"SSL",permalink:"/hashicorp-aws/blog/tags/ssl"},{label:"HTTPS",permalink:"/hashicorp-aws/blog/tags/https"},{label:"Security",permalink:"/hashicorp-aws/blog/tags/security"}],readingTime:2.39,hasTruncateMarker:!0,authors:[{name:"Jiaqi Liu",title:"Maintainer of hashicorp-aws",url:"https://github.com/QubitPi",imageURL:"https://avatars.githubusercontent.com/u/16126939?v=4",key:"jiaqi"}],frontMatter:{slug:"certbot",title:"Installing Free SSL Certificates with Certbot running on Nginx",authors:["jiaqi"],tags:["SSL","HTTPS","Security"]},unlisted:!1,prevItem:{title:"Build and Push Docker Images through GitHub Action",permalink:"/hashicorp-aws/blog/dockerhub-github-actions"},nextItem:{title:"Switching Node.js Versions with NVM",permalink:"/hashicorp-aws/blog/nvm"}},a={authorsImageUrls:[void 0]},c=[{value:"Installing Certbot on Ubuntu",id:"installing-certbot-on-ubuntu",level:2},{value:"Creating SSL Certificate with Certbot",id:"creating-ssl-certificate-with-certbot",level:2},{value:"Configuring Reverse Proxy on Nginx",id:"configuring-reverse-proxy-on-nginx",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/letsencrypt-website/",children:"Let's Encrypt"})," provides free SSL certificates for our websites to use\nsecure connections. ",(0,s.jsx)(n.a,{href:"https://certbot.eff.org/",children:"Certbot"})," is free open source software that allows us to easily create\nLet's Encrypt SSLs on our Linux server, such as Ubuntu VM."]}),"\n",(0,s.jsx)(n.h2,{id:"installing-certbot-on-ubuntu",children:"Installing Certbot on Ubuntu"}),"\n",(0,s.jsxs)(n.p,{children:["We will install Certbot on Ubuntu with ",(0,s.jsx)(n.em,{children:"snapd"})," using the following steps:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Install ",(0,s.jsx)(n.em,{children:"snapd"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt-get update\nsudo apt install snapd\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Ensure the latest snapd version has been installed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo snap install core; sudo snap refresh core\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Install Certbot with snapd:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo snap install --classic certbot\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create a symlink to ensure Certbot runs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo ln -s /snap/bin/certbot /usr/bin/certbot\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://stackoverflow.com/a/64571090/14312712",children:"Install Nginx"}),", assuming we use Nginx-based Certbot"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo apt install python3-certbot-nginx -y\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"creating-ssl-certificate-with-certbot",children:"Creating SSL Certificate with Certbot"}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"HTTP:80 must be open on the server"})}),"\n",(0,s.jsxs)(n.p,{children:["After ",(0,s.jsx)(n.a,{href:"#install-certbot",children:"Certbot has been installed"}),', run Certbot to create SSL certificates and  modify Nginx\nconfiguration file to automatically redirect HTTP requests to HTTPS. Or, add "certonly" to create the SSL certificates\nwithout modifying system files:']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sudo certbot --nginx\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuring-reverse-proxy-on-nginx",children:"Configuring Reverse Proxy on Nginx"}),"\n",(0,s.jsxs)(n.p,{children:["After certificates have been deployed and Nginx has been configured properly for SSL by Certbot, it's time to configure\nrouting to direct HTTPS to local HTTP by modifying ",(0,s.jsx)(n.strong,{children:"/etc/nginx/sites-enabled/default"})," file."]}),"\n",(0,s.jsx)(n.p,{children:"Locate the section of"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"server {\n    ...\n\n    listen [::]:443 ssl ipv6only=on;\n    listen 443 ssl;\n    ssl_certificate /etc/ssl/certs/server.crt;\n    ssl_certificate_key /etc/ssl/private/server.key;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Add the proxy routing rule in the ",(0,s.jsx)(n.code,{children:"server"})," block above"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"    location / {\n        proxy_pass http://localhost:8080;\n    }\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example, we have a webservice running at port 8080. Essentially this will redirect all HTTPS request to this\nlocal port, effectively enabling HTTPS on the webservice"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.p,{children:"The complete Nginx config file, in the end, will look something like:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"server {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n\n    server_name _;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n\nserver {\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n    server_name ws-domain.com;\n\n    location / {\n        proxy_pass http://localhost:8080;\n    }\n\n    listen [::]:443 ssl ipv6only=on;\n    listen 443 ssl;\n    ssl_certificate /etc/ssl/certs/server.crt;\n    ssl_certificate_key /etc/ssl/private/server.key;\n}\nserver {\n    if ($host = ws-domain.com) {\n        return 301 https://$host$request_uri;\n    }\n\n    listen 80 ;\n    listen [::]:80 ;\n    server_name ws-domain.com;\n    return 404;\n}\n"})})]})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>o});var s=t(7294);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);