"use strict";(self.webpackChunkhashicorp_aws=self.webpackChunkhashicorp_aws||[]).push([[6899],{9426:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var n=s(5893),t=s(1151);const r={sidebar_position:6,title:"Jersey-Jetty Based Webservice"},a=void 0,l={id:"webservice",title:"Jersey-Jetty Based Webservice",description:"[//]: # (Copyright Jiaqi Liu)",source:"@site/docs/6-webservice.md",sourceDirName:".",slug:"/webservice",permalink:"/hashicorp-aws/docs/webservice",draft:!1,unlisted:!1,editUrl:"https://github.com/QubitPi/hashicorp-aws/tree/master/docs/docs/6-webservice.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Jersey-Jetty Based Webservice"},sidebar:"tutorialSidebar",previous:{title:"React App",permalink:"/hashicorp-aws/docs/react"},next:{title:"Configuration Management for Immutable Infrastructure",permalink:"/hashicorp-aws/docs/IaC-configuration-management"}},o={},c=[{value:"Setup",id:"setup",level:2},{value:"HashiCorp",id:"hashicorp",level:3},{value:"Deployment via GitHub Actions",id:"deployment-via-github-actions",level:2},{value:"Jersey Webservice Template (JPA through Elide)",id:"jersey-webservice-template-jpa-through-elide",level:3},{value:"Installing Data Models",id:"installing-data-models",level:4},{value:"Docker Compose",id:"docker-compose",level:4},{value:"Deployment via Screwdriver CD",id:"deployment-via-screwdriver-cd",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"AWS",id:"aws",level:3},{value:"The Webservice was Running Properly Right After Deployment, but NOT After a While with &quot;503 Service Unavailable&quot;",id:"the-webservice-was-running-properly-right-after-deployment-but-not-after-a-while-with-503-service-unavailable",level:4}];function h(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.admonition,{type:"tip",children:(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"Yes, we DO NOT support Spring, never ever"}),"\n",(0,n.jsxs)(i.li,{children:["EBS volumes during build time will ",(0,n.jsx)(i.a,{href:"https://qubitpi.github.io/hashicorp-packer/packer/integrations/hashicorp/amazon/latest/components/builder/ebs#:~:text=Optional%3A-,delete_on_termination,-(bool)%20%2D%20Indicates%20whether",children:"automatically be removed"})]}),"\n"]})}),"\n",(0,n.jsx)(i.h2,{id:"setup",children:"Setup"}),"\n",(0,n.jsx)(i.p,{children:"The following credentials and config files need to be ready:"}),"\n",(0,n.jsx)(i.h3,{id:"hashicorp",children:"HashiCorp"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["A ",(0,n.jsx)(i.a,{href:"https://qubitpi.github.io/hashicorp-packer/packer/guides/hcl/variables#from-a-file",children:"HashiCorp Packer variable file"})," with the following variable values (We will refer to the contents of this file as\n",(0,n.jsx)(i.strong,{children:"AWS_WS_PKRVARS_HCL"})," from now on)"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-hcl",children:'aws_image_region                 = "my-aws-region"\nami_name                         = "my-webservice"\ninstance_type                    = "<one of t2.micro/t2.small/t2.medium/t2.large/t2.xlarge/t2.2xlarge>"\nws_war_path                      = "my-webservice-1.0-SNAPSHOT.war"\naws_ws_ssl_cert_file_path        = "server.crt"\naws_ws_ssl_cert_key_file_path    = "server.key"\naws_ws_nginx_config_file_path    = "nginx.conf"\naws_ws_filebeat_config_file_path = "filebeat.yml"\n'})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["A ",(0,n.jsx)(i.a,{href:"https://qubitpi.github.io/hashicorp-terraform/terraform/language/values/variables#variable-definitions-tfvars-files",children:"HashiCorp Terraform variable file"})," with the following variable values (We will refer to the contents of this file as\n",(0,n.jsx)(i.strong,{children:"AWS_WS_TFVARS"})," from now on)"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-hcl",children:'aws_deploy_region   = "my-aws-region"\nami_name            = "my-webservice"\ninstance_type       = "<one of t2.micro/t2.small/t2.medium/t2.large/t2.xlarge/t2.2xlarge>"\nec2_instance_name   = "My Webservice"\nec2_security_groups = ["My Webservice"]\nroute_53_zone_id    = "9DQXLTNSN7ZX9P8V2KZII"\nws_domain           = "mywebservice.mycompany.com"\nsentry_dsn          = "can be empty if sentry.io is not needed"\n'})}),"\n",(0,n.jsx)(i.admonition,{type:"warning",children:(0,n.jsxs)(i.p,{children:["Although the ",(0,n.jsx)(i.code,{children:"ws_domain"})," is a public identity, ",(0,n.jsx)(i.a,{href:"https://qubitpi.github.io/hashicorp-aws/",children:"hashicorp-aws"})," will bind a ",(0,n.jsx)(i.strong,{children:"private IP"})," address to this domain,\nbecause webservice tend to be deployed in a virtual private network and AWS also requires\n",(0,n.jsx)(i.a,{href:"https://serverfault.com/a/967483",children:"EC2 instances of different Security Groups to communicate through private IP"})]})}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"deployment-via-github-actions",children:"Deployment via GitHub Actions"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-yaml",children:"jobs:\n  hashicorp:\n    name: Generated Webservice WAR in GitHub Action, and Publish Template AMI Image and Deploy it to EC2 through HashiCorp\n    needs: tests\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Deployment environment setup\n        uses: QubitPi/hashicorp-aws/hashicorp/webservice/auxiliary/github/actions/cd-setup@master\n        with:\n          aws-ws-pkrvars-hcl: ${{ secrets.AWS_WS_PKRVARS_HCL }}\n          ssl-certificate: ${{ secrets.SSL_CERTIFICATE }}\n          ssl-certificate-key: ${{ secrets.SSL_CERTIFICATE_KEY }}\n          nginx-config-file: ${{ secrets.NGINX_CONFIG_FILE }}\n          aws-ws-tfvars: ${{ secrets.AWS_WS_TFVARS }}\n      - name: Generate webservice WAR file\n        run: mvn -B clean package\n      - name: Move WAR file to a location for HashiCorp deployment to pickup\n        run: mv target/astraios-1.0-SNAPSHOT.war ../hashicorp-aws/hashicorp/webservice/images/\n      - name: QubitPi/hashicorp-aws\n        uses: QubitPi/hashicorp-aws@master\n        with:\n          hashicorp-dir: ../hashicorp-aws/hashicorp/webservice\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: ${{ secrets.AWS_REGION }}\n"})}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"cd-setup"})," step above takes an optional input parameter ",(0,n.jsx)(i.code,{children:"filebeat-config-file"})," which is the Filebeat config file"]}),"\n",(0,n.jsx)(i.h3,{id:"jersey-webservice-template-jpa-through-elide",children:"Jersey Webservice Template (JPA through Elide)"}),"\n",(0,n.jsxs)(i.p,{children:["If deployed webservice is ",(0,n.jsx)(i.a,{href:"https://qubitpi.github.io/jersey-webservice-template/docs/elide/intro",children:"JWT JPA"})," the following\nactions can also be used:"]}),"\n",(0,n.jsx)(i.h4,{id:"installing-data-models",children:"Installing Data Models"}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"model-package-jar-group-id"}),' is the Maven group ID of JAR containing data models, e.g. "com.myorg"']}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"model-package-jar-artifact-id"}),' is the Maven artifact ID of JAR containing data models, e.g. "my-data-models"']}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"model-package-jar-version"}),' is the version of JAR containing data models, e.g. "3.1.7"']}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"models-path"}),' is the relative path to the data models repo, usually prefixed by "../". e.g. "../jpa-models"']}),"\n"]})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-yaml",children:"---\nname: My CI/CD\n\njobs:\n  my-job:\n    name: My job name\n    runs-on: ubuntu-latest\n    steps:\n      - uses: QubitPi/hashicorp-aws/hashicorp/webservice/auxiliary/github/actions/jersey-webservice-template/jpa-elide/install-data-models@master\n        with:\n          model-package-jar-group-id: com.myorg\n          model-package-jar-artifact-id: my-data-models\n          model-package-jar-version: 1.0.0\n          models-path: ../my-data-models\n"})}),"\n",(0,n.jsx)(i.h4,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,n.jsxs)(i.admonition,{type:"info",children:[(0,n.jsx)(i.p,{children:"Required parameters:"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"webservice-repo-clone-url"})," is the git clone URL of the GitHub repo generated by ",(0,n.jsx)(i.a,{href:"https://qubitpi.github.io/jersey-webservice-template/",children:"jersey-webservice-template"})]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"model-package"})," is the\n",(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/jersey-webservice-template-jpa-data-model/blob/master/src/main/java/com/qubitpi/ws/jersey/template/models/Book.java#L16",children:"fully qualified name of the package containing all JPA models"})]}),"\n"]}),(0,n.jsx)(i.p,{children:"Optional parameters:"}),(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"oauth-enabled"})," flags whether or not to enable ",(0,n.jsx)(i.a,{href:"https://qubitpi.github.io/jersey-webservice-template/apidocs/com/qubitpi/ws/jersey/template/web/filters/OAuthFilter.html",children:"OAuthFilter"})," container request filter. Default is ",(0,n.jsx)(i.code,{children:"false"})]}),"\n"]})]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-yaml",children:"---\nname: My CI/CD\n\njobs:\n  my-job:\n    name: My job name\n    runs-on: ubuntu-latest\n    steps:\n      - uses: QubitPi/hashicorp-aws/hashicorp/webservice/auxiliary/github/actions/jersey-webservice-template/jpa-elide/docker-compose@master\n        with:\n          webservice-repo-clone-url: https://github.com/QubitPi/jersey-webservice-template.git\n          model-package: ${{ secrets.MODEL_PACKAGE_NAME }}\n"})}),"\n",(0,n.jsx)(i.h2,{id:"deployment-via-screwdriver-cd",children:"Deployment via Screwdriver CD"}),"\n",(0,n.jsx)(i.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,n.jsx)(i.h3,{id:"aws",children:"AWS"}),"\n",(0,n.jsx)(i.h4,{id:"the-webservice-was-running-properly-right-after-deployment-but-not-after-a-while-with-503-service-unavailable",children:'The Webservice was Running Properly Right After Deployment, but NOT After a While with "503 Service Unavailable"'}),"\n",(0,n.jsxs)(i.p,{children:["This could be the resource starvation on EC2 instance. Please try using a bigger EC2 sizes. For example, bumping\n",(0,n.jsx)(i.em,{children:"t2.micro"})," to ",(0,n.jsx)(i.em,{children:"t2.medium"}),". ",(0,n.jsx)(i.a,{href:"https://qubitpi.github.io/hashicorp-aws/",children:"hashicorp-aws"})," currently supports ",(0,n.jsx)(i.strong,{children:"t2.x"})," sizes, i.e. one of the following sizes can be\nselected:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"t2.micro"}),"\n",(0,n.jsx)(i.li,{children:"t2.small"}),"\n",(0,n.jsx)(i.li,{children:"t2.medium"}),"\n",(0,n.jsx)(i.li,{children:"t2.large"}),"\n",(0,n.jsx)(i.li,{children:"t2.xlarge"}),"\n",(0,n.jsx)(i.li,{children:"t2.2xlarge"}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["To modify the size, set the value of ",(0,n.jsx)(i.code,{children:"instance_type"})," in both ",(0,n.jsx)(i.em,{children:"aws-ws.pkrvars.hcl"})," and ",(0,n.jsx)(i.em,{children:"aws-ws.tfvars"}),". For\nexample:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-hcl",children:'instance_type       = "t2.medium"\n'})})]})}function d(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},1151:(e,i,s)=>{s.d(i,{Z:()=>l,a:()=>a});var n=s(7294);const t={},r=n.createContext(t);function a(e){const i=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);