"use strict";(self.webpackChunkhashicorp_aws=self.webpackChunkhashicorp_aws||[]).push([[4928],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),h=u(n),d=r,b=h["".concat(s,".").concat(d)]||h[d]||p[d]||o;return n?a.createElement(b,i(i({ref:t},l),{},{components:n})):a.createElement(b,i({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6411:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={slug:"dockerhub-github-actions",title:"Build and Push Docker Images through GitHub Action",authors:["jiaqi"],date:new Date("2023-11-20T00:00:00.000Z"),tags:["Docker"]},i=void 0,c={permalink:"/hashicorp-aws/blog/dockerhub-github-actions",editUrl:"https://github.com/QubitPi/hashicorp-aws/tree/gh-pages/blog/2023-11-20-dockerhub-github-actions.md",source:"@site/blog/2023-11-20-dockerhub-github-actions.md",title:"Build and Push Docker Images through GitHub Action",description:"On every push to GitHub, GitHub Action can",date:"2023-11-20T00:00:00.000Z",formattedDate:"November 20, 2023",tags:[{label:"Docker",permalink:"/hashicorp-aws/blog/tags/docker"}],readingTime:1.515,hasTruncateMarker:!1,authors:[{name:"Jiaqi Liu",title:"Maintainer of hashicorp-aws",url:"https://github.com/QubitPi",imageURL:"https://avatars.githubusercontent.com/u/16126939?v=4",key:"jiaqi"}],frontMatter:{slug:"dockerhub-github-actions",title:"Build and Push Docker Images through GitHub Action",authors:["jiaqi"],date:"2023-11-20T00:00:00.000Z",tags:["Docker"]},nextItem:{title:"Switching Node.js Versions with NVM",permalink:"/hashicorp-aws/blog/nvm"}},s={authorsImageUrls:[void 0]},u=[{value:"Generate Docker Hub Access Token",id:"generate-docker-hub-access-token",level:2},{value:"Define CI Workflow on GitHub",id:"define-ci-workflow-on-github",level:2},{value:"Build Status Badge",id:"build-status-badge",level:2}],l={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"On every push to GitHub, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/marketplace/actions/build-and-push-docker-images"},"GitHub Action")," can\nauto-trigger the docker image build and push to ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com"},"Docker Hub"),". We will be able to see that each\npush results in a usable image, which enhances the quality of a docker image a lot."),(0,r.kt)("h2",{id:"generate-docker-hub-access-token"},"Generate Docker Hub Access Token"),(0,r.kt)("p",null,"Before we start, ensure you can access ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/"},"Docker Hub")," from any workflows you create. To do this:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add your Docker ID as a secret to GitHub. Navigate to your GitHub repository and click ",(0,r.kt)("strong",{parentName:"li"},"Settings")," > ",(0,r.kt)("strong",{parentName:"li"},"Secrets")," >\n",(0,r.kt)("strong",{parentName:"li"},"New secret"),"."),(0,r.kt)("li",{parentName:"ol"},"Create a new secret with the name DOCKERHUB_USERNAME and your Docker ID as value."),(0,r.kt)("li",{parentName:"ol"},"Create a new Personal Access Token (PAT). To create a new token, go to\n",(0,r.kt)("a",{parentName:"li",href:"https://hub.docker.com/settings/security"},"Docker Hub Settings")," and then click ",(0,r.kt)("strong",{parentName:"li"},"New Access Token"),".")),(0,r.kt)("h2",{id:"define-ci-workflow-on-github"},"Define CI Workflow on GitHub"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"git checkout")," the branch that contains the docker image definition, i.e. Dockerfile, and add a new YAML file to the\nfollowing path"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"<github-repo>/.github/workflows/<workflow-name>.yml\n")),(0,r.kt)("p",null,"The YAML file should contain the following workflow definition:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\ud83d\udccb Change the ",(0,r.kt)("inlineCode",{parentName:"p"},"<branch-name>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"<docker-image-name>")," below accordingly.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# Builds and pushes XXX image to Docker Hub\n\nname: ci\n\non:\n  push:\n    branches:\n      - '<branch-name>'\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Checkout\n        uses: actions/checkout@v3\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v2\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      -\n        name: Login to DockerHub\n        uses: docker/login-action@v2\n        with:\n          {% raw %}\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n          {% endraw %}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: true\n          {% raw %}\n          tags: ${{ secrets.DOCKERHUB_USERNAME }}/<docker-image-name>:latest\n          {% endraw %}\n")),(0,r.kt)("p",null,"Push the YAML file onto GitHub. Every push to that branch afterwards will trigger the image build and push."),(0,r.kt)("h2",{id:"build-status-badge"},"Build Status Badge"),(0,r.kt)("p",null,"To generate real-time badge on image build status, we could use an\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/adding-a-workflow-status-badge"},"approach"),"\nthat GitHub supports out-of-the-box."))}p.isMDXComponent=!0}}]);