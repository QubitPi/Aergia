"use strict";(self.webpackChunkhashicorp_aws=self.webpackChunkhashicorp_aws||[]).push([[5195],{6554:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=i(5893),t=i(1151);const o={sidebar_position:2,title:"Setup"},r=void 0,a={id:"setup",title:"Setup",description:"[//]: # (Copyright Jiaqi Liu)",source:"@site/docs/2-setup.md",sourceDirName:".",slug:"/setup",permalink:"/hashicorp-aws/docs/setup",draft:!1,unlisted:!1,editUrl:"https://github.com/QubitPi/hashicorp-aws/tree/master/docs/docs/2-setup.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Setup"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/hashicorp-aws/docs/intro"},next:{title:"MLflow Model through REST API",permalink:"/hashicorp-aws/docs/mlflow"}},c={},l=[{value:"Configuration Sources for Both Manual &amp; GitHub CI/CD",id:"configuration-sources-for-both-manual--github-cicd",level:2},{value:"SSL",id:"ssl",level:2},{value:"Step 1 - Store SSL Certificate in GitHub Secrets",id:"step-1---store-ssl-certificate-in-github-secrets",level:2},{value:"Step 2 - Load Certificate into HashiCorp Context through GitHub Action",id:"step-2---load-certificate-into-hashicorp-context-through-github-action",level:2},{value:"Step 3 - Define Nginx Reverse Proxy Config File",id:"step-3---define-nginx-reverse-proxy-config-file",level:2},{value:"Step 3 - Loading Certificates and Nginx Config Files into AMI Image",id:"step-3---loading-certificates-and-nginx-config-files-into-ami-image",level:2},{value:"Step 4 - Moving Certificates and Nginx Config Files to the Proper Locations in AMI",id:"step-4---moving-certificates-and-nginx-config-files-to-the-proper-locations-in-ami",level:2},{value:"Step 5 - Registering DNS Record for the EC2 Instance",id:"step-5---registering-dns-record-for-the-ec2-instance",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",strong:"strong",sup:"sup",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"configuration-sources-for-both-manual--github-cicd",children:"Configuration Sources for Both Manual & GitHub CI/CD"}),"\n",(0,s.jsxs)(n.p,{children:["[hashicorp-aws] can be used for both ",(0,s.jsx)(n.strong,{children:"manual deployment"})," and ",(0,s.jsx)(n.strong,{children:"automatic GitHub Action based deployment"}),". To achieve\nboth, the following file structure is required",(0,s.jsx)(n.sup,{children:(0,s.jsx)(n.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:".\n\u251c\u2500\u2500 hashicorp-aws/\n\u2502   \u2514\u2500\u2500 hashicorp/\n\u2502       \u2514\u2500\u2500 webservice/\n\u2502           \u2514\u2500\u2500 deploy.sh\n\u2514\u2500\u2500 hashicorp-aws-config-dir\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We will cover ",(0,s.jsx)(n.em,{children:"hashicorp-aws-config-dir"})," later."]}),"\n",(0,s.jsx)(n.h2,{id:"ssl",children:"SSL"}),"\n",(0,s.jsx)(n.p,{children:"Let's image the following scenario:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["I purchased a domain from ",(0,s.jsx)(n.a,{href:"https://domains.google/",children:"Google Domain"})," called ",(0,s.jsx)(n.strong,{children:"my-domain.com"})]}),"\n",(0,s.jsxs)(n.li,{children:["I developed a web app that will be exposed at ",(0,s.jsx)(n.strong,{children:"my-app.my-domain.com"})]}),"\n",(0,s.jsxs)(n.li,{children:["I will deploy my app to ",(0,s.jsx)(n.a,{href:"https://aws.amazon.com/ec2/",children:"AWS EC2"})," using HashiCorp AWS"]}),"\n",(0,s.jsxs)(n.li,{children:["When my app is up and running, I need to automatically enable secure SSL communication so that my app can be visited\nat ",(0,s.jsx)(n.code,{children:"https://my-app.my-domain.com"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Assuming that ",(0,s.jsx)(n.strong,{children:"HashiCorp AWS, or Immutable Infrastructure in general, is not responsible for SSL certificates lifecycle\nmanagement"}),", we can read the certificate from ",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets",children:"GitHub Secrets"})," and load it into\n",(0,s.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html",children:"AWS AMI"})," in the following steps"]}),"\n",(0,s.jsxs)(n.h2,{id:"step-1---store-ssl-certificate-in-github-secrets",children:["Step 1 - Store SSL Certificate in ",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets",children:"GitHub Secrets"})]}),"\n",(0,s.jsxs)(n.p,{children:["As a prerequisite, please ",(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/hashicorp-aws/blog/certbot",children:"have both the certificate and certificate key files"})," ready. Next we will have\nthe following ",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets",children:"GitHub Action Secrets"})," set up:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SSL_CERTIFICATE"}),": The content of the certificate file"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SSL_CERTIFICATE_KEY"}),": The content of the certificate key file"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"step-2---load-certificate-into-hashicorp-context-through-github-action",children:["Step 2 - Load Certificate into HashiCorp Context through ",(0,s.jsx)(n.a,{href:"https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions",children:"GitHub Action"})]}),"\n",(0,s.jsx)(n.p,{children:'Right before the HashiCorp AWS step, we will put the following "Load SSL Certificates" step:'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"  ...\n\n  steps:\n    ...\n\n    - name: Load SSL Certificates\n      run: |\n        echo '${{ secrets.SSL_CERTIFICATE }}' > server.crt\n        echo '${{ secrets.SSL_CERTIFICATE_KEY }}' > server.key\n      working-directory: hashicorp/images\n\n    - name: Publish my-app AMI image and deploy it to EC2 through HashiCorp\n      uses: QubitPi/hashicorp-aws@master\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: ${{ secrets.AWS_REGION }}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-3---define-nginx-reverse-proxy-config-file",children:"Step 3 - Define Nginx Reverse Proxy Config File"}),"\n",(0,s.jsxs)(n.p,{children:["Note that in the following config, Nginx assumes the certificate file and its key file are located at\n",(0,s.jsx)(n.strong,{children:"/etc/ssl/certs/server.crt"})," and ",(0,s.jsx)(n.strong,{children:"/etc/ssl/private/server.key"}),", respectively. In addition, please modify\n",(0,s.jsx)(n.code,{children:"my-app.my-domain.com"})," and port ",(0,s.jsx)(n.code,{children:"5000"})," in it accordingly:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ini",children:"server {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n\n    server_name _;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n\nserver {\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n    server_name my-app.my-domain.com;\n\n    location / {\n        proxy_pass http://localhost:5000;\n    }\n\n    listen [::]:443 ssl ipv6only=on;\n    listen 443 ssl;\n    ssl_certificate /etc/ssl/certs/server.crt;\n    ssl_certificate_key /etc/ssl/private/server.key;\n}\n\nserver {\n    if ($host = my-app.my-domain.com) {\n        return 301 https://$host$request_uri;\n    }\n\n    listen 80 ;\n    listen [::]:80 ;\n    server_name my-app.my-domain.com;\n    return 404;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-3---loading-certificates-and-nginx-config-files-into-ami-image",children:"Step 3 - Loading Certificates and Nginx Config Files into AMI Image"}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/hashicorp-packer/packer/docs/templates/hcl_templates/blocks/build",children:"build block"})," of our ",(0,s.jsx)(n.strong,{children:"images/aws-my-app.pkr.hcl"})," file, we add 3 provisioners to\nload the certificate, certificate key, and the Nginx reverse proxy config file into AMI."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Note that Packer's file provisioner do not have root user privilege to put our files directly to the desired\nlocations. We will put them instead to a temporary location and have the shell provisioner to move them second time\nto the final locations in the\n",(0,s.jsx)(n.a,{href:"#step-4---moving-certificates-and-nginx-config-files-to-the-proper-locations-in-ami",children:"next step"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-hcl",children:'build {\n  ...\n\n  # Load SSL Certificates into AMI image\n  provisioner "file" {\n    source = "./server.crt"\n    destination = "/home/ubuntu/server.crt"\n  }\n  provisioner "file" {\n    source = "./server.key"\n    destination = "/home/ubuntu/server.key"\n  }\n\n  # Load Nginx config file into AMI image\n  provisioner "file" {\n    source = "./nginx-ssl.conf"\n    destination = "/home/ubuntu/nginx-ssl.conf"\n  }\n\n  ...\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"step-4---moving-certificates-and-nginx-config-files-to-the-proper-locations-in-ami",children:"Step 4 - Moving Certificates and Nginx Config Files to the Proper Locations in AMI"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["We will post-configure AMI image using ",(0,s.jsx)(n.a,{href:"https://qubitpi.github.io/hashicorp-packer/packer/docs/provisioners/shell",children:"Shell Provisioner"}),". This is achieved by\nplacing a ",(0,s.jsx)(n.strong,{children:"script.sh"})," file under the ",(0,s.jsx)(n.code,{children:"scripts"})," directory\nIn ",(0,s.jsx)(n.strong,{children:"scripts/aws-my-app.pkr-setup.sh"})," file, we add the following server configuration script:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Install Nginx and load SSL config\nsudo apt install -y nginx\nsudo mv /home/ubuntu/nginx-ssl.conf /etc/nginx/sites-enabled/default\nsudo mv /home/ubuntu/server.crt /etc/ssl/certs/server.crt\nsudo mv /home/ubuntu/server.key /etc/ssl/private/server.key\n"})}),"\n",(0,s.jsx)(n.h2,{id:"step-5---registering-dns-record-for-the-ec2-instance",children:"Step 5 - Registering DNS Record for the EC2 Instance"}),"\n",(0,s.jsxs)(n.p,{children:["We will expose our EC2 under that domain using ",(0,s.jsx)(n.a,{href:"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_record.html",children:"aws_route53_record"}),", which\nallows us to dynamically bind EC2 IP to its hosted domain so that each time when a new EC2 instance is instantiated,\nthat instance will register its IP to ",(0,s.jsx)(n.code,{children:"my-domain.com"})," on Route 53."]}),"\n",(0,s.jsxs)(n.p,{children:["In our ",(0,s.jsx)(n.strong,{children:"instances/aws-my-app.tf"})," file, we will add the following"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-terraform",children:'resource "aws_route53_record" "my-app-my-domain-com" {\n  zone_id         = "SDFE94DF94FJGI4FKHYEG12E"\n  name            = "my-app.my-domain.com"\n  type            = "A"\n  ttl             = 300\n  records         = [aws_instance.my-app.public_ip]\n  allow_overwrite = true\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Please change the ",(0,s.jsx)(n.code,{children:"zone_id"})," value accordinly"]})}),"\n",(0,s.jsxs)(n.admonition,{type:"caution",children:[(0,s.jsxs)(n.p,{children:["Make sure this resource is declared after the ",(0,s.jsx)(n.a,{href:"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance",children:"aws_instance"}),", because IP is available\nonly after the EC2 instance has been provisioned; The IAM user associated with the ",(0,s.jsx)(n.strong,{children:"AWS_ACCESS_KEY_ID"})," &\n",(0,s.jsx)(n.strong,{children:"AWS_SECRET_ACCESS_KEY"})," should also have sufficient permission to interact with Route 53"]}),(0,s.jsxs)(n.p,{children:["In addition, the option\n",(0,s.jsx)(n.a,{href:"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/route53_record#allow_overwrite",children:(0,s.jsx)(n.strong,{children:"allow_overwrite"})}),'\ndeletes existing DNS record with name "my-app.my-domain.com"']})]}),"\n",(0,s.jsxs)(n.admonition,{title:"What if my domain is on Google Domain, not on Route 53?",type:"tip",children:[(0,s.jsx)(n.p,{children:"In this case, we can simply connect Google Domain to AWS Route 53 in the following steps"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create a Hosted Zone in AWS Route 53:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Login into AWS Management Console and head towards Route 53"}),"\n",(0,s.jsxs)(n.li,{children:["In Route 53 -> Click ",(0,s.jsx)(n.strong,{children:"Hosted zones"})," -> Click ",(0,s.jsx)(n.strong,{children:"Create Hosted Zone"})]}),"\n",(0,s.jsxs)(n.li,{children:["Fill in ",(0,s.jsx)(n.strong,{children:"Domain Name"})," and select ",(0,s.jsx)(n.strong,{children:"Type"})," as ",(0,s.jsx)(n.strong,{children:"Public Hosted Zone"})," and click create"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Update Google Domain to use custom ",(0,s.jsx)(n.a,{href:"https://www.domain.com/help/article/what-is-a-nameserver",children:"name servers"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Log into ",(0,s.jsx)(n.a,{href:"https://domains.google/",children:"Google Domain"})," account and click on ",(0,s.jsx)(n.strong,{children:"My domains"})]}),"\n",(0,s.jsxs)(n.li,{children:["Click on ",(0,s.jsx)(n.strong,{children:"DNS"})]}),"\n",(0,s.jsxs)(n.li,{children:["At the top of the page, select ",(0,s.jsx)(n.strong,{children:"Custom name servers"})]}),"\n",(0,s.jsxs)(n.li,{children:['Copy and paste all four Name Server (NS) from the Route 53 Record Sets panel (Under "Hosted zone details") and\nclick ',(0,s.jsx)(n.strong,{children:"save"})]}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,s.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,s.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{id:"user-content-fn-1",children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://tree.nathanfriend.io/?s=(%27options!(%27fancy3~fullPath!false~trailingSlash3~rootDot3)~4(%274%2752*02**webservice2***deploy.sh25-runbooks%27)~version!%271%27)*%20%200hashicorp2%5Cn3!true4source!50-aws%0154320",children:"https://tree.nathanfriend.io/?s=(%27options!(%27fancy3~fullPath!false~trailingSlash3~rootDot3)~4(%274%2752*02**webservice2***deploy.sh25-runbooks%27)~version!%271%27)*%20%200hashicorp2%5Cn3!true4source!50-aws%0154320"}),"* ",(0,s.jsx)(n.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>r});var s=i(7294);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);