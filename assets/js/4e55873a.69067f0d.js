"use strict";(self.webpackChunkaergia=self.webpackChunkaergia||[]).push([[9231],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),d=i,h=m["".concat(o,".").concat(d)]||m[d]||u[d]||r;return a?n.createElement(h,s(s({ref:t},c),{},{components:a})):n.createElement(h,s({ref:t},c))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3355:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:2},s="Elastic Stack (ELK)",l={unversionedId:"elk",id:"elk",title:"Elastic Stack (ELK)",description:"Assuming ELK is a non-frequently deployed tech asset, [Aergia] makes it a semi-automated deployment.",source:"@site/docs/elk.md",sourceDirName:".",slug:"/elk",permalink:"/aergia/docs/elk",draft:!1,editUrl:"https://github.com/QubitPi/aergia/tree/gh-pages/docs/elk.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Aergia Documentation Home",permalink:"/aergia/docs/intro"}},o={},p=[{value:"Setup",id:"setup",level:2},{value:"Get Aergia ELK Deployer",id:"get-aergia-elk-deployer",level:3},{value:"Authenticating to AWS",id:"authenticating-to-aws",level:3},{value:"Preparing for Building AMI Image",id:"preparing-for-building-ami-image",level:3},{value:"Building AMI Image",id:"building-ami-image",level:3},{value:"Preparing for Deploying EC2 Instance",id:"preparing-for-deploying-ec2-instance",level:3},{value:"Deploying EC2 Instance",id:"deploying-ec2-instance",level:3},{value:"Post Setup in EC2 Instance",id:"post-setup-in-ec2-instance",level:3},{value:"Logstash",id:"logstash",level:4}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"elastic-stack-elk"},"Elastic Stack (ELK)"),(0,i.kt)("p",null,"Assuming ELK is a ",(0,i.kt)("em",{parentName:"p"},"non-frequently deployed")," tech asset, ",(0,i.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/aergia/"},"Aergia")," makes it a semi-automated deployment."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://qubitpi.github.io/aergia/"},"Aergia")," deploys ELK as a ",(0,i.kt)("a",{parentName:"p",href:"https://aws.amazon.com/ec2/instance-types/t2/"},"t2.large")," instance. This is because all\nElasticsearch, Kibana, and Logstash are contained in it, which can cause\n",(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/50022217"},"performance issue")," in small instance. t2.large, by experiment, is the smallest\nsize that supports smooth runtime. For that, ",(0,i.kt)("strong",{parentName:"p"},"please be aware AWS credit charges shall incur afterward"))),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("h3",{id:"get-aergia-elk-deployer"},"Get Aergia ELK Deployer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git@github.com:QubitPi/aergia.git\ncd hashicorp/elk\n")),(0,i.kt)("h3",{id:"authenticating-to-aws"},"Authenticating to AWS"),(0,i.kt)("p",null,"Before we can build the AMI, we need to provide our AWS credentials to Packer. These credentials have permissions to\ncreate, modify and delete EC2 instances."),(0,i.kt)("p",null,"To allow Packer to access our IAM user credentials, set our AWS access key ID and secret key as environment variables:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'export AWS_ACCESS_KEY_ID="<YOUR_AWS_ACCESS_KEY_ID>"\nexport AWS_SECRET_ACCESS_KEY="<YOUR_AWS_SECRET_ACCESS_KEY>"\n')),(0,i.kt)("p",null,"In addition, we need to have an ",(0,i.kt)("em",{parentName:"p"},"IAM user")," who has the following ",(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction_access-management.html"},"AWS permissions policies"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"AmazonEC2FullAccess")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"AmazonRoute53FullAccess")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"IAMFullAccess"))),(0,i.kt)("h3",{id:"preparing-for-building-ami-image"},"Preparing for Building AMI Image"),(0,i.kt)("p",null,"Create a file named ",(0,i.kt)("strong",{parentName:"p"},"aws-elk.auto.pkrvars.hcl")," at any our preferred location with the following contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-hcl"},'aws_image_region           = "us-east-2"\nssl_cert_file_path         = "/absolute/path/to/server.crt"\nssl_cert_key_file_path     = "/absolute/path/to/server.key"\nssl_nginx_config_file_path = "/absolute/path/to/nginx-ssl.conf"\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"aws_image_region")," is the region where ELK AMI will be published to. The published image will be ",(0,i.kt)("em",{parentName:"li"},"private")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ssl_cert_file_path")," and ",(0,i.kt)("strong",{parentName:"li"},"ssl_cert_key_file_path")," above are the local absolute paths to SSL certificate file and\nSSL certificate key, respectively. They can be ",(0,i.kt)("a",{parentName:"li",href:"https://qubitpi.github.io/aergia/blog/certbot"},"obtained via Certbot")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ssl_nginx_config_file_path")," is the local absolute path to the Nginx config file (see ",(0,i.kt)("strong",{parentName:"li"},"an example")," below) that\nconsumes the SSL certificate above and enables HTTPS.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Here is an example of the aforementioned Nginx config file. Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"my-domain.com")," with the domain backed by the\n",(0,i.kt)("a",{parentName:"p",href:"#ssl-certificate"},"SSL")," accordingly:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-text"},"server {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n\n    server_name _;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}\n\nserver {\n    root /var/www/html;\n\n    index index.html index.htm index.nginx-debian.html;\n    server_name my-domain.com;\n\n    location / {\n        proxy_pass http://localhost:5601;\n    }\n\n    listen [::]:443 ssl ipv6only=on;\n    listen 443 ssl;\n    ssl_certificate /etc/ssl/certs/server.crt;\n    ssl_certificate_key /etc/ssl/private/server.key;\n}\n\nserver {\n    if ($host = my-domain.com) {\n        return 301 https://$host$request_uri;\n    }\n\n    listen 80 ;\n    listen [::]:80 ;\n    server_name my-domain.com;\n    return 404;\n}\n"))),(0,i.kt)("h3",{id:"building-ami-image"},"Building AMI Image"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"packer init .\npacker fmt .\npacker validate .\npacker build --var-file=/absolute/path/to/aforementioned/aws-elk.auto.pkrvars.hcl aws-elk.pkr.hcl\n")),(0,i.kt)("p",null,"Record the ",(0,i.kt)("strong",{parentName:"p"},"Elasticsearch password (for ",(0,i.kt)("em",{parentName:"strong"},"elastic")," user)")," at command line prompt. For example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"==> install-elk.amazon-ebs.elk: + sudo /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic\n==> install-elk.amazon-ebs.elk: + yes\n    install-elk.amazon-ebs.elk: This tool will reset the password of the [elastic] user to an autogenerated value.\n    install-elk.amazon-ebs.elk: The password will be printed in the console.\n    install-elk.amazon-ebs.elk:\n    install-elk.amazon-ebs.elk:\n    install-elk.amazon-ebs.elk: Password for the [elastic] user successfully reset.\n    install-elk.amazon-ebs.elk: New value: dsrg34IKHU787iud=dio\n")),(0,i.kt)("p",null,"In this case, the password is ",(0,i.kt)("inlineCode",{parentName:"p"},"dsrg34IKHU787iud=dio")," which is shown in the last line of the output above."),(0,i.kt)("p",null,"If we see the following output in the end, if means AMI image has been built successfully:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"==> Wait completed after 5 minutes 40 seconds\n\n==> Builds finished. The artifacts of successful builds are:\n--\x3e install-elk.amazon-ebs.elk: AMIs were created:\n<sensitive>: ami-34gfg45herr356hre43g\n")),(0,i.kt)("h3",{id:"preparing-for-deploying-ec2-instance"},"Preparing for Deploying EC2 Instance"),(0,i.kt)("p",null,"Create a file named ",(0,i.kt)("strong",{parentName:"p"},"aws-elk.auto.tfvars")," at any our preferred location with the following contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-hcl"},'aws_deploy_region = "us-east-2"\nzone_id = "<AWS Route 53 Zone ID>"\nelk_doman = "myelk.mycompany.com"\nkey_pair_name = "<AWS keypair name for SSH>"\ninstance_name = "<AWS EC2 displayed instance name>"\nsecurity_group = "<AWS Security Group for the EC2 instance>"\n')),(0,i.kt)("h3",{id:"deploying-ec2-instance"},"Deploying EC2 Instance"),(0,i.kt)("p",null,"Copy the aforementioned ",(0,i.kt)("inlineCode",{parentName:"p"},"aws-elk.auto.tfvars")," file into the ",(0,i.kt)("inlineCode",{parentName:"p"},"aergia/hashicorp/elk/instance")," directory and run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd aergia/hashicorp/elk/instance\nterraform init\nterraform apply -auto-approve\n")),(0,i.kt)("h3",{id:"post-setup-in-ec2-instance"},"Post Setup in EC2 Instance"),(0,i.kt)("p",null,"As we've mentioned in the beginning, this is a semi-deployment and we still need to SSH into the box to manually\ngenerate Kibana token & verification code. This will make the automated deploymentl logic simple and easy to maintain"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'sudo /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token --scope kibana --url "https://localhost:9200"\nsudo /usr/share/kibana/bin/kibana-verification-code\n')),(0,i.kt)("p",null,"Now we can visit ",(0,i.kt)("inlineCode",{parentName:"p"},"https://myelk.mycompany.com")," to enter the token and verification code to access our ELK instance."),(0,i.kt)("h4",{id:"logstash"},"Logstash"),(0,i.kt)("p",null,"Logstash, at this moment, supports redirecting log lines from Filebeat to Elasticsearch and, similar to the\ntoken and verification above, needs to be setup manually."),(0,i.kt)("p",null,"Create a file named ",(0,i.kt)("strong",{parentName:"p"},"logstash-filebeat.conf")," in the default location chosen by Logstash:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /usr/share/logstash/logstash-filebeat.conf\n")),(0,i.kt)("p",null,"Copy and paste the following contents into the file"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"<password for user 'elastic'>")," accordingly. If the user is ",(0,i.kt)("em",{parentName:"p"},"elastic"),", which is the case here, the password\nhas been generated during the ",(0,i.kt)("a",{parentName:"p",href:"#building-ami-image"},"AMI image building phase"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'input {\n    beats {\n        port => "5044"\n    }\n}\n\noutput {\n    elasticsearch {\n        hosts => [ "https://localhost:9200" ]\n\n        ssl_certificate_verification => false\n\n        user => "elastic"\n\n        password => "<password for user \'elastic\'>"\n    }\n}\n')),(0,i.kt)("p",null,"Start Logstash with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo /usr/share/logstash/bin/logstash -f logstash-filebeat.conf --config.reload.automatic\n")),(0,i.kt)("p",null,"or with nohup at background:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"nohup sudo /usr/share/logstash/bin/logstash -f logstash-filebeat.conf --config.reload.automatic &\n")))}u.isMDXComponent=!0}}]);